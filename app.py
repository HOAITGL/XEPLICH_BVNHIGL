from models.schedule_lock import ScheduleLock

from functools import wraps

def session_login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect('/login')
        return f(*args, **kwargs)
    return decorated_function

import sys
import os
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
from flask import Flask, render_template, request, redirect, url_for, flash, session
from flask_login import login_required
from datetime import datetime, timedelta
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate, upgrade
from models import ScheduleSignature
from models.ScheduleSignature import ScheduleSignature
from extensions import db  # S·ª≠ d·ª•ng ƒë·ªëi t∆∞·ª£ng db ƒë√£ kh·ªüi t·∫°o trong extensions.py
from openpyxl import Workbook
from io import BytesIO
from logging.handlers import RotatingFileHandler
from flask_migrate import Migrate
from models.permission import Permission
from models.unit_config import UnitConfig
from models.user import User
from models.hazard_config import HazardConfig
from datetime import date
import calendar
from models import User, Shift, HazardConfig, ChamCong
from sqlalchemy import text as sql_text
from datetime import date, datetime, timedelta
import calendar, unicodedata
from flask import jsonify
from flask import jsonify, request, session
from sqlalchemy import func
import unicodedata


from logging.handlers import RotatingFileHandler
import logging, os

def setup_logging(app):
    if not os.path.exists('logs'):
        os.mkdir('logs')
    log_handler = RotatingFileHandler('logs/activity.log', maxBytes=1000000, backupCount=5)
    log_handler.setLevel(logging.INFO)
    log_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    log_handler.setFormatter(log_formatter)
    
    # Tr√°nh th√™m nhi·ªÅu handler n·∫øu ƒë√£ c√≥
    if not any(isinstance(h, RotatingFileHandler) for h in app.logger.handlers):
        app.logger.addHandler(log_handler)
    
    app.logger.setLevel(logging.INFO)

app = Flask(__name__)

# L·∫•y DATABASE_URL t·ª´ m√¥i tr∆∞·ªùng (Render), n·∫øu kh√¥ng c√≥ -> fallback SQLite
db_url = os.getenv('DATABASE_URL')
if not db_url:
    db_url = 'sqlite:///database.db'  # fallback local
elif db_url.startswith("postgres://"):
    # Render th∆∞·ªùng tr·∫£ postgres:// nh∆∞ng SQLAlchemy c·∫ßn postgresql://
    db_url = db_url.replace("postgres://", "postgresql://", 1)

app.config['SQLALCHEMY_DATABASE_URI'] = db_url
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.secret_key = 'lichtruc2025'

db.init_app(app)
migrate = Migrate(app, db)

setup_logging(app)
app.logger.info('[BOOT] Logging system started')

from sqlalchemy import text

@app.before_first_request
def add_missing_columns():
    with app.app_context():
        # Danh s√°ch c·ªôt c·∫ßn ki·ªÉm tra
        required_columns = {
            'shift': [
                ('order', 'INTEGER DEFAULT 0')
            ],
            'user': [
                ('contract_type', 'TEXT'),
                ('signature_file', 'TEXT'),   # üëà th√™m d√≤ng n√†y
                ('start_year', 'INTEGER')     # üëà th√™m d√≤ng n√†y
            ]
        }

        for table, columns in required_columns.items():
            for col_name, col_type in columns:
                # Ki·ªÉm tra c·ªôt t·ªìn t·∫°i
                if 'postgres' in db.engine.url.drivername:
                    # Postgres: ki·ªÉm tra qua information_schema
                    check_col = db.session.execute(sql_text(f"""
                        SELECT column_name FROM information_schema.columns
                        WHERE table_name='{table}' AND column_name='{col_name}';
                    """)).fetchall()
                    column_exists = len(check_col) > 0
                else:
                    # SQLite: ki·ªÉm tra qua PRAGMA
                    existing_cols = db.session.execute(sql_text(f"PRAGMA table_info({table});")).fetchall()
                    existing_col_names = [col[1] for col in existing_cols]
                    column_exists = col_name in existing_col_names

                # N·∫øu ch∆∞a c√≥ c·ªôt th√¨ th√™m
                if not column_exists:
                    db.session.execute(sql_text(f'ALTER TABLE {table} ADD COLUMN "{col_name}" {col_type};'))
                    db.session.commit()
                    print(f"‚úÖ ƒê√£ th√™m c·ªôt '{col_name}' v√†o b·∫£ng {table}.")

                    # N·∫øu l√† c·ªôt order trong shift ‚Üí c·∫≠p nh·∫≠t gi√° tr·ªã m·∫∑c ƒë·ªãnh
                    if table == 'shift' and col_name == 'order':
                        shifts = Shift.query.order_by(Shift.id).all()
                        for i, s in enumerate(shifts):
                            s.order = i
                        db.session.commit()
                        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√° tr·ªã m·∫∑c ƒë·ªãnh cho c·ªôt 'order'.")

                    # N·∫øu l√† c·ªôt contract_type trong user ‚Üí set m·∫∑c ƒë·ªãnh 'bi√™n ch·∫ø'
                    if table == 'user' and col_name == 'contract_type':
                        db.session.execute(sql_text("UPDATE \"user\" SET contract_type = 'bi√™n ch·∫ø' WHERE contract_type IS NULL;"))
                        db.session.commit()
                        print("‚úÖ ƒê√£ set m·∫∑c ƒë·ªãnh contract_type = 'bi√™n ch·∫ø' cho t·∫•t c·∫£ user c≈©.")
                else:
                    print(f"‚ÑπÔ∏è C·ªôt '{col_name}' ƒë√£ t·ªìn t·∫°i trong b·∫£ng {table}, b·ªè qua.")

        # üîç Debug: in danh s√°ch c·ªôt c·ªßa b·∫£ng user
        insp = db.inspect(db.engine)
        cols = [c["name"] for c in insp.get_columns("user")]
        print("üìå C√°c c·ªôt b·∫£ng user:", cols)

# ‚úÖ T·∫°o b·∫£ng n·∫øu thi·∫øu (d√πng cho Render khi kh√¥ng g·ªçi __main__)
with app.app_context():
    from sqlalchemy import inspect
    inspector = inspect(db.engine)
    existing_tables = inspector.get_table_names()
    required_tables = {'user', 'permission'}

    if not required_tables.issubset(set(existing_tables)):
        db.create_all()
        print("‚úÖ ƒê√£ t·∫°o b·∫£ng user/permission tr√™n Render.")
    else:
        print("‚úÖ C√°c b·∫£ng ch√≠nh ƒë√£ t·ªìn t·∫°i.")


migrate = Migrate(app, db)

with app.app_context():
    try:
        upgrade()
        print("‚úÖ ƒê√£ t·ª± ƒë·ªông ch·∫°y flask db upgrade.")
    except Exception as e:
        print(f"‚ùå L·ªói khi upgrade database: {e}")


# ‚úÖ ƒê·ªãnh nghƒ©a admin_required
from functools import wraps
from flask import redirect, url_for, flash
from flask_login import current_user

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated:
            flash("‚ö†Ô∏è B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p.", "danger")
            return redirect(url_for('login'))
        if current_user.role != 'admin':
            flash("‚ùå Ch·ª©c nƒÉng n√†y ch·ªâ d√†nh cho qu·∫£n tr·ªã vi√™n.", "danger")
            return redirect(url_for('index'))
        return f(*args, **kwargs)
    return decorated_function
    allowed_routes = ['login']
    if 'user_id' not in session and request.endpoint not in allowed_routes:
        return redirect('/login')

from flask_login import LoginManager

# Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

@login_manager.user_loader
def load_user(user_id):
    return db.session.get(User, int(user_id))

# Import models
from models.user import User
from models.shift import Shift
from models.schedule import Schedule
from models.ca_config import CaConfiguration
from models.clinic_room import ClinicRoom
from models.ca import Ca

# Import logic
from scheduler.logic import generate_schedule

# app.py
@app.context_processor
def inject_permissions():
    if 'user_id' not in session:
        return dict(user=None, allowed_modules=[])

    role = (session.get('role') or '').lower()
    user = {
        'name': session.get('name', 'Ng∆∞·ªùi d√πng'),
        'role': session.get('role'),
        'department': session.get('department'),
    }

    FULL_ADMIN = [
        'trang_chu','xem_lich_truc','yeu_cau_cv_ngoai_gio','don_nghi_phep',
        'xep_lich_truc','tong_hop_khth','cham_cong','bang_cham_cong_2',
        'bang_cong_gop','bang_tinh_tien_truc','cau_hinh_ca_truc','thiet_lap_phong_kham',
        'nhan_su_theo_khoa','cau_hinh_tien_truc','cau_hinh_doc_hai','thiet_lap_khoa_hscc',
        'phan_quyen','danh_sach_cong_viec','unit_config','xem_log','doi_mat_khau'
    ]

    BASELINE = {
        'admin1': [
            'trang_chu','xem_lich_truc','yeu_cau_cv_ngoai_gio','don_nghi_phep',
            'xep_lich_truc','tong_hop_khth','cham_cong','bang_cham_cong_2',
            'bang_cong_gop','bang_tinh_tien_truc','cau_hinh_ca_truc','thiet_lap_phong_kham',
            'nhan_su_theo_khoa','cau_hinh_tien_truc','danh_sach_cong_viec','doi_mat_khau'
        ],
        'manager': [
            'trang_chu','xem_lich_truc','don_nghi_phep','xep_lich_truc','tong_hop_khth',
            'cham_cong','bang_cham_cong_2','bang_cong_gop','bang_tinh_tien_truc','doi_mat_khau'
        ],
        'user': ['trang_chu','xem_lich_truc','don_nghi_phep','doi_mat_khau']
    }

    # 1) Admin: lu√¥n full
    if role == 'admin':
        return dict(user=user, allowed_modules=FULL_ADMIN)

    # 2) Vai tr√≤ kh√°c: ∆∞u ti√™n DB, n·∫øu kh√¥ng c√≥ th√¨ baseline
    rows = Permission.query.filter_by(user_id=session['user_id']).all()
    if rows:
        allowed = sorted({r.module_name for r in rows if getattr(r, 'can_access', True)})
    else:
        allowed = BASELINE.get(role, BASELINE['user'])

    return dict(user=user, allowed_modules=allowed)


@app.route('/module-config', methods=['GET', 'POST'])
def edit_module_config():
    if session.get('role') != 'admin':
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y."

    config_path = os.path.join(os.path.dirname(__file__), 'modules_config.json')

    if request.method == 'POST':
        try:
            data = request.form.get('config_json')
            parsed = json.loads(data)  # ki·ªÉm tra JSON h·ª£p l·ªá
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(parsed, f, indent=2, ensure_ascii=False)
            flash("‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh ph√¢n h·ªá.", "success")
        except Exception as e:
            flash(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {str(e)}", "danger")
        return redirect('/module-config')

    with open(config_path, encoding='utf-8') as f:
        current_config = f.read()

    return render_template('edit_module_config.html', config=current_config)

from flask_login import login_user, logout_user
from flask import redirect, url_for, flash
from flask import request, redirect, render_template, flash
from models.user import User

@app.route('/')
@login_required
def index():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()

        app.logger.info(f"[LOGIN] User '{username}' ƒëƒÉng nh·∫≠p t·ª´ IP {request.remote_addr}")

        # Kh√¥ng ti·∫øt l·ªô t√†i kho·∫£n hay m·∫≠t kh·∫©u ƒë√∫ng/sai c·ª• th·ªÉ
        if not user or user.password != password:
            flash("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.", "danger")
            return redirect(url_for('login'))

        # ƒêƒÉng nh·∫≠p th√†nh c√¥ng
        login_user(user)  # ‚úÖ B·∫Øt bu·ªôc n·∫øu d√πng Flask-Login
        session['user_id'] = user.id
        session['role'] = user.role
        session['department'] = user.department

        app.logger.info(f"[LOGIN] T√†i kho·∫£n '{username}' ƒë√£ ƒëƒÉng nh·∫≠p t·ª´ IP {request.remote_addr}")
        flash('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', 'success')
        return redirect(url_for('index'))

    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash("B·∫°n ƒë√£ ƒëƒÉng xu·∫•t.", "info")
    return redirect(url_for('login'))

# ================== Helpers Ngh·ªâ ph√©p / Ph√©p nƒÉm ==================
from datetime import date, datetime, timedelta, time
import unicodedata  # (n·∫øu c·∫ßn cho ch·ªó kh√°c)
from models import db
from models.shift import Shift
from models.user import User

# === Ca "Ngh·ªâ ph√©p" m√£ P ===
def get_or_create_leave_shift():
    """
    Tr·∫£ v·ªÅ ca 'Ngh·ªâ ph√©p' (code='P'). N·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi.
    """
    leave = Shift.query.filter_by(code="P").first()
    if not leave:
        leave = Shift(
            name="Ngh·ªâ ph√©p",
            code="P",
            start_time=time(7, 0),
            end_time=time(7, 0),
            duration=24.0,
        )
        db.session.add(leave)
        db.session.flush()  # c√≥ leave.id ngay trong phi√™n
    return leave

# === Ng√†y l·ªÖ (c√≥ th·ªÉ thay b·∫±ng n·∫°p t·ª´ DB) ===
HOLIDAYS = {
    date(2025, 1, 1),
    date(2025, 4, 30),
    date(2025, 5, 1),
    date(2025, 9, 2),
}

WORKDAYS = {0, 1, 2, 3, 4}  # Th·ª© 2..Th·ª© 6

def count_workdays(start_date: date, end_date: date, holidays=None, workdays=WORKDAYS) -> int:
    """
    ƒê·∫øm s·ªë ng√†y l√†m vi·ªác t·ª´ start_date..end_date (bao g·ªìm 2 ƒë·∫ßu),
    lo·∫°i tr·ª´ T7/CN v√† c√°c ng√†y trong 'holidays'.
    """
    if not start_date or not end_date:
        return 0
    if start_date > end_date:
        start_date, end_date = end_date, start_date

    hs = set(holidays or [])
    d, total = start_date, 0
    while d <= end_date:
        if d.weekday() in workdays and d not in hs:
            total += 1
        d += timedelta(days=1)
    return total

# === T·ªïng ph√©p theo th√¢m ni√™n ===
def _guess_join_year(user, fallback_year: int) -> int:
    """
    Suy ƒëo√°n nƒÉm v√†o l√†m t·ª´ c√°c field th∆∞·ªùng g·∫∑p tr√™n user.
    N·∫øu kh√¥ng c√≥, tr·∫£ v·ªÅ fallback_year ƒë·ªÉ kh√¥ng l√†m h·ªèng ph√©p t√≠nh.
    """
    for attr in ("start_year", "join_year", "year_joined", "start_work_year"):
        y = getattr(user, attr, None)
        if isinstance(y, int) and 1900 <= y <= 2100:
            return y
    for attr in ("start_date", "join_date", "hire_date"):
        d = getattr(user, attr, None)
        if d:
            try:
                return d.year
            except Exception:
                pass
    return fallback_year

def calc_total_leave_days(user: User, year: int, base: int = 12) -> int:
    """
    Quy t·∫Øc: 12 ng√†y c∆° b·∫£n + m·ªói 5 nƒÉm th√¢m ni√™n +1 ng√†y.
    V√≠ d·ª• v√†o l√†m 2018, nƒÉm 2025: th√¢m ni√™n 7 nƒÉm -> 12 + 1 = 13.
    """
    join_year = _guess_join_year(user, year)
    years_worked = max(year - join_year, 0)
    return base + (years_worked // 5)

def leave_balance_by_requests(user_id: int, year: int):
    """
    T√≠nh (total, used, remaining) THEO ƒê∆†N NGH·ªà:
      - total: theo th√¢m ni√™n (calc_total_leave_days)
      - used : c·ªông 'S·ªë ng√†y' (days_off) c·ªßa t·ª´ng ƒë∆°n; n·∫øu thi·∫øu days_off ho·∫∑c ƒë∆°n b·∫Øc qua nƒÉm -> t√≠nh ng√†y l√†m vi·ªác T2‚ÄìT6 trong ph·∫ßn giao v·ªõi nƒÉm.
      - remaining = max(total - used, 0)
    T∆∞∆°ng th√≠ch m·ªçi CSDL (kh√¥ng d√πng strftime/extract trong SQL).
    """
    from models.leave_request import LeaveRequest

    user = User.query.get(user_id)
    if not user:
        return 0, 0, 0

    total = calc_total_leave_days(user, year)
    y_start = date(year, 1, 1)
    y_end = date(year + 1, 1, 1) - timedelta(days=1)  # inclusive

    def _business_days_between(d1: date, d2: date, workdays=(0, 1, 2, 3, 4)) -> int:
        cur, n = d1, 0
        while cur <= d2:
            if cur.weekday() in workdays:
                n += 1
            cur += timedelta(days=1)
        return n

    used = 0
    reqs = (
        LeaveRequest.query
        .filter(
            LeaveRequest.user_id == user_id,
            LeaveRequest.start_date <= y_end,
            LeaveRequest.end_date >= y_start,
        )
        .all()
    )

    for lv in reqs:
        if not lv.start_date or not lv.end_date:
            continue
        s = max(lv.start_date, y_start)
        e = min(lv.end_date, y_end)
        if s > e:
            continue

        # ∆Øu ti√™n d√πng s·ªë ng√†y ƒë√£ nh·∫≠p (n·∫øu ƒë∆°n n·∫±m tr·ªçn trong nƒÉm)
        if getattr(lv, "days_off", None) is not None and (lv.start_date >= y_start and lv.end_date <= y_end):
            try:
                used += int(lv.days_off)
            except Exception:
                used += _business_days_between(s, e)
        else:
            used += _business_days_between(s, e)

    remaining = max(total - used, 0)
    return total, used, remaining

# === Shim gi·ªØ t∆∞∆°ng th√≠ch t√™n c≈© (n·∫øu n∆°i kh√°c c√≤n g·ªçi) ===
def leave_balance_by_schedule(user_id: int, year: int):
    """
    Gi·ªØ t∆∞∆°ng th√≠ch ng∆∞·ª£c: hi·ªán d√πng chung logic theo ƒê∆†N NGH·ªà.
    """
    return leave_balance_by_requests(user_id, year)
# ===========================================================


def leave_balance_by_requests(user_id, year):
    from models.leave_request import LeaveRequest
    user = User.query.get(user_id)
    if not user: return 0,0,0
    total = calc_total_leave_days(user, year)
    y_start, y_end = date(year,1,1), date(year+1,1,1) - timedelta(days=1)

    def business_days_between(d1, d2, workdays=(0,1,2,3,4)):
        cur, n = d1, 0
        while cur <= d2:
            if cur.weekday() in workdays: n += 1
            cur += timedelta(days=1)
        return n

    used = 0
    reqs = (LeaveRequest.query
            .filter(LeaveRequest.user_id==user_id,
                    LeaveRequest.start_date <= y_end,
                    LeaveRequest.end_date >= y_start)
            .all())
    for lv in reqs:
        if not lv.start_date or not lv.end_date: continue
        s, e = max(lv.start_date, y_start), min(lv.end_date, y_end)
        if s > e: continue
        if getattr(lv, "days_off", None) is not None and (lv.start_date >= y_start and lv.end_date <= y_end):
            try: used += int(lv.days_off)
            except: used += business_days_between(s, e)
        else:
            used += business_days_between(s, e)

    return total, used, max(total - used, 0)


# ====== ƒë·∫∑t ·ªü ƒë·∫ßu file app.py (n·∫øu ch∆∞a c√≥) ======
from datetime import date
from flask import render_template, request, session, flash
from sqlalchemy import desc
# leave_balance_by_schedule ph·∫£i ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a s·∫µn (helper ƒë√£ g·ª≠i tr∆∞·ªõc ƒë√≥)
# ==================================================

@app.route('/leaves')
def leaves_list():
    from models.leave_request import LeaveRequest
    from models.user import User
    from datetime import date
    from sqlalchemy import desc

    role    = (session.get('role') or '').strip()
    my_dept = (session.get('department') or '').strip()
    my_id   = session.get('user_id')

    # --- Danh s√°ch khoa cho dropdown ---
    if role in ('admin', 'admin1'):
        dept_rows = (db.session.query(User.department)
                     .filter(User.department.isnot(None))
                     .distinct()
                     .order_by(User.department)
                     .all())
        # Admin c√≥ th√™m "T·∫•t c·∫£"
        departments = ['T·∫•t c·∫£'] + [r[0] for r in dept_rows]
    else:
        departments = [my_dept] if my_dept else []

    # --- Khoa ƒë∆∞·ª£c ch·ªçn ---
    if role in ('admin', 'admin1'):
        selected_department = request.args.get('department')
        if not selected_department:
            selected_department = 'T·∫•t c·∫£'  # m·∫∑c ƒë·ªãnh xem to√†n b·ªánh vi·ªán
    else:
        selected_department = my_dept

    # --- L·∫•y danh s√°ch ƒë∆°n theo quy·ªÅn/khoa ---
    q = LeaveRequest.query.join(User, LeaveRequest.user_id == User.id)

    if role in ('admin', 'admin1'):
        # Ch·ªâ l·ªçc khi ch·ªçn 1 khoa c·ª• th·ªÉ
        if selected_department and selected_department != 'T·∫•t c·∫£':
            q = q.filter(User.department == selected_department)
    else:
        if not my_dept:
            flash("T√†i kho·∫£n ch∆∞a c√≥ th√¥ng tin khoa.", "warning")
            return render_template(
                'leaves.html',
                leaves=[], departments=departments,
                selected_department=None,
                current_department=my_dept,
                current_role=role,
                user=None,
                leave_info=None,
                balances={}
            )
        q = q.filter(User.department == my_dept)

    leaves = q.order_by(desc(LeaveRequest.start_date), desc(LeaveRequest.id)).all()

    # --- T√≠nh c√¢n b·∫±ng ph√©p theo user trong danh s√°ch ---
    year = date.today().year
    balances = {}
    user_ids = {lv.user_id for lv in leaves}
    for uid in user_ids:
        t, u, r = leave_balance_by_requests(uid, year)
        balances[uid] = {"total": t, "used": u, "remaining": r}

    # --- Banner t√≥m t·∫Øt cho ng∆∞·ªùi ƒëang ƒëƒÉng nh·∫≠p ---
    if my_id:
        t0, u0, r0 = leave_balance_by_requests(my_id, year)
        leave_info = {"year": year, "total": t0, "used": u0, "remaining": r0}
        current_user = User.query.get(my_id)
    else:
        leave_info = None
        current_user = None

    return render_template(
        'leaves.html',
        leaves=leaves,
        departments=departments,
        selected_department=selected_department,
        current_department=my_dept,
        current_role=role,
        user=current_user,
        leave_info=leave_info,
        balances=balances
    )

@app.route('/admin/fix-weekend-leaves')
@login_required
def fix_weekend_leaves():
    # ch·ªâ cho admin
    if session.get('role') not in ['admin', 'admin1']:
        flash("B·∫°n kh√¥ng c√≥ quy·ªÅn.", "danger")
        return redirect('/')

    leave_shift = get_or_create_leave_shift()

    # L·∫•y to√†n b·ªô b·∫£n ghi 'Ngh·ªâ ph√©p'
    rows = Schedule.query.filter(Schedule.shift_id == leave_shift.id).all()
    removed = 0
    for r in rows:
        if r.work_date.weekday() >= 5:
            db.session.delete(r)
            removed += 1
    db.session.commit()
    flash(f"‚úÖ ƒê√£ xo√° {removed} b·∫£n ghi 'Ngh·ªâ ph√©p' r∆°i v√†o Th·ª© 7/CN.", "success")
    return redirect('/schedule')


@app.route('/leaves/add', methods=['GET', 'POST'])
@login_required
def add_leave():
    from models.leave_request import LeaveRequest
    from models.user import User
    from models.schedule import Schedule
    from utils.unit_config import get_unit_config

    user_role = session.get('role')
    user_dept = session.get('department')
    current_user_id = session.get('user_id')

    # Danh s√°ch khoa
    if user_role in ['admin', 'admin1']:
        departments = [d[0] for d in db.session.query(User.department)
                       .filter(User.department.isnot(None))
                       .distinct().all()]
    else:
        departments = [user_dept]

    # Khoa ƒë∆∞·ª£c ch·ªçn
    if request.method == 'POST':
        selected_department = request.form.get('department') if user_role in ['admin', 'admin1'] else user_dept
    else:
        selected_department = request.args.get('department') if user_role in ['admin', 'admin1'] else user_dept

    # Danh s√°ch user theo khoa
    if user_role in ['admin', 'admin1']:
        users = (User.query
                 .filter(User.department == selected_department)
                 .order_by(User.name).all() if selected_department else [])
    else:
        # Non-admin ch·ªâ ƒë∆∞·ª£c t·∫°o ƒë∆°n cho ch√≠nh m√¨nh
        users = [db.session.get(User, current_user_id)]

    # X·ª≠ l√Ω t·∫°o ƒë∆°n
    if request.method == 'POST' and 'user_id' in request.form:
        user_id_str = request.form.get('user_id', '').strip()
        if not user_id_str.isdigit():
            flash("‚ùå Vui l√≤ng ch·ªçn nh√¢n vi√™n h·ª£p l·ªá.", "danger")
            return redirect('/leaves/add')

        user_id = int(user_id_str)
        try:
            start_date = datetime.strptime(request.form['start_date'], '%Y-%m-%d').date()
            end_date   = datetime.strptime(request.form['end_date'],   '%Y-%m-%d').date()
        except Exception:
            flash("‚ùå Ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c kh√¥ng h·ª£p l·ªá.", "danger")
            return redirect('/leaves/add')

        if start_date > end_date:
            flash("‚ùå Kho·∫£ng th·ªùi gian ngh·ªâ kh√¥ng h·ª£p l·ªá.", "danger")
            return redirect('/leaves/add')

        reason   = request.form.get('reason')
        location = request.form.get('location')

        # Th√¥ng tin b·ªï sung (n·∫øu c√≥)
        birth_day   = request.form.get('birth_day')
        birth_month = request.form.get('birth_month')
        birth_year  = request.form.get('birth_year')
        birth_date  = None
        if birth_day and birth_month and birth_year:
            birth_date_str = f"{birth_year}-{str(birth_month).zfill(2)}-{str(birth_day).zfill(2)}"
            try:
                birth_date = datetime.strptime(birth_date_str, '%Y-%m-%d').date()
            except Exception:
                birth_date = None

        # C·∫≠p nh·∫≠t nƒÉm b·∫Øt ƒë·∫ßu c√¥ng t√°c (n·∫øu ng∆∞·ªùi d√πng nh·∫≠p)
        if request.form.get('start_work_year'):
            try:
                start_work_year = int(request.form.get('start_work_year'))
                user_obj = db.session.get(User, user_id)
                if user_obj:
                    user_obj.start_year = start_work_year
            except Exception:
                pass

        # üîí R√†ng bu·ªôc quy·ªÅn: Non-admin ch·ªâ cho ch√≠nh m√¨nh & ƒë√∫ng khoa
        target_user = db.session.get(User, user_id)
        if not target_user:
            flash("‚ùå Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i.", "danger")
            return redirect('/leaves/add')
        if user_role not in ['admin', 'admin1']:
            if user_id != current_user_id:
                flash("‚ùå B·∫°n ch·ªâ ƒë∆∞·ª£c t·∫°o ƒë∆°n ngh·ªâ cho ch√≠nh m√¨nh.", "danger")
                return redirect('/leaves/add')
            if target_user.department != user_dept:
                flash("‚ùå B·∫°n kh√¥ng th·ªÉ t·∫°o ƒë∆°n cho nh√¢n vi√™n kh√°c khoa.", "danger")
                return redirect('/leaves/add')

        # ====== GI·ªöI H·∫†N THEO S·ªê NG√ÄY PH√âP C√íN L·∫†I ======
        req_days = count_workdays(start_date, end_date, HOLIDAYS)  # s·ªë ng√†y xin (T2‚ÄìT6, tr·ª´ l·ªÖ)
        year     = start_date.year
        total, used, remaining = leave_balance_by_schedule(user_id, year)

        # ==== CH√àN ƒêO·∫†N N√ÄY V√ÄO ƒê√ÇY ====
        year = start_date.year
        total, used, remaining = leave_balance_by_schedule(user_id, year)

        if remaining <= 0:
            flash(f"‚ùå B·∫°n ƒë√£ d√πng h·∫øt ng√†y ph√©p nƒÉm {year} (ƒë√£ d√πng {used}/{total}).", "danger")
            return redirect(request.referrer or url_for('add_leave'))

        if req_days > remaining:
            flash(
                f"‚ùå S·ªë ng√†y ngh·ªâ ph√©p c√≤n l·∫°i c·ªßa b·∫°n l√† {remaining} ng√†y. "
                f"B·∫°n kh√¥ng th·ªÉ th√™m ƒë∆°n ngh·ªâ ph√©p {req_days} ng√†y ƒë∆∞·ª£c "
                f"(ƒë√£ d√πng {used}/{total} ng√†y nƒÉm {year}).",
                "warning"
            )
            return redirect(request.referrer or url_for('add_leave'))

        # 1) L∆∞u ƒë∆°n ngh·ªâ
        leave = LeaveRequest(
            user_id=user_id,
            start_date=start_date,
            end_date=end_date,
            reason=reason,
            location=location,
            birth_date=birth_date
        )
        # (N·∫øu LeaveRequest c√≥ c·ªôt days_off, c√≥ th·ªÉ set: leave.days_off = req_days)
        db.session.add(leave)

        # 2) T·ª± ƒë·ªông ch·∫•m ngh·ªâ -> g√°n ca "Ngh·ªâ ph√©p" (B·ªé Th·ª© 7 & Ch·ªß nh·∫≠t)
        leave_shift = get_or_create_leave_shift()
        cur = start_date
        overwritten = 0
        created = 0
        while cur <= end_date:
            # 0..4 = Th·ª© 2..Th·ª© 6 ; 5 = Th·ª© 7 ; 6 = Ch·ªß nh·∫≠t
            if cur.weekday() >= 5:
                cur += timedelta(days=1)
                continue

            sched = Schedule.query.filter_by(user_id=user_id, work_date=cur).first()
            if sched:
                sched.shift_id = leave_shift.id
                overwritten += 1
            else:
                db.session.add(Schedule(user_id=user_id, shift_id=leave_shift.id, work_date=cur))
                created += 1
            cur += timedelta(days=1)

        # 2b) D·ªåN m·ªçi l·ªãch (b·∫•t k·ªÉ ca n√†o) r∆°i v√†o T7/CN trong kho·∫£ng ƒë∆°n -> ƒë·ªÉ tr·ªëng cu·ªëi tu·∫ßn
        weekend_records = (Schedule.query
            .filter(
                Schedule.user_id == user_id,
                Schedule.work_date >= start_date,
                Schedule.work_date <= end_date
            ).all())
        removed_weekend = 0
        for s in weekend_records:
            if s.work_date.weekday() >= 5:  # 5=Th·ª© 7, 6=CN
                db.session.delete(s)
                removed_weekend += 1

        # 3) Commit
        try:
            db.session.commit()
            left_after = remaining - req_days
            msg = (f"‚úÖ ƒê√£ t·∫°o ƒë∆°n ngh·ªâ ph√©p {req_days} ng√†y (T2‚ÄìT6). "
                   f"C√≤n l·∫°i {left_after} ng√†y ph√©p nƒÉm {year}. "
                   f"C·∫≠p nh·∫≠t {overwritten} ng√†y, th√™m m·ªõi {created} ng√†y."
                   )
            if removed_weekend:
                msg += f" ƒê√£ xo√° {removed_weekend} l·ªãch r∆°i v√†o T7/CN."
            flash(msg, "success")
        except Exception as e:
            db.session.rollback()
            app.logger.error(f"[LEAVE_ADD_ERROR] {e}", exc_info=True)
            flash(f"‚ùå L·ªói khi l∆∞u: {e}", "danger")

        return redirect('/leaves')

    # D·ªØ li·ªáu hi·ªÉn th·ªã form
    unit = get_unit_config()
    return render_template(
        'add_leave.html',
        departments=departments,
        selected_department=selected_department,
        users=users,
        current_user_role=user_role,
        now=datetime.now()
    )

from models.leave_request import LeaveRequest

from datetime import datetime


@property
def full_name(self):
    return self.user.name

@property
def position(self):
    return self.user.position

@property
def birth_year(self):
    return self.birth_date.year if self.birth_date else ""

@property
def start_work_year(self):
    return self.user.start_year if hasattr(self.user, 'start_year') else ""

@property
def leave_days(self):
    return (self.end_date - self.start_date).days + 1

@app.route('/leaves/delete/<int:leave_id>', methods=['POST'])
def leaves_delete(leave_id):
    from models.leave_request import LeaveRequest

    role = session.get('role')
    my_id = session.get('user_id')

    leave = LeaveRequest.query.get_or_404(leave_id)

    # Quy·ªÅn: admin/admin1 ho·∫∑c ch√≠nh ch·ªß ƒë∆°n
    if role not in ('admin', 'admin1') and leave.user_id != my_id:
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn xo√° ƒë∆°n n√†y.", 403

    db.session.delete(leave)
    db.session.commit()
    flash("üóë ƒê√£ xo√° ƒë∆°n ngh·ªâ.", "success")
    return redirect(request.referrer or url_for('leaves_list'))

from flask import request, render_template, redirect, session
from collections import defaultdict
import csv
import os
from models import User  # ‚úÖ ƒë√∫ng

from models.work_request import WorkRequest

@app.route("/yeu-cau-xu-ly-cong-viec", methods=["GET", "POST"])
def yeu_cau_xu_ly_cong_viec():
    from collections import defaultdict
    from datetime import datetime

    if request.method == "POST":
        ngay_thang = request.form.get("ngay_thang")
        khoa = request.form.get("khoa")
        nguoi_yeu_cau = request.form.get("nguoi_yeu_cau")
        chu_ky = request.form.get("chu_ky")
        loi = request.form.get("loi")
        so_ho_so = request.form.get("so_ho_so", "")
        so_phieu = request.form.get("so_phieu", "")
        noi_dung = request.form.get("noi_dung", "")
        xac_nhan = request.form.get("xac_nhan")

        # L·∫•y s·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi y√™u c·∫ßu (n·∫øu c√≥)
        user_obj = User.query.filter_by(name=nguoi_yeu_cau).first()
        so_dien_thoai = user_obj.phone if user_obj and hasattr(user_obj, 'phone') else ""

        # ƒê√°nh d·∫•u ch·ªØ k√Ω
        def mark(name):
            return "‚úì" if xac_nhan == name else "‚úó"

        mark_hoa = mark("H√≤a")
        mark_hiep = mark("Hi·ªáp")
        mark_anh = mark("√Ånh")
        mark_nam = mark("Nam")

        # L∆∞u v√†o b·∫£ng WorkRequest
        new_request = WorkRequest(
            ngay_thang=ngay_thang,
            khoa=khoa,
            loi=loi,
            so_ho_so=so_ho_so,
            so_phieu=so_phieu,
            noi_dung=noi_dung,
            nguoi_yeu_cau=nguoi_yeu_cau,
            so_dien_thoai=so_dien_thoai,
            chu_ky=chu_ky,
            hoa=mark_hoa,
            hiep=mark_hiep,
            anh=mark_anh,
            nam=mark_nam
        )
        db.session.add(new_request)
        db.session.commit()

        # Chuy·ªÉn h∆∞·ªõng sang danh s√°ch ƒë·ªÉ in
        return redirect("/")

    # --- GET: Load form ---
    staff_by_unit = defaultdict(list)
    users = User.query.filter(User.department != None).all()
    for user in users:
        if user.name and user.department:
            staff_by_unit[user.department].append(user.name)
    for dept in staff_by_unit:
        staff_by_unit[dept].sort()

    user_role = session.get('role')
    user_dept = session.get('department')

    if user_role in ['user', 'manager']:
        staff_by_unit_filtered = {user_dept: staff_by_unit.get(user_dept, [])}
        current_department = user_dept
    else:
        staff_by_unit_filtered = dict(staff_by_unit)
        current_department = ""

    # L·∫•y s·ªë ƒëi·ªán tho·∫°i Nam (CNTT)
    nam_user = User.query.filter_by(name="Nam").first()
    nam_phone = nam_user.phone if nam_user and hasattr(nam_user, 'phone') else ""

    return render_template(
        "form.html",
        staff_by_unit=staff_by_unit_filtered,
        current_department=current_department,
        nam_phone=nam_phone
    )

@app.route('/api/user-phones')
def api_user_phones():
    users = User.query.filter(User.department == 'Ph√≤ng K·∫ø ho·∫°ch TH - CNTT').all()
    result = {user.name: user.phone for user in users if user.phone}
    return result

@app.route("/danh-sach-yeu-cau")
def danh_sach_yeu_cau():
    # L·∫•y t·∫•t c·∫£ y√™u c·∫ßu t·ª´ DB
    requests = WorkRequest.query.order_by(WorkRequest.id.desc()).all()

    # Ti√™u ƒë·ªÅ b·∫£ng
    headers = [
        "Ng√†y th√°ng", "Khoa", "Ng∆∞·ªùi y√™u c·∫ßu", "L·ªói",
        "S·ªë h·ªì s∆°", "S·ªë phi·∫øu", "N·ªôi dung",
        "H√≤a", "Hi·ªáp", "√Ånh", "Nam",
        "Ch·ªØ k√Ω"
    ]

    # D·ªØ li·ªáu k√®m ID ƒë·ªÉ x√≥a
    data = []
    for req in requests:
        data.append([
            req.id,                # ID d√πng cho n√∫t X√ìA
            req.ngay_thang,
            req.khoa,
            req.nguoi_yeu_cau,
            req.loi,
            req.so_ho_so,
            req.so_phieu,
            req.noi_dung,
            req.hoa,
            req.hiep,
            req.anh,
            req.nam,
            req.chu_ky
        ])

    # Ng√†y hi·ªán t·∫°i ƒë·ªÉ hi·ªÉn th·ªã
    now = datetime.today()
    current_date = f"Gia Lai, ng√†y {now.day:02d} th√°ng {now.month:02d} nƒÉm {now.year}"

    return render_template(
        "danh_sach_yeu_cau.html",
        headers=headers,
        data=data,
        month=now.month,
        current_date=current_date
    )

@app.route("/xoa-yeu-cau/<int:req_id>", methods=["POST"])
def xoa_yeu_cau(req_id):
    from models.work_request import WorkRequest
    req = WorkRequest.query.get(req_id)
    if req:
        db.session.delete(req)
        db.session.commit()
    return redirect("/danh-sach-yeu-cau")


from flask import send_file
import pandas as pd

@app.route("/xuat-excel")
def xuat_excel():
    from models.work_request import WorkRequest
    import openpyxl
    from io import BytesIO
    from flask import send_file

    # T·∫°o file Excel m·ªõi
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "YeuCauCongViec"

    # Ti√™u ƒë·ªÅ gi·ªëng b·∫£ng hi·ªÉn th·ªã
    headers = [
        "Ng√†y th√°ng", "Khoa", "Ng∆∞·ªùi y√™u c·∫ßu", "L·ªói",
        "S·ªë h·ªì s∆°", "S·ªë phi·∫øu", "N·ªôi dung",
        "H√≤a", "Hi·ªáp", "√Ånh", "Nam", "Ch·ªØ k√Ω"
    ]
    ws.append(headers)

    # L·∫•y d·ªØ li·ªáu t·ª´ DB
    requests = WorkRequest.query.order_by(WorkRequest.id).all()
    for r in requests:
        ws.append([
            r.ngay_thang,
            r.khoa,
            r.nguoi_yeu_cau,
            r.loi,
            r.so_ho_so,
            r.so_phieu,
            r.noi_dung,
            r.hoa,
            r.hiep,
            r.anh,
            r.nam,
            r.chu_ky
        ])

    # Xu·∫•t file Excel
    stream = BytesIO()
    wb.save(stream)
    stream.seek(0)

    return send_file(
        stream,
        as_attachment=True,
        download_name="yeu_cau_cong_viec.xlsx",
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

from flask import render_template
from datetime import datetime
from models.leave_request import LeaveRequest
import os

from datetime import timedelta
from datetime import datetime, timedelta

def working_days_inclusive(start_date, end_date):
    """ƒê·∫øm s·ªë ng√†y l√†m vi·ªác (Th·ª© 2‚ÄìTh·ª© 6), t√≠nh c·∫£ ƒë·∫ßu & cu·ªëi."""
    d = start_date
    count = 0
    while d <= end_date:
        if d.weekday() < 5:  # 0..4 = Mon..Fri
            count += 1
        d += timedelta(days=1)
    return count

def end_date_from_workdays(start_date, days):
    """L·∫•y ng√†y k·∫øt th√∫c sau N ng√†y l√†m vi·ªác (T2‚ÄìT6), coi start l√† ng√†y 1)."""
    d = start_date
    done = 0
    while True:
        if d.weekday() < 5:
            done += 1
            if done == days:
                return d
        d += timedelta(days=1)

def annual_leave_quota(user, as_of_date):
    """
    Ch·ªâ ti√™u ph√©p nƒÉm = 12 + floor(th√¢m ni√™n/5).
    Th√¢m ni√™n = nƒÉm ƒëang ngh·ªâ - start_year (n·∫øu c√≥).
    """
    base = 12
    if not getattr(user, "start_year", None):
        return base
    years = as_of_date.year - int(user.start_year)
    extra = max(0, years // 5)
    return base + extra

# Map ch·ª©c v·ª• vi·∫øt t·∫Øt -> ƒë·∫ßy ƒë·ªß
POSITION_MAP = {
    "NV": "Nh√¢n vi√™n",
    "Gƒê": "Gi√°m ƒë·ªëc",
    "PGƒê": "Ph√≥ Gi√°m ƒë·ªëc",
    "TP": "Tr∆∞·ªüng ph√≤ng",
    "TK": "Tr∆∞·ªüng Khoa",
    "PTK": "Ph√≥ Tr∆∞·ªüng khoa",
    "PTP": "Ph√≥ Tr∆∞·ªüng ph√≤ng",
    "ƒêD": "ƒêi·ªÅu d∆∞·ª°ng",
    "ƒêDT": "ƒêi·ªÅu d∆∞·ª°ng tr∆∞·ªüng",
    "BS": "B√°c sƒ©",
    "KTV": "K·ªπ thu·∫≠t vi√™n",
    "KTVT": "K·ªπ thu·∫≠t vi√™n tr∆∞·ªüng",
    "BV": "B·∫£o v·ªá",
    "HL": "H·ªô l√Ω",
    "LX": "L√°i xe",
    "CV": "Chuy√™n vi√™n",
    "CVC": "Chuy√™n vi√™n ch√≠nh"
}

@app.route('/leaves/print/<int:id>')
@login_required
def print_leave(id):
    from models.leave_request import LeaveRequest
    from utils.unit_config import get_unit_config

    leave = LeaveRequest.query.get_or_404(id)
    user = leave.user
    unit = get_unit_config()

    # S·ªë ng√†y NGH·ªà TH·ª∞C T·∫æ c·ªßa ƒë∆°n (b·ªè T7 & CN)
    total_days = working_days_inclusive(leave.start_date, leave.end_date)

    # Ch·ªâ ti√™u ph√©p nƒÉm theo th√¢m ni√™n (12 + 1 ng√†y m·ªói ƒë·ªß 5 nƒÉm)
    quota_days = annual_leave_quota(user, leave.start_date)

    # N·∫øu ngh·ªâ tr·ªçn quota b·∫Øt ƒë·∫ßu t·ª´ ng√†y start, k·∫øt th√∫c l√† ng√†y:
    quota_end = end_date_from_workdays(leave.start_date, quota_days)

    # Chu·∫©n ho√° ch·ª©c v·ª•
    full_position = POSITION_MAP.get((user.position or '').strip(), user.position)

    return render_template(
        'leave_print.html',
        leave=leave,
        user=user,
        unit=unit,
        total_days=total_days,   # S·ªë ng√†y c√¥ng c·ªßa ƒë∆°n
        quota_days=quota_days,   # Ch·ªâ ti√™u nƒÉm theo th√¢m ni√™n
        quota_end=quota_end,     # V√≠ d·ª•: n·∫øu ngh·ªâ ƒë·ªß quota
        full_position=full_position,
        now=datetime.now()
    )

from flask import send_file
from io import BytesIO
from docx import Document
from docx.shared import Pt
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from docx.enum.text import WD_ALIGN_PARAGRAPH

@app.route('/leaves/word/<int:leave_id>')
def export_leave_word(leave_id):
    from models.leave_request import LeaveRequest
    from models.user import User

    leave = LeaveRequest.query.get_or_404(leave_id)
    user = User.query.get(leave.user_id)

    document = Document()

    # ƒê·∫∑t font ch·ªØ m·∫∑c ƒë·ªãnh cho to√†n b·ªô vƒÉn b·∫£n
    style = document.styles['Normal']
    font = style.font
    font.name = 'Times New Roman'
    font.size = Pt(14)
    font.element.rPr.rFonts.set(qn('w:eastAsia'), 'Times New Roman')

    # Header: b·∫£ng 2 c·ªôt
    table = document.add_table(rows=1, cols=2)
    table.autofit = False
    table.columns[0].width = Pt(260)
    table.columns[1].width = Pt(260)
    cells = table.rows[0].cells

    # B√äNH VI·ªÜN NHI T·ªàNH GIA LAI + Ph√≤ng ban (in hoa, in ƒë·∫≠m, border bottom)
    p_left = cells[0].paragraphs[0]
    p_left.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = p_left.add_run("B·ªÜNH VI·ªÜN NHI T·ªàNH GIA LAI\n")
    run.bold = True
    run.font.size = Pt(13)
    run = p_left.add_run(user.department.upper())
    run.bold = True
    run.font.size = Pt(14)

    # Border bottom cho ƒëo·∫°n b√™n tr√°i
    p = p_left._p
    pPr = p.get_or_add_pPr()
    pBdr = OxmlElement('w:pBdr')
    bottom = OxmlElement('w:bottom')
    bottom.set(qn('w:val'), 'single')
    bottom.set(qn('w:sz'), '4')
    bottom.set(qn('w:space'), '1')
    bottom.set(qn('w:color'), '000000')
    pBdr.append(bottom)
    pPr.append(pBdr)

    # C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM + ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c
    p_right = cells[1].paragraphs[0]
    p_right.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run = p_right.add_run("C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM\n")
    run.bold = True
    run.font.size = Pt(14)
    run = p_right.add_run("ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c")
    run.bold = True
    run.italic = True
    run.font.size = Pt(14)
    run.font.underline = True

    document.add_paragraph()  # D√≤ng tr·ªëng

    # Ti√™u ƒë·ªÅ ch√≠nh gi·ªØa
    title = document.add_paragraph("ƒê∆†N XIN NGH·ªà PH√âP")
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    run_title = title.runs[0]
    run_title.bold = True
    run_title.font.size = Pt(14)
    run_title.text = run_title.text.upper()

    # K√≠nh g·ª≠i (in nghi√™ng, ƒë·∫≠m, th·ª•t l·ªÅ 1cm)
    p_kg = document.add_paragraph()
    p_kg.paragraph_format.left_indent = Pt(28)
    run_kg = p_kg.add_run("K√≠nh g·ª≠i:")
    run_kg.bold = True
    run_kg.italic = True
    run_kg.font.size = Pt(14)

    # Danh s√°ch k√≠nh g·ª≠i, th·ª•t l·ªÅ 3cm
    p_list = document.add_paragraph()
    p_list.paragraph_format.left_indent = Pt(85)
    p_list.paragraph_format.line_spacing = 1.4
    p_list.add_run("- Gi√°m ƒë·ªëc B·ªánh vi·ªán Nhi t·ªânh Gia Lai\n")
    p_list.add_run("- Ph√≤ng T·ªï ch·ª©c - H√†nh ch√≠nh qu·∫£n tr·ªã\n")
    p_list.add_run(f"- {user.department}")

    # Th√¥ng tin ng∆∞·ªùi l√†m ƒë∆°n
    p_name = document.add_paragraph()
    p_name.add_run("T√™n t√¥i l√†: ").font.size = Pt(14)
    run_name = p_name.add_run(user.name.upper())
    run_name.bold = True
    run_name.font.size = Pt(14)
    p_name.add_run("    Sinh ng√†y: ").font.size = Pt(14)
    run_birth = p_name.add_run(leave.birth_date.strftime('%d/%m/%Y') if leave.birth_date else '')
    run_birth.bold = True
    run_birth.font.size = Pt(14)

    p_pos = document.add_paragraph()
    p_pos.add_run(f"Ch·ª©c v·ª•: {user.position}    ").font.size = Pt(14)
    p_pos.add_run("NƒÉm v√†o c√¥ng t√°c: ......................").font.size = Pt(14)

    p_dep = document.add_paragraph(f"ƒê∆°n v·ªã c√¥ng t√°c: {user.department} - B·ªánh vi·ªán Nhi t·ªânh Gia Lai")
    p_dep.style.font.size = Pt(14)

    # N·ªôi dung ƒë∆°n
    document.add_paragraph(
        "Nay t√¥i l√†m ƒë∆°n n√†y tr√¨nh Ban Gi√°m ƒë·ªëc, Ph√≤ng T·ªï ch·ª©c - H√†nh ch√≠nh qu·∫£n tr·ªã xem x√©t v√† s·∫Øp x·∫øp cho t√¥i ƒë∆∞·ª£c ngh·ªâ ph√©p.")
    document.add_paragraph(
        f"Th·ªùi gian ngh·ªâ: t·ª´ ng√†y {leave.start_date.strftime('%d/%m/%Y')} ƒë·∫øn ng√†y {leave.end_date.strftime('%d/%m/%Y')}.")
    document.add_paragraph(f"L√Ω do: {leave.reason}")
    document.add_paragraph(f"N∆°i ngh·ªâ ph√©p: {leave.location}")
    document.add_paragraph("T√¥i xin cam ƒëoan s·∫Ω b√†n giao c√¥ng vi·ªác ƒë·∫ßy ƒë·ªß v√† tr·ªü l·∫°i l√†m vi·ªác ƒë√∫ng th·ªùi gian quy ƒë·ªãnh.")
    document.add_paragraph("V·∫≠y k√≠nh mong c√°c c·∫•p gi·∫£i quy·∫øt, t√¥i xin ch√¢n th√†nh c·∫£m ∆°n./.")

    # Footer ng√†y th√°ng cƒÉn ph·∫£i, in nghi√™ng
    date_str = leave.start_date.strftime("Gia Lai, ng√†y %d th√°ng %m nƒÉm %Y") if leave.start_date else ""
    p_footer = document.add_paragraph(date_str)
    p_footer.alignment = WD_ALIGN_PARAGRAPH.RIGHT
    p_footer.runs[0].italic = True
    p_footer.runs[0].font.size = Pt(14)

    # B·∫£ng k√Ω t√™n 3 c·ªôt cƒÉn gi·ªØa
    sign_table = document.add_table(rows=2, cols=3)
    sign_table.autofit = False
    widths = [Pt(180), Pt(180), Pt(180)]
    for idx, width in enumerate(widths):
        sign_table.columns[idx].width = width

    # D√≤ng 1
    cells = sign_table.rows[0].cells
    cells[0].text = user.department.upper()
    cells[1].text = "Ng∆∞·ªùi l√†m ƒë∆°n"
    cells[2].text = "Gi√°m ƒë·ªëc\nPh√≤ng T·ªï ch·ª©c ‚Äì HC QT"
    for cell in cells:
        for p in cell.paragraphs:
            p.alignment = WD_ALIGN_PARAGRAPH.CENTER
            for run in p.runs:
                run.font.size = Pt(14)
                run.bold = True

    # D√≤ng 2
    cells = sign_table.rows[1].cells
    cells[0].text = ""
    cells[1].text = "(K√Ω v√† ghi r√µ h·ªç t√™n)"
    cells[2].text = ""
    for cell in cells:
        for p in cell.paragraphs:
            p.alignment = WD_ALIGN_PARAGRAPH.CENTER
            for run in p.runs:
                run.font.size = Pt(14)
                run.italic = True

    # T√™n ng∆∞·ªùi l√†m ƒë∆°n cƒÉn gi·ªØa ph√≠a d∆∞·ªõi b·∫£ng k√Ω
    p_name_sign = document.add_paragraph(user.name.upper())
    p_name_sign.alignment = WD_ALIGN_PARAGRAPH.CENTER
    p_name_sign.runs[0].font.size = Pt(14)

    # Xu·∫•t file Word
    stream = BytesIO()
    document.save(stream)
    stream.seek(0)

    return send_file(
        stream,
        as_attachment=True,
        download_name=f"don_nghi_phep_{leave.id}.docx",
        mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    )

@app.route('/test-export')
def test_export():
    return "Route ho·∫°t ƒë·ªông"

@app.route('/assign', methods=['GET', 'POST']) 
def assign_schedule():
    user_role = session.get('role')
    user_dept = session.get('department')

    # L·∫•y danh s√°ch khoa theo role
    if user_role != 'admin':
        departments = [user_dept]
    else:
        departments = [d[0] for d in db.session.query(User.department)
                       .filter(User.department != None).distinct().all()]

    # L·∫•y khoa ƒë∆∞·ª£c ch·ªçn
    selected_department = (
        request.args.get('department') if request.method == 'GET'
        else request.form.get('department')
    )

    # L·∫•y danh s√°ch nh√¢n s·ª± theo khoa
    users = User.query.filter_by(department=selected_department).all() if selected_department else []

    # --- S·∫Øp x·∫øp theo th·ª© t·ª± ch·ª©c danh ---
    priority_order = ['Gƒê', 'PGƒê', 'TK', 'TP', 'PTK', 'PP', 'PK', 'BS', 'ƒêDT', 'ƒêD', 'KTV', 'NV', 'HL', 'BV', 'LX']

    def get_priority(pos):
        pos = pos.upper() if pos else ''
        for i, p in enumerate(priority_order):
            if p in pos:
                return i
        return len(priority_order)  # N·∫øu kh√¥ng kh·ªõp, cho xu·ªëng cu·ªëi

    users.sort(key=lambda x: get_priority(x.position))

    # **S·ª≠a ch·ªó n√†y: L·∫•y shifts theo th·ª© t·ª± `order`**
    shifts = Shift.query.order_by(Shift.order).all()

    leaves = []

    # X·ª≠ l√Ω POST (l∆∞u l·ªãch)
    if request.method == 'POST':
        start_date = datetime.strptime(request.form['start_date'], '%Y-%m-%d').date()
        end_date = datetime.strptime(request.form['end_date'], '%Y-%m-%d').date()
        duplicated_entries = []

        user_name = session.get('name')
        app.logger.info(f"[ASSIGN] User '{user_name}' ph√¢n l·ªãch '{selected_department}' t·ª´ {start_date} ƒë·∫øn {end_date}")

        # L·∫•y ƒë∆°n ngh·ªâ trong kho·∫£ng th·ªùi gian
        leaves = LeaveRequest.query.filter(
            LeaveRequest.start_date <= end_date,
            LeaveRequest.end_date >= start_date
        ).all()

        # L∆∞u t·ª´ng checkbox l·ªãch tr·ª±c
        for checkbox in request.form.getlist('schedule'):
            user_id, shift_id = checkbox.split('-')
            user_id = int(user_id)
            shift_id = int(shift_id)

            current = start_date
            while current <= end_date:
                existing = Schedule.query.filter_by(
                    user_id=user_id,
                    shift_id=shift_id,
                    work_date=current
                ).first()

                if existing:
                    duplicated_entries.append(
                        f"{existing.user.name} ƒë√£ c√≥ l·ªãch ca {existing.shift.name} ng√†y {current.strftime('%d/%m/%Y')}"
                    )
                else:
                    new_schedule = Schedule(
                        user_id=user_id,
                        shift_id=shift_id,
                        work_date=current
                    )
                    db.session.add(new_schedule)

                current += timedelta(days=1)

        try:
            db.session.commit()
            if duplicated_entries:
                for message in duplicated_entries:
                    flash(f"‚ö†Ô∏è {message}", "danger")
            else:
                flash("‚úÖ ƒê√£ l∆∞u l·ªãch th√†nh c√¥ng.", "success")
        except Exception as e:
            db.session.rollback()
            app.logger.error(f"‚ùå L·ªói khi l∆∞u l·ªãch tr·ª±c: {e}", exc_info=True)
            flash("‚ùå L·ªói m√°y ch·ªß: kh√¥ng th·ªÉ l∆∞u l·ªãch tr·ª±c.", "danger")
            return redirect('/assign?department=' + selected_department)

        return redirect('/assign?department=' + selected_department)

    return render_template(
        'assign.html',
        departments=departments,
        selected_department=selected_department,
        users=users,
        shifts=shifts,
        leaves=leaves
    )


@app.route('/auto-assign')
def auto_assign_page():
    from models.user import User
    from models.shift import Shift
    from flask import request, session, render_template

    user_name = session.get('name')
    user_role = session.get('role')
    user_department = session.get('department')

    # N·∫øu l√† admin th√¨ th·∫•y t·∫•t c·∫£ khoa
    if user_role == 'admin':
        departments = db.session.query(User.department).distinct().all()
        departments = [d[0] for d in departments if d[0]]
    else:
        departments = [user_department] if user_department else []

    selected_department = request.args.get('department') or (departments[0] if departments else None)
    users = User.query.filter_by(department=selected_department).all() if selected_department else []
    shifts = Shift.query.all()

    app.logger.info(f"[AUTO_ASSIGN_VIEW] User '{user_name}' m·ªü trang ph√¢n l·ªãch nhanh cho khoa '{selected_department}'")

    return render_template('auto_assign.html',
                           departments=departments,
                           selected_department=selected_department,
                           users=users,
                           shifts=shifts)

def get_departments():
    return [d[0] for d in db.session.query(User.department).distinct().all() if d[0]]

@app.route('/auto-assign-submit', methods=['POST'])
def auto_assign_submit():
    from models.schedule import Schedule
    from models.shift import Shift
    from models.user import User

    # L·∫•y danh s√°ch user theo th·ª© t·ª± click
    ordered_user_ids = request.form.getlist('ordered_user_ids')

    # L·∫•y ng√†y b·∫Øt ƒë·∫ßu, k·∫øt th√∫c, ca tr·ª±c t·ª´ form
    start_date = request.form.get('start_date')  # dd/mm/yyyy
    end_date = request.form.get('end_date')      # dd/mm/yyyy
    selected_shifts = request.form.getlist('shift_ids')

    # TODO: Parse ng√†y & logic t·∫°o l·ªãch tr·ª±c
    # V√≠ d·ª•: v√≤ng qua c√°c ng√†y trong kho·∫£ng start->end, g√°n l·∫ßn l∆∞·ª£t user theo ordered_user_ids

    # Sau khi t·∫°o l·ªãch, redirect l·∫°i trang l·ªãch tr·ª±c
    flash("ƒê√£ t·∫°o l·ªãch tr·ª±c t·ª± ƒë·ªông theo th·ª© t·ª± ch·ªçn.", "success")
    return redirect(url_for('view_schedule'))

@app.route('/auto-attendance', methods=['GET', 'POST'])
def auto_attendance_page():
    from models.user import User
    from models.shift import Shift
    from models.schedule import Schedule  # model l·ªãch tr·ª±c
    from models.attendance import Attendance
    from datetime import datetime, timedelta
    from flask import request, redirect, url_for, flash, render_template, session

    # Gi·ªõi h·∫°n danh s√°ch khoa theo vai tr√≤
    if session.get('role') == 'admin':
        departments = get_departments()
    else:
        user_department = session.get('department')
        departments = [user_department] if user_department else []

    if request.method == 'POST':
        selected_department = request.form.get('department')
    else:
        selected_department = request.args.get('department') or (departments[0] if departments else None)

    day_shifts = Shift.query.filter(Shift.name.ilike('%l√†m ng√†y%')).all()

    if selected_department:
        users = User.query.filter_by(department=selected_department).order_by(User.name).all()
    else:
        users = []

    if request.method == 'POST':
        selected_department = request.form.get('department')
        user_name = session.get('name')
        start_date_str = request.form.get('start_date')
        end_date_str = request.form.get('end_date')
        shift_code = request.form.get('shift_code')
        staff_ids = request.form.getlist('staff_ids')

        app.logger.info(f"[AUTO_ATTEND_START] User '{user_name}' b·∫Øt ƒë·∫ßu t·∫°o l·ªãch tr·ª±c {shift_code} cho khoa '{selected_department}' t·ª´ {start_date_str} ƒë·∫øn {end_date_str} cho {len(staff_ids)} nh√¢n vi√™n.")

        if not (selected_department and start_date_str and end_date_str and shift_code and staff_ids):
            flash('Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß th√¥ng tin.', 'danger')
            return redirect(url_for('auto_attendance_page'))

        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()

        shift = Shift.query.filter_by(code=shift_code).first()
        if not shift:
            flash('Ca l√†m kh√¥ng h·ª£p l·ªá.', 'danger')
            return redirect(url_for('auto_attendance_page'))

        staff_members = User.query.filter(User.id.in_(staff_ids)).all()

        current_date = start_date
        try:
            created_count = 0
            while current_date <= end_date:
                if current_date.weekday() in [5, 6] or current_date.strftime('%m-%d') in {'01-01', '04-30', '05-01', '09-02'}:
                    current_date += timedelta(days=1)
                    continue

                for staff in staff_members:
                    if not Schedule.query.filter_by(user_id=staff.id, work_date=current_date).first():
                        db.session.add(Schedule(user_id=staff.id, work_date=current_date, shift_id=shift.id))
                        created_count += 1
                current_date += timedelta(days=1)

            db.session.commit()
            app.logger.info(f"[AUTO_ATTEND_DONE] ƒê√£ t·∫°o {created_count} d√≤ng ch·∫•m c√¥ng t·ª± ƒë·ªông th√†nh c√¥ng.")
        except Exception as e:
            db.session.rollback()
            app.logger.error(f"[AUTO_ATTEND_ERROR] L·ªói khi t·∫°o l·ªãch tr·ª±c: {e}")
            flash(f'L·ªói khi l∆∞u l·ªãch tr·ª±c: {e}', 'danger')
            return redirect(url_for('auto_attendance_page', department=selected_department))

        flash(f'ƒê√£ t·∫°o l·ªãch tr·ª±c cho {len(staff_members)} nh√¢n vi√™n t·ª´ {start_date} ƒë·∫øn {end_date}.', 'success')
        return redirect(url_for('auto_attendance_page', department=selected_department))

    return render_template('auto_attendance.html',
                           departments=departments,
                           selected_department=selected_department,
                           users=users,
                           day_shifts=day_shifts)

@app.route('/sync-attendance', methods=['POST'])
def sync_attendance():
    from models.schedule import Schedule
    from models.attendance import Attendance
    from models.user import User
    from datetime import datetime
    from flask import request, flash, redirect, url_for
    from extensions import db

    start_date_str = request.form.get('start_date')
    end_date_str = request.form.get('end_date')
    department = request.form.get('department')

    if not (start_date_str and end_date_str and department):
        flash('Vui l√≤ng cung c·∫•p ƒë·ªß th√¥ng tin: khoa, t·ª´ ng√†y, ƒë·∫øn ng√†y.', 'danger')
        return redirect(url_for('auto_attendance_page'))

    start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
    end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()

    # L·∫•y t·∫•t c·∫£ l·ªãch tr·ª±c trong kho·∫£ng ng√†y v√† khoa ƒë∆∞·ª£c ch·ªçn
    schedules = Schedule.query.join(Schedule.user).filter(
        User.department == department,
        Schedule.work_date >= start_date,
        Schedule.work_date <= end_date
    ).all()

    # X√≥a d·ªØ li·ªáu Attendance c≈© trong kho·∫£ng th·ªùi gian v√† khoa ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    Attendance.query.filter(
        Attendance.department == department,
        Attendance.date >= start_date,
        Attendance.date <= end_date
    ).delete()

    # Th√™m d·ªØ li·ªáu Attendance m·ªõi d·ª±a tr√™n Schedule
    for schedule in schedules:
        attendance = Attendance(
            user_id=schedule.user_id,
            date=schedule.work_date,
            shift_id=schedule.shift_id,
            department=department,
            status='C√¥ng'
        )
        db.session.add(attendance)

    db.session.commit()
    flash(f'ƒê√£ ƒë·ªìng b·ªô {len(schedules)} b·∫£n ghi l·ªãch tr·ª±c sang b·∫£ng ch·∫•m c√¥ng.', 'success')
    return redirect(url_for('auto_attendance_page', department=department))

from flask import Flask, request, render_template, redirect, url_for, flash, session
from datetime import datetime, timedelta
from extensions import db
from models.user import User
from models.shift import Shift
from models.schedule import Schedule

from utils.unit_config import get_unit_config

@app.route('/schedule', methods=['GET'])  # GET l√† ƒë·ªß v√¨ kh√¥ng x·ª≠ l√Ω POST
def view_schedule():
    user_role = session.get('role')
    user_dept = session.get('department')

    # Quy·ªÅn: admin & admin1 ƒë∆∞·ª£c ch·ªçn khoa t√πy √Ω, c√≤n l·∫°i c·ªë ƒë·ªãnh theo khoa c·ªßa user
    is_super = user_role in ('admin', 'admin1')
    selected_department = request.args.get('department') if is_super else user_dept

    # Danh s√°ch khoa hi·ªÉn th·ªã trong combobox
    if is_super:
        departments = [d[0] for d in db.session.query(User.department)
                       .filter(User.department.isnot(None)).distinct().all()]
    else:
        departments = [user_dept] if user_dept else []

    # Ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c (m·∫∑c ƒë·ªãnh 7 ng√†y)
    start_date_str = request.args.get('start_date')
    end_date_str = request.args.get('end_date')
    if start_date_str and end_date_str:
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()
    else:
        start_date = datetime.today().date()
        end_date = start_date + timedelta(days=6)

    # L·∫•y l·ªãch tr·ª±c theo kho·∫£ng ng√†y & khoa
    query = (Schedule.query
             .join(User)
             .join(Shift)
             .filter(Schedule.work_date.between(start_date, end_date)))
    if selected_department:
        query = query.filter(User.department == selected_department)

    schedules = query.order_by(Schedule.work_date).all()
    date_range = [start_date + timedelta(days=i)
                  for i in range((end_date - start_date).days + 1)]

    # Chu·∫©n b·ªã d·ªØ li·ªáu hi·ªÉn th·ªã
    schedule_data = {}
    for s in schedules:
        u = s.user
        if not u:
            continue
        contract_type = getattr(u, 'contract_type', None)
        if u.id not in schedule_data:
            schedule_data[u.id] = {
                'id': u.id,
                'name': u.name,
                'position': u.position,
                'department': u.department,
                'contract_type': contract_type,
                'shifts': {},
                'shifts_full': {}
            }
        schedule_data[u.id]['shifts_full'].setdefault(s.work_date, []).append({
            'shift_id': s.shift.id if s.shift else None,
            'shift_name': s.shift.name if s.shift else '',
            'machine_type': getattr(s, 'machine_type', None),
            'work_hours': getattr(s, 'work_hours', None)
        })

    # D·ªØ li·ªáu cho ph·∫ßn in (l·ªçc ch·ªâ ca tr·ª±c, lo·∫°i ngh·ªâ)
    print_data = {}
    for uid, data in schedule_data.items():
        filtered = {}
        for d, items in data['shifts_full'].items():
            ca_truc = [ca for ca in items
                       if 'tr·ª±c' in (ca.get('shift_name') or '').lower()
                       and 'ngh·ªâ' not in (ca.get('shift_name') or '').lower()]
            if ca_truc:
                filtered[d] = ca_truc
        if filtered:
            print_data[uid] = {**{k: data[k] for k in
                                  ('id','name','position','department','contract_type')},
                               'shifts_full': filtered}

    # Th·ª© t·ª± s·∫Øp x·∫øp
    priority_order = ['Gƒê','PGƒê','TK','TP','PTK','PTP','PK','PP',
                      'BS','ƒêDT','KTVT','KTV','ƒêD','NV','HL','BV','LX']
    def get_priority(pos):
        pos = (pos or '').upper()
        return priority_order.index(pos) if pos in priority_order else 999
    def get_contract_priority(ct):
        return 0 if ct and 'bi√™n' in ct.lower() else 1

    schedule_data = dict(sorted(schedule_data.items(),
                         key=lambda kv: (get_priority(kv[1]['position']),
                                         get_contract_priority(kv[1]['contract_type']),
                                         kv[1]['name'])))
    print_data = dict(sorted(print_data.items(),
                      key=lambda kv: (get_priority(kv[1]['position']),
                                      get_contract_priority(kv[1]['contract_type']),
                                      kv[1]['name'])))

    # Ch·ªØ k√Ω & kh√≥a (n·∫øu c√≥ model; n·∫øu kh√¥ng c√≥ th√¨ b·ªè qua nh·∫π nh√†ng)
    signature = None
    is_signed = False
    signed_at = None
    try:
        signature = ScheduleSignature.query.filter_by(
            department=selected_department, from_date=start_date, to_date=end_date
        ).first()
        is_signed = bool(signature)
        signed_at = signature.signed_at if signature else None
    except Exception:
        pass

    locked = False
    try:
        lock = ScheduleLock.query.filter_by(
            department=selected_department, start_date=start_date, end_date=end_date
        ).first()
        locked = bool(lock)
    except Exception:
        pass

    unit_config = {
        'name': 'B·ªÜNH VI·ªÜN NHI T·ªàNH GIA LAI',
        'address': '123 ƒê∆∞·ªùng ABC, Gia Lai',
        'phone': '0269 123456'
    }

    # Ng√†y l·ªÖ & ƒë√°nh d·∫•u
    from datetime import date
    HOLIDAYS = [date(2025,1,1), date(2025,4,30), date(2025,5,1), date(2025,9,2)]
    highlight_days = {d: ('holiday' if d in HOLIDAYS else 'weekend')
                      for d in date_range if d.weekday() in (5,6) or d in HOLIDAYS}

    return render_template(
        'schedule.html',
        departments=departments,
        selected_department=selected_department,
        schedule_data=schedule_data,
        print_data=print_data,
        date_range=date_range,
        start_date=start_date,
        end_date=end_date,
        now=datetime.now(),
        is_signed=is_signed,
        signed_at=signed_at,
        locked=locked,
        user={'role': user_role, 'department': user_dept, 'name': session.get('name')},
        unit_config=unit_config,
        highlight_days=highlight_days
    )

@app.route('/schedule/edit/<int:user_id>', methods=['GET', 'POST'])
def edit_user_schedule(user_id):
    user = User.query.get_or_404(user_id)
    shifts = Shift.query.order_by(Shift.order).all()

    # L·∫•y kho·∫£ng ng√†y t·ª´ query ho·∫∑c form (request.values ƒÉn c·∫£ GET & POST)
    start_str = request.values.get('start')
    end_str = request.values.get('end')
    if start_str and end_str:
        start = datetime.strptime(start_str, '%Y-%m-%d').date()
        end = datetime.strptime(end_str, '%Y-%m-%d').date()
    else:
        # fallback: th√°ng hi·ªán t·∫°i
        today = date.today()
        start = date(today.year, today.month, 1)
        end = date(today.year, today.month, calendar.monthrange(today.year, today.month)[1])

    # Ch·ªâ load l·ªãch trong kho·∫£ng b·∫°n ƒëang xem (VD: T8)
    schedules = (Schedule.query
                 .filter_by(user_id=user_id)
                 .filter(Schedule.work_date >= start,
                         Schedule.work_date <= end)
                 .order_by(Schedule.work_date)
                 .all())

    # Kh√¥ng cho s·ª≠a n·∫øu ƒë√£ kho√°
    for s in schedules:
        locked = ScheduleLock.query.filter_by(department=user.department)\
            .filter(ScheduleLock.start_date <= s.work_date,
                    ScheduleLock.end_date >= s.work_date).first()
        if locked:
            return "Kh√¥ng th·ªÉ ch·ªânh s·ª≠a. L·ªãch tr·ª±c ƒë√£ ƒë∆∞·ª£c k√Ω x√°c nh·∫≠n v√† kh√≥a.", 403

    if request.method == 'POST':
        changed = 0
        for key, value in request.form.items():
            if not key.startswith('shift_') or not value:
                continue
            try:
                sched_id = int(key.split('_', 1)[1])
                new_shift_id = int(value)
            except ValueError:
                continue

            s = Schedule.query.get(sched_id)
            if not s or s.user_id != user_id:
                continue

            if s.shift_id != new_shift_id:
                s.shift_id = new_shift_id
                changed += 1

        if changed:
            try:
                db.session.commit()
                flash(f"‚úÖ ƒê√£ l∆∞u {changed} thay ƒë·ªïi ca tr·ª±c.", "success")
            except Exception as e:
                db.session.rollback()
                flash("‚ùå L·ªói khi l∆∞u l·ªãch tr·ª±c.", "danger")

        # Quay l·∫°i ƒë√∫ng kho·∫£ng ng√†y ƒëang xem
        return redirect(url_for('view_schedule',
                                department=user.department,
                                start_date=start.strftime('%Y-%m-%d'),
                                end_date=end.strftime('%Y-%m-%d')))

    # Truy·ªÅn start/end xu·ªëng template ƒë·ªÉ form gi·ªØ l·∫°i khi POST
    return render_template('edit_schedule.html',
                           user=user, shifts=shifts, schedules=schedules,
                           start=start.strftime('%Y-%m-%d'),
                           end=end.strftime('%Y-%m-%d'))

@app.route('/schedule/delete-one', methods=['POST'])
def schedule_delete_one():
    role = session.get('role')
    if role not in ('admin', 'admin1', 'manager'):
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.", 403

    user_id = int(request.form['user_id'])
    shift_id = int(request.form['shift_id'])
    work_date = datetime.strptime(request.form['work_date'], '%Y-%m-%d').date()

    s = Schedule.query.filter_by(
        user_id=user_id, shift_id=shift_id, work_date=work_date
    ).first()
    if not s:
        return "Kh√¥ng t√¨m th·∫•y ca tr·ª±c ƒë·ªÉ x√≥a.", 404

    db.session.delete(s)
    db.session.commit()
    return redirect(request.referrer or url_for('view_schedule'))


@app.route('/schedule/sign', methods=['POST'])
@login_required
def sign_schedule():
    department = request.form.get('department')
    from_date_str = request.form.get('from_date')
    to_date_str = request.form.get('to_date')

    user_name = session.get('name')
    app.logger.info(f"[SIGN] User '{user_name}' k√Ω l·ªãch tr·ª±c cho khoa '{department}' t·ª´ {from_date_str} ƒë·∫øn {to_date_str}")

    if not department or not from_date_str or not to_date_str:
        flash("Thi·∫øu th√¥ng tin ƒë·ªÉ k√Ω x√°c nh·∫≠n.", "danger")
        return redirect('/schedule')

    from_date = datetime.strptime(from_date_str, '%Y-%m-%d').date()
    to_date = datetime.strptime(to_date_str, '%Y-%m-%d').date()

    # Ki·ªÉm tra ƒë√£ k√Ω ch∆∞a
    existing = ScheduleSignature.query.filter_by(
        department=department,
        from_date=from_date,
        to_date=to_date
    ).first()

    if existing:
        flash("üìå B·∫£ng l·ªãch tr·ª±c n√†y ƒë√£ ƒë∆∞·ª£c k√Ω x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥.", "info")
    else:
        signed_by = session.get('user_id')
        new_sig = ScheduleSignature(
            department=department,
            from_date=from_date,
            to_date=to_date,
            signed_by=signed_by,
            signed_at=datetime.now()
        )
        db.session.add(new_sig)
        db.session.commit()
        flash("‚úÖ ƒê√£ k√Ω x√°c nh·∫≠n v√† kh√≥a b·∫£ng l·ªãch tr·ª±c.", "success")

    return redirect('/schedule?department={}&start_date={}&end_date={}'.format(
        department, from_date_str, to_date_str
    ))

@app.route('/schedule/unsign', methods=['POST'])
@admin_required
def unsign_schedule():
    department = request.form['department']
    from_date = request.form['from_date']
    to_date = request.form['to_date']

    user_name = session.get('name')
    app.logger.info(f"[UNSIGN] Admin '{user_name}' h·ªßy k√Ω l·ªãch khoa '{department}' t·ª´ {from_date} ƒë·∫øn {to_date}")

    schedules = ScheduleAssignment.query.filter(
        ScheduleAssignment.department == department,
        ScheduleAssignment.date >= from_date,
        ScheduleAssignment.date <= to_date
    ).all()

    for sched in schedules:
        sched.is_signed = False
        sched.signed_at = None
        sched.signed_by = None

    db.session.commit()
    flash("üóëÔ∏è ƒê√£ h·ªßy k√Ω x√°c nh·∫≠n. C√≥ th·ªÉ ch·ªânh s·ª≠a l·ªãch tr·ª±c.", "warning")
    return redirect('/schedule')

@app.route('/schedule/unlock', methods=['POST'])
def unlock_signature():
    if session.get('role') != 'admin':
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.", 403

    department = request.form.get('department')
    from_date = datetime.strptime(request.form.get('from_date'), '%Y-%m-%d').date()
    to_date = datetime.strptime(request.form.get('to_date'), '%Y-%m-%d').date()

    sig = ScheduleSignature.query.filter_by(
        department=department,
        from_date=from_date,
        to_date=to_date
    ).first()

    if sig:
        db.session.delete(sig)
        db.session.commit()
        flash("üßπ ƒê√£ h·ªßy x√°c nh·∫≠n v√† m·ªü kh√≥a l·ªãch tr·ª±c.", "warning")
    else:
        flash("Kh√¥ng t√¨m th·∫•y b·∫£n k√Ω x√°c nh·∫≠n ƒë·ªÉ h·ªßy.", "danger")

    return redirect(f'/schedule?department={department}&start_date={from_date}&end_date={to_date}')

@app.route('/calendar')
def fullcalendar():
    selected_department = request.args.get('department')
    if session.get('role') in ['manager', 'user']:
        selected_department = session.get('department')

    departments = [d[0] for d in db.session.query(User.department).filter(User.department != None).distinct().all()]
    query = Schedule.query.join(User)

    if selected_department:
        query = query.filter(User.department == selected_department)

    schedules = query.order_by(Schedule.work_date).all()
    return render_template('fullcalendar.html',
                           schedules=schedules,
                           departments=departments,
                           selected_department=selected_department)

@app.route('/stats')
def stats():
    from sqlalchemy import func

    user_role = session.get('role')
    user_dept = session.get('department')

    query_users = User.query
    query_schedules = Schedule.query.join(User)

    if user_role in ['manager', 'user']:
        query_users = query_users.filter(User.department == user_dept)
        query_schedules = query_schedules.filter(User.department == user_dept)


    total_users = query_users.count()
    total_shifts = Shift.query.count()
    total_schedules = query_schedules.count()

    schedules_per_user = db.session.query(User.name, func.count(Schedule.id))\
        .join(Schedule)\
        .filter(User.department == user_dept if user_role != 'admin' else True)\
        .group_by(User.id).all()

    return render_template('stats.html',
                           total_users=total_users,
                           total_shifts=total_shifts,
                           total_schedules=total_schedules,
                           schedules_per_user=schedules_per_user)


@app.route('/report-by-department')
def report_by_department():
    user_role = session.get('role')
    user_dept = session.get('department')

    query = Schedule.query.join(User).join(Shift)
    if user_role in ['manager', 'user']:
        query = query.filter(User.department == user_dept)

    schedules = query.all()
    report = {}

    for s in schedules:
        dept = s.user.department
        if dept not in report:
            report[dept] = []
        report[dept].append(s)

    return render_template('report_by_department.html', report=report)

from sqlalchemy import or_

from sqlalchemy import or_

@app.route('/users-by-department')
def users_by_department():
    user_role = session.get('role')
    user_dept = session.get('department')

    # L·∫•y tham s·ªë l·ªçc
    selected_department = (request.args.get('department') or '').strip()
    q = (request.args.get('q') or '').strip()

    # Danh s√°ch khoa cho dropdown
    if user_role in ('admin', 'admin1'):
        departments = [d[0] for d in db.session.query(User.department)
                       .filter(User.department != None).distinct().all()]
    else:
        departments = [user_dept]
        selected_department = user_dept  # nh√¢n vi√™n/manager ch·ªâ xem khoa m√¨nh

    # Base query
    query = User.query
    if selected_department:
        query = query.filter(User.department == selected_department)
    elif user_role not in ('admin', 'admin1'):
        # selected_department r·ªóng nh∆∞ng kh√¥ng ph·∫£i admin
        query = query.filter(User.department == user_dept)

    # T√¨m ki·∫øm theo t√™n / username / ch·ª©c danh
    if q:
        query = query.filter(or_(
            User.name.ilike(f"%{q}%"),
            User.username.ilike(f"%{q}%"),
            User.position.ilike(f"%{q}%")
        ))

    # (gi·ªØ nguy√™n order_by DB ƒë·ªÉ ·ªïn ƒë·ªãnh, s·∫Ω s·∫Øp x·∫øp ∆∞u ti√™n ·ªü Python)
    if user_role in ('admin', 'admin1') and not selected_department:
        query = query.order_by(User.department, User.name)
    else:
        query = query.order_by(User.name)

    users = query.all()

    # --- S·∫ÆP X·∫æP ∆ØU TI√äN CH·ª®C DANH ---
    priority_order = ['Gƒê', 'PGƒê', 'TK', 'TP', 'PTP', 'PP', 'PTK', 'PK', 'BS', 'ƒêDT', 'ƒêD', 'KTV', 'NV','HL', 'BV', 'LX']

    def priority_index(position: str) -> int:
        pos = (position or '').upper().strip()
        for i, pre in enumerate(priority_order):
            if pos.startswith(pre):
                return i
        return len(priority_order)  # kh√¥ng kh·ªõp ‚Üí cu·ªëi

    if user_role in ('admin', 'admin1') and not selected_department:
        # Xem t·∫•t c·∫£ khoa: Khoa ‚Üí ∆Øu ti√™n ‚Üí T√™n
        users = sorted(users, key=lambda u: (
            (u.department or '').lower().strip(),
            priority_index(u.position),
            (u.name or '').lower().strip()
        ))
    else:
        # M·ªôt khoa (ho·∫∑c kh√¥ng ph·∫£i admin): ∆Øu ti√™n ‚Üí T√™n
        users = sorted(users, key=lambda u: (
            priority_index(u.position),
            (u.name or '').lower().strip()
        ))

    return render_template(
        'users_by_department.html',
        users=users,
        departments=departments,
        selected_department=selected_department,
        q=q,
        current_user_role=user_role
    )


@app.route('/users/inactive')
def inactive_users():
    users = User.query.filter_by(active=False).all()
    return render_template('inactive_users.html', users=users)

@app.route('/users/reactivate/<int:user_id>')
def reactivate_user(user_id):
    user = User.query.get_or_404(user_id)
    user.active = True
    db.session.commit()
    flash("‚úÖ Nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c!", "success")
    return redirect('/users/inactive')

@app.route('/users/deactivate/<int:user_id>')
def deactivate_user(user_id):
    user = User.query.get_or_404(user_id)
    user.active = False
    db.session.commit()
    flash("üö´ Nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c ng·ª´ng ho·∫°t ƒë·ªông!", "warning")
    return redirect(request.referrer or url_for('users_by_department'))

@app.route('/users/delete-all', methods=['GET', 'POST'])
def delete_all_users():
    if 'user_id' not in session or session.get('role') != 'admin':
        flash("Kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ch·ª©c nƒÉng n√†y.", "danger")
        return redirect('/login')

    try:
        from models.user import User

        user_name = session.get('username', 'Unknown')
        user_role = session.get('role', 'unknown')
        selected_department = session.get('department', 'unknown')

        users_to_delete = User.query.filter(User.username != 'admin').all()
        print(f"üßπ Xo√° {len(users_to_delete)} nh√¢n s·ª±...")
        app.logger.info(f"[USER_VIEW] User '{user_name}' ({user_role}) xem danh s√°ch nh√¢n s·ª± khoa '{selected_department}'")

        for u in users_to_delete:
            print(f"‚Üí Xo√°: {u.username}")
            db.session.delete(u)

        db.session.commit()
        print("‚úÖ Xo√° xong.")
        flash("ƒê√£ xo√° to√†n b·ªô nh√¢n s·ª± (tr·ª´ admin).", "success")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå L·ªói khi xo√°: {str(e)}")
        flash(f"L·ªói khi xo√°: {str(e)}", "danger")

    return redirect('/users-by-department')

@app.route('/export-by-department', methods=['GET', 'POST'])
def export_by_department():
    from sqlalchemy import distinct

    user_role = session.get('role')
    user_dept = session.get('department')

    # L·∫•y danh s√°ch khoa
    departments = [d[0] for d in db.session.query(distinct(User.department)).filter(User.department != None).all()]
    selected_department = request.form.get('department') if request.method == 'POST' else user_dept

    if user_role != 'admin':
        selected_department = user_dept

    # T·∫°o file Excel
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(['H·ªç t√™n', 'Ca tr·ª±c', 'Ng√†y tr·ª±c'])

    # Truy v·∫•n l·ªãch c√≥ ch·ª©a t·ª´ "tr·ª±c"
    query = Schedule.query.join(User).join(Shift).filter(Shift.name.ilike('%tr·ª±c%'))

    if selected_department:
        query = query.filter(User.department == selected_department)

    schedules = query.order_by(Schedule.work_date).all()

    for s in schedules:
        if s.user and s.shift:
            ws.append([s.user.name, s.shift.name, s.work_date.strftime('%Y-%m-%d')])

    stream = BytesIO()
    wb.save(stream)
    stream.seek(0)
    return send_file(stream, as_attachment=True, download_name="lichtruc_theo_khoa.xlsx")

@app.route('/generate_schedule', methods=['GET', 'POST'])
def generate_schedule_route():
    from models.leave_request import LeaveRequest

    # L·∫•y danh s√°ch khoa
    departments = [d[0] for d in db.session.query(User.department)
                   .filter(User.department.isnot(None)).distinct().all()]

    if request.method == 'POST':
        department = request.form.get('department')
        start_date = datetime.strptime(request.form['start_date'], '%Y-%m-%d').date()
        end_date = datetime.strptime(request.form['end_date'], '%Y-%m-%d').date()

        # L·∫•y danh s√°ch nh√¢n vi√™n theo th·ª© t·ª± click
        ordered_user_ids = request.form.getlist('ordered_user_ids')  # t·ª´ JS
        if not ordered_user_ids:
            # fallback n·∫øu frontend ch∆∞a c·∫≠p nh·∫≠t
            ordered_user_ids = request.form.getlist('user_ids')

        shift_ids = request.form.getlist('shift_ids')
        people_per_day = int(request.form.get('people_per_day', 1))

        if not ordered_user_ids or not shift_ids:
            flash("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 nh√¢n vi√™n v√† 1 ca tr·ª±c.", "danger")
            return redirect(request.referrer)

        ordered_user_ids = [int(uid) for uid in ordered_user_ids]
        shift_ids = [int(sid) for sid in shift_ids]
        user_count = len(ordered_user_ids)

        # T·∫°o danh s√°ch ng√†y
        date_range = [start_date + timedelta(days=i) for i in range((end_date - start_date).days + 1)]

        assignments = []
        conflicts = []

        # L·∫•y ƒë∆°n ngh·ªâ ph√©p trong kho·∫£ng
        leaves = LeaveRequest.query.filter(
            LeaveRequest.start_date <= end_date,
            LeaveRequest.end_date >= start_date
        ).all()

        user_index = 0
        for work_date in date_range:
            assigned = set()
            for shift_id in shift_ids:
                attempts = 0
                while len(assigned) < people_per_day and attempts < user_count * 2:
                    uid = ordered_user_ids[user_index % user_count]
                    user_index += 1
                    attempts += 1

                    # Ki·ªÉm tra ngh·ªâ ph√©p
                    if any(l.user_id == uid and l.start_date <= work_date <= l.end_date for l in leaves):
                        continue

                    # Ki·ªÉm tra tr√πng l·ªãch
                    exists = Schedule.query.filter_by(user_id=uid, shift_id=shift_id, work_date=work_date).first()
                    if exists or uid in assigned:
                        continue

                    # Th√™m l·ªãch
                    assignments.append(Schedule(user_id=uid, shift_id=shift_id, work_date=work_date))
                    assigned.add(uid)

        # Ghi DB
        if assignments:
            db.session.add_all(assignments)
            db.session.commit()
            flash("‚úÖ ƒê√£ t·∫°o l·ªãch tr·ª±c t·ª± ƒë·ªông theo th·ª© t·ª± ch·ªçn.", "success")
        else:
            flash("‚ö†Ô∏è Kh√¥ng c√≥ l·ªãch n√†o ƒë∆∞·ª£c t·∫°o. C√≥ th·ªÉ t·∫•t c·∫£ b·ªã tr√πng ho·∫∑c ngh·ªâ ph√©p.", "warning")

        return redirect(url_for('generate_schedule_route'))

    # GET hi·ªÉn th·ªã form
    selected_department = request.args.get('department')
    users = User.query.filter_by(department=selected_department).all() if selected_department else []
    shifts = Shift.query.all()

    return render_template('generate_form.html',
                           departments=departments,
                           selected_department=selected_department,
                           users=users,
                           shifts=shifts)


@app.route('/export')
def export_excel():
    user_role = session.get('role')
    user_dept = session.get('department')
    wb.active = wb.active  # ƒê·∫£m b·∫£o ch·ªçn ƒë√∫ng sheet
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(['H·ªç t√™n', 'Ca tr·ª±c', 'Ng√†y tr·ª±c'])
    ws.freeze_panes = "A2"  # ‚úÖ C·ªë ƒë·ªãnh h√†ng ti√™u ƒë·ªÅ

    # L·∫•y l·ªãch tr·ª±c c√≥ ch·ª©a t·ª´ "tr·ª±c"
    query = Schedule.query.join(User).join(Shift).filter(Shift.name.ilike('%tr·ª±c%'))
    if user_role != 'admin':
        query = query.filter(User.department == user_dept)

    schedules = query.order_by(Schedule.work_date).all()
    for s in schedules:
        if s.user and s.shift:
            ws.append([s.user.name, s.shift.name, s.work_date.strftime('%Y-%m-%d')])

    stream = BytesIO()
    wb.save(stream)
    stream.seek(0)
    return send_file(stream, as_attachment=True, download_name="lichtruc.xlsx")

from sqlalchemy import asc, desc, func

def normalize_shift_order():
    ORDER_COL = Shift.__table__.c.order
    # L·∫•y t·∫•t c·∫£ theo id ƒë·ªÉ ƒë√°nh l·∫°i ch·ªâ m·ª•c 1..n
    all_ids = [row[0] for row in db.session.query(Shift.id).order_by(Shift.id.asc()).all()]
    for i, sid in enumerate(all_ids, start=1):
        db.session.query(Shift).filter(Shift.id == sid).update({ORDER_COL: i})
    db.session.commit()

import os
from urllib.parse import urlparse
from sqlalchemy import asc, desc, func, and_, or_

def normalize_shift_order():
    """ƒê∆∞a th·ª© t·ª± order v·ªÅ 1..n, lo·∫°i NULL/tr√πng; d√πng (order,id) ƒë·ªÉ ·ªïn ƒë·ªãnh."""
    ORDER_COL = Shift.__table__.c.order
    rows = (db.session.query(Shift)
            .order_by(asc(func.coalesce(ORDER_COL, 10**9)), Shift.id.asc())
            .with_for_update()  # kho√° t·∫°m th·ªùi ƒë·ªÉ tr√°nh race
            .all())
    for i, r in enumerate(rows, start=1):
        r.order = i
    db.session.commit()


# --- DB URI: h·ªó tr·ª£ Render Postgres & local SQLite ---
uri = os.getenv('DATABASE_URL', 'sqlite:///database.db')

# Render th∆∞·ªùng tr·∫£ "postgres://", c·∫ßn ƒë·ªïi sang "postgresql+psycopg2://"
if uri.startswith('postgres://'):
    uri = uri.replace('postgres://', 'postgresql+psycopg2://', 1)

# B·∫Øt bu·ªôc SSL khi l√† Postgres
if uri.startswith('postgresql') and 'sslmode=' not in uri:
    sep = '&' if '?' in uri else '?'
    uri = f'{uri}{sep}sslmode=require'

app.config['SQLALCHEMY_DATABASE_URI'] = uri
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Tr√°nh k·∫øt n·ªëi stale / r·ªõt SSL
app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
    "pool_pre_ping": True,
    "pool_recycle": 300,
    "pool_size": 5,
    "max_overflow": 5,
    "connect_args": {"sslmode": "require"} if uri.startswith('postgresql') else {}
}

@app.route('/shifts/reindex', methods=['POST'])
def reindex_shifts():
    normalize_shift_order()
    flash("ƒê√£ s·∫Øp x·∫øp l·∫°i th·ª© t·ª± ca tr·ª±c.", "success")
    return redirect(url_for('list_shifts'))

@app.route('/shifts')
def list_shifts():
    ORDER_COL = Shift.__table__.c.order
    try:
        shifts = Shift.query.order_by(ORDER_COL.asc(), Shift.id.asc()).all()
    except Exception:
        shifts = Shift.query.order_by(Shift.id.asc()).all()
    return render_template('shifts.html', shifts=shifts)


from flask import render_template, request, redirect, flash
from datetime import datetime
from models import Shift  # ƒë·∫£m b·∫£o ƒë√£ import ƒë√∫ng

def parse_time_string(time_str):
    for fmt in ("%H:%M:%S", "%H:%M"):
        try:
            return datetime.strptime(time_str, fmt).time()
        except ValueError:
            continue
    raise ValueError("‚ùå ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p HH:MM ho·∫∑c HH:MM:SS.")

@app.route('/shifts/add', methods=['GET', 'POST'])
def add_shift():
    if request.method == 'POST':
        name = request.form['name']
        code = request.form['code']
        duration = request.form['duration']

        try:
            start_time = parse_time_string(request.form['start_time'])
            end_time = parse_time_string(request.form['end_time'])
            duration = float(duration)
        except ValueError as e:
            flash(str(e), 'danger')
            return render_template('add_shift.html', old=request.form)

        # L·∫•y order l·ªõn nh·∫•t + 1
        max_order = db.session.query(db.func.max(Shift.order)).scalar() or 0
        new_order = max_order + 1

        shift = Shift(name=name, code=code, start_time=start_time,
                      end_time=end_time, duration=duration, order=new_order)

        db.session.add(shift)
        db.session.commit()

        user_name = session.get('name')
        app.logger.info(f"[SHIFT_ADD] {user_name} th√™m ca tr·ª±c '{name}' (M√£: {code}, {start_time}-{end_time})")

        flash("‚úÖ ƒê√£ th√™m ca tr·ª±c m·ªõi.", "success")
        return redirect('/shifts')

    return render_template('add_shift.html')

from sqlalchemy import asc, desc

@app.route('/shifts/move_up/<int:shift_id>', methods=['GET', 'POST'])
def move_shift_up(shift_id):
    ORDER_COL = Shift.__table__.c.order
    normalize_shift_order()

    shift = (Shift.query.filter_by(id=shift_id)
             .with_for_update()
             .first_or_404())

    # H√†ng ·ªü ngay ph√≠a tr√™n theo (order, id)
    above_shift = (Shift.query
                   .filter(or_(
                       ORDER_COL < shift.order,
                       and_(ORDER_COL == shift.order, Shift.id < shift.id)
                   ))
                   .order_by(ORDER_COL.desc(), Shift.id.desc())
                   .with_for_update()
                   .first())

    if above_shift:
        shift.order, above_shift.order = above_shift.order, shift.order
        db.session.commit()
    else:
        flash("ƒê√£ ·ªü v·ªã tr√≠ ƒë·∫ßu ti√™n, kh√¥ng th·ªÉ di chuy·ªÉn l√™n.", "info")
    return redirect('/shifts')



@app.route('/shifts/move_down/<int:shift_id>', methods=['GET', 'POST'])
def move_shift_down(shift_id):
    ORDER_COL = Shift.__table__.c.order
    normalize_shift_order()

    shift = (Shift.query.filter_by(id=shift_id)
             .with_for_update()
             .first_or_404())

    # H√†ng ·ªü ngay ph√≠a d∆∞·ªõi theo (order, id)
    below_shift = (Shift.query
                   .filter(or_(
                       ORDER_COL > shift.order,
                       and_(ORDER_COL == shift.order, Shift.id > shift.id)
                   ))
                   .order_by(ORDER_COL.asc(), Shift.id.asc())
                   .with_for_update()
                   .first())

    if below_shift:
        shift.order, below_shift.order = below_shift.order, shift.order
        db.session.commit()
    else:
        flash("ƒê√£ ·ªü v·ªã tr√≠ cu·ªëi c√πng, kh√¥ng th·ªÉ di chuy·ªÉn xu·ªëng.", "info")
    return redirect('/shifts')



from flask import request, redirect, flash
import openpyxl
from datetime import datetime
from models.shift import Shift
from models import db

def parse_time_string(time_str):
    return datetime.strptime(time_str.strip(), '%H:%M').time()

from flask import flash, redirect, render_template

@app.route('/shifts/edit/<int:id>', methods=['GET', 'POST'])
def edit_shift(id):
    shift = Shift.query.get_or_404(id)
    old = {}

    if request.method == 'POST':
        old = {
            'code': request.form['code'],
            'name': request.form['name'],
            'start_time': request.form['start_time'],
            'end_time': request.form['end_time'],
            'duration': request.form['duration']
        }

        try:
            shift.code = old['code']
            shift.name = old['name']

            # Parse gi·ªù HH:MM ho·∫∑c HH:MM:SS
            try:
                shift.start_time = datetime.strptime(old['start_time'], '%H:%M').time()
            except ValueError:
                shift.start_time = datetime.strptime(old['start_time'], '%H:%M:%S').time()

            try:
                shift.end_time = datetime.strptime(old['end_time'], '%H:%M').time()
            except ValueError:
                shift.end_time = datetime.strptime(old['end_time'], '%H:%M:%S').time()

            shift.duration = float(old['duration'])

            db.session.commit()

            user_name = session.get('name')
            app.logger.info(f"[SHIFT_EDIT] {user_name} s·ª≠a ca tr·ª±c ID={id} th√†nh t√™n: {shift.name}, m√£: {shift.code}, gi·ªù: {shift.start_time}-{shift.end_time}")

            return redirect('/shifts')

        except ValueError as ve:
            flash("‚ö†Ô∏è Vui l√≤ng nh·∫≠p gi·ªù theo ƒë·ªãnh d·∫°ng HH:MM ho·∫∑c HH:MM:SS", "danger")

    return render_template('edit_shift.html', shift=shift, old=old)

@app.route('/shifts/delete/<int:shift_id>')
def delete_shift(shift_id):
    shift = Shift.query.get_or_404(shift_id)

    from models.schedule import Schedule
    if Schedule.query.filter_by(shift_id=shift_id).first():
        return "Kh√¥ng th·ªÉ xo√° ca n√†y v√¨ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong l·ªãch tr·ª±c.", 400

    db.session.delete(shift)
    db.session.commit()

    user_name = session.get('name', 'Kh√¥ng x√°c ƒë·ªãnh')
    app.logger.info(f"[SHIFT_DELETE] {user_name} ƒë√£ xo√° ca tr·ª±c: {shift.name}")

    return redirect('/shifts')

@app.route('/export-shifts')
def export_shifts():
    import openpyxl
    from io import BytesIO
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Shifts"

    ws.append(["T√™n ca", "M√£ ca", "Gi·ªù b·∫Øt ƒë·∫ßu", "Gi·ªù k·∫øt th√∫c", "Th·ªùi l∆∞·ª£ng"])

    for shift in Shift.query.order_by(Shift.name).all():
        ws.append([shift.name, shift.code, str(shift.start_time), str(shift.end_time), shift.duration])

    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return send_file(output, as_attachment=True, download_name="danh_sach_ca.xlsx")

from datetime import datetime, time
from flask import flash  # c·∫ßn import ƒë·ªÉ s·ª≠ d·ª•ng th√¥ng b√°o

@app.route('/import-shifts', methods=['POST'], endpoint='import_shifts')
def import_shifts_excel():  # ‚úÖ ƒê·ªïi t√™n h√†m
    import openpyxl
    from datetime import datetime, time

    file = request.files['file']
    if not file:
        flash("Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn.", "error")
        return redirect('/shifts')

    try:
        wb = openpyxl.load_workbook(file)
        ws = wb.active

        for idx, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
            name, code, start, end, duration = row
            if name and code:
                def to_time(val):
                    if isinstance(val, time):
                        return val
                    if isinstance(val, datetime):
                        return val.time()
                    if isinstance(val, str):
                        for fmt in ("%H:%M", "%H:%M:%S"):
                            try:
                                return datetime.strptime(val.strip(), fmt).time()
                            except ValueError:
                                continue
                    return None

                start_time = to_time(start)
                end_time = to_time(end)

                if not start_time or not end_time:
                    flash(f"D√≤ng {idx}: Gi·ªù b·∫Øt ƒë·∫ßu/k·∫øt th√∫c sai ƒë·ªãnh d·∫°ng. D√πng 'HH:MM' ho·∫∑c 'HH:MM:SS'.", "error")
                    continue

                existing = Shift.query.filter_by(code=code).first()
                if not existing:
                    new_shift = Shift(name=name, code=code, start_time=start_time, end_time=end_time, duration=duration)
                    db.session.add(new_shift)

        db.session.commit()
        flash("‚úÖ ƒê√£ nh·∫≠p ca tr·ª±c th√†nh c√¥ng.", "success")
    except Exception as e:
        flash(f"‚ùå L·ªói khi ƒë·ªçc file: {str(e)}", "error")

    return redirect('/shifts')

@app.route('/users/edit/<int:user_id>', methods=['GET', 'POST'])
def edit_user(user_id):
    user = User.query.get_or_404(user_id)
    if request.method == 'POST':
        new_username = request.form['username']
        if User.query.filter(User.username == new_username, User.id != user_id).first():
            error_message = "User n√†y ƒë√£ c√≥ ng∆∞·ªùi d√πng, b·∫°n kh√¥ng th·ªÉ c·∫≠p nh·∫≠t."
            return render_template('edit_user.html', user=user, error=error_message)

        user.name = request.form['name']
        user.username = new_username
        user.password = request.form['password']
        user.role = request.form['role']
        user.department = request.form['department']
        user.position = request.form['position']
        user.contract_type = request.form.get('contract_type')  # ‚úÖ n·∫øu c√≥ th√™m tr∆∞·ªùng n√†y
        user.phone = request.form['phone']
        db.session.commit()
        return redirect('/users-by-department')

    return render_template('edit_user.html', user=user)


@app.route('/users/add', methods=['GET', 'POST'])
def add_user():
    current_role = session.get('role')

    if request.method == 'POST':
        name = request.form['name']
        username = request.form['username']
        password = request.form['password']
        role = request.form['role']
        department = request.form['department']
        position = request.form['position']
        contract_type = request.form.get('contract_type')
        phone = request.form.get('phone')

        # N·∫øu ng∆∞·ªùi t·∫°o l√† manager -> √©p role th√†nh user
        if current_role == 'manager':
            role = 'user'

        # Ki·ªÉm tra username tr√πng
        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            flash("‚ùå T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.", "danger")
            return render_template('add_user.html', old=request.form)

        # T·∫°o user m·ªõi
        new_user = User(
            name=name,
            username=username,
            password=password,
            role=role,
            department=department,
            position=position,
            contract_type=contract_type,
            phone=phone,
        )
        db.session.add(new_user)
        db.session.commit()
        flash("‚úÖ ƒê√£ th√™m ng∆∞·ªùi d√πng m·ªõi.", "success")
        return redirect('/users-by-department')

    # === D·ªÆ LI·ªÜU ƒê·ªòNG ===
    # L·∫•y danh s√°ch khoa t·ª´ DB (distinct department)
    departments = [d[0] for d in db.session.query(User.department)
                   .filter(User.department != None)
                   .distinct()
                   .all()]

    # Danh s√°ch ch·ª©c danh c·ªë ƒë·ªãnh (c√≥ th·ªÉ chuy·ªÉn sang DB n·∫øu c·∫ßn)
    positions = ['B√°c sƒ©', 'ƒêi·ªÅu d∆∞·ª°ng', 'K·ªπ thu·∫≠t vi√™n', 'Nh√¢n vi√™n', 'H·ªô l√Ω', 'B·∫£o v·ªá', 'L√°i xe']

    return render_template(
        'add_user.html',
        departments=departments,
        positions=positions
    )

@app.route('/import-users', methods=['GET', 'POST'])
def import_users():
    import openpyxl
    from sqlalchemy.exc import IntegrityError

    if request.method == 'POST':
        file = request.files['file']
        if file.filename.endswith('.xlsx'):
            wb = openpyxl.load_workbook(file)
            sheet = wb.active
            skipped_users = []
            imported_count = 0

            for idx, row in enumerate(sheet.iter_rows(min_row=2, values_only=True), start=2):
                if not any(row):
                    continue
                # G√°n ƒë√∫ng th·ª© t·ª± theo file:
                name          = row[0]
                username      = row[1]
                password      = row[2]
                role          = row[3]
                department    = row[4]
                position      = row[5]
                contract_type = row[6] if len(row) > 6 else None 
                phone         = row[7] if len(row) > 7 else None

                # B·ªè qua n·∫øu thi·∫øu t√™n ƒëƒÉng nh·∫≠p ho·∫∑c ƒë√£ t·ªìn t·∫°i
                if not username or User.query.filter_by(username=username).first():
                    skipped_users.append(username or f"H√†ng {idx}")
                    continue

                user = User(
                    name=name,
                    username=username,
                    password=password,
                    role=role,
                    department=department,
                    position=position,
                    contract_type=contract_type,
                    phone=phone
                )
                db.session.add(user)
                imported_count += 1

            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()
                flash("‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra n·ªôi dung file Excel.", "danger")
                return redirect('/users-by-department')

            if skipped_users:
                flash(f"‚ö†Ô∏è ƒê√£ nh·∫≠p {imported_count} ng∆∞·ªùi d√πng. B·ªè qua: {', '.join(skipped_users)}", "warning")
            else:
                flash(f"‚úÖ ƒê√£ nh·∫≠p th√†nh c√¥ng {imported_count} ng∆∞·ªùi d√πng.", "success")

            return redirect('/users-by-department')
        else:
            flash("‚ùå Vui l√≤ng ch·ªçn file Excel (.xlsx)", "danger")
            return redirect('/import-users')

    return render_template('import_users.html')

import logging
from datetime import datetime

# Thi·∫øt l·∫≠p file log
logging.basicConfig(filename='phanquyen.log', level=logging.INFO)

@app.route('/roles', methods=['GET', 'POST'])
def manage_roles():
    # Ki·ªÉm tra quy·ªÅn: admin v√† admin1 ƒë∆∞·ª£c truy c·∫≠p
    if session.get('role') not in ['admin', 'admin1']:
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y."

    search = request.args.get('search', '').strip()
    role_filter = request.args.get('role', '')
    department_filter = request.args.get('department', '').strip()
    page = int(request.args.get('page', 1))
    per_page = 10

    users_query = User.query

    # Admin1 kh√¥ng ƒë∆∞·ª£c xem admin
    if session.get('role') == 'admin1':
        users_query = users_query.filter(User.role != 'admin')

    # L·ªçc theo search, role, department
    if search:
        users_query = users_query.filter(User.name.ilike(f"%{search}%"))
    if role_filter:
        users_query = users_query.filter_by(role=role_filter)
    if department_filter:
        users_query = users_query.filter_by(department=department_filter)

    # Ph√¢n trang
    pagination = users_query.order_by(User.department).paginate(page=page, per_page=per_page, error_out=False)
    users = pagination.items

    modules = [
        'trang_chu', 'xem_lich_truc', 'yeu_cau_cv_ngoai_gio', 'don_nghi_phep',
        'xep_lich_truc', 'tong_hop_khth', 'cham_cong', 'bang_cham_cong_2', 'bang_cong_gop', 'bang_tinh_tien_truc',
        'cau_hinh_ca_truc', 'cau_hinh_muc_doc_hai','thiet_lap_phong_kham', 'nhan_su_theo_khoa',
        'cau_hinh_tien_truc', 'thiet_lap_khoa_hscc', 'cau_hinh_don_vi', 'phan_quyen',
        'danh_sach_cong_viec', 'xem_log', 'doi_mat_khau', 'module_config'
    ]

    module_names = {
        'trang_chu': 'Trang ch·ªß',
        'xem_lich_truc': 'Xem l·ªãch tr·ª±c',
        'yeu_cau_cv_ngoai_gio': 'Y√™u c·∫ßu c√¥ng vi·ªác ngo√†i gi·ªù',
        'don_nghi_phep': 'ƒê∆°n ngh·ªâ ph√©p',
        'xep_lich_truc': 'X·∫øp l·ªãch tr·ª±c',
        'tong_hop_khth': 'T·ªïng h·ª£p KHTH',
        'cham_cong': 'Ch·∫•m c√¥ng',
        'bang_cham_cong_cong_2': 'B·∫£ng ch·∫•m c√¥ng BHYT',
        'bang_cong_gop': 'B·∫£ng c√¥ng g·ªôp',
        'bang_tinh_tien_truc': 'B·∫£ng thanh to√°n ti·ªÅn tr·ª±c',
        'cau_hinh_ca_truc': 'C·∫•u h√¨nh ca tr·ª±c',
        'cau_hinh_muc_doc_hai': 'C·∫•u h√¨nh m·ª©c ƒë·ªôc h·∫°i',
        'thiet_lap_phong_kham': 'Thi·∫øt l·∫≠p Ph√≤ng kh√°m',
        'nhan_su_theo_khoa': 'Nh√¢n s·ª± theo khoa',
        'cau_hinh_tien_truc': 'C·∫•u h√¨nh ti·ªÅn tr·ª±c',
        'thiet_lap_khoa_hscc': 'Thi·∫øt l·∫≠p khoa HSCC',
        'cau_hinh_don_vi': 'C·∫•u h√¨nh ƒë∆°n v·ªã',
        'phan_quyen': 'Ph√¢n quy·ªÅn',
        'danh_sach_cong_viec': 'Danh s√°ch y√™u c·∫ßu c√¥ng vi·ªác',
        'xem_log': 'Xem log h·ªá th·ªëng',
        'doi_mat_khau': 'ƒê·ªïi m·∫≠t kh·∫©u',
        'module_config': 'C·∫•u h√¨nh ph√¢n h·ªá'
    }

    if request.method == 'POST':
        all_users = User.query.all()
        for user in all_users:
            selected_modules = request.form.getlist(f'modules_{user.id}[]')
            if not selected_modules:
                continue

            role = request.form.get(f'role_{user.id}')
            dept = request.form.get(f'department_{user.id}')
            position = request.form.get(f'position_{user.id}')

            if role and dept and position:
                if (user.role != role) or (user.department != dept) or (user.position != position):
                    logging.info(f"{datetime.now()} | Admin ID {session['user_id']} c·∫≠p nh·∫≠t: {user.username} ‚Üí "
                                 f"Role: {user.role} ‚Üí {role}, Dept: {user.department} ‚Üí {dept}, Position: {user.position} ‚Üí {position}")
                user.role = role
                user.department = dept
                user.position = position

            Permission.query.filter_by(user_id=user.id).delete()
            for mod in modules:
                db.session.add(Permission(
                    user_id=user.id,
                    module_name=mod,
                    can_access=(mod in selected_modules)
                ))

        db.session.commit()
        flash("‚úÖ ƒê√£ l∆∞u thay ƒë·ªïi ph√¢n quy·ªÅn ng∆∞·ªùi d√πng.", "success")
        return redirect('/roles')

    departments = [d[0] for d in db.session.query(User.department).distinct().all() if d[0]]
    roles = ['admin', 'admin1', 'manager', 'user']  # Th√™m admin1
    positions = [p[0] for p in db.session.query(User.position).filter(User.position != None).distinct().all()]

    for user in users:
        user.modules = [perm.module_name for perm in user.permissions if perm.can_access]

    return render_template('manage_roles.html',
                           users=users,
                           departments=departments,
                           roles=roles,
                           positions=positions,
                           modules=modules,
                           module_names=module_names,
                           pagination=pagination,
                           current_search=search,
                           current_role=role_filter,
                           current_department=department_filter)

@app.route('/unit-config', methods=['GET', 'POST'])
def unit_config():
    if session.get('role') != 'admin':
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p."

    config = UnitConfig.query.first()
    if not config:
        config = UnitConfig()

    if request.method == 'POST':
        config.name = request.form['name']
        config.address = request.form['address']
        config.phone = request.form['phone']
        db.session.add(config)
        db.session.commit()
        flash("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n v·ªã", "success")
        return redirect('/unit-config')

    return render_template('unit_config.html', config=config)

from flask import send_file

import os
from flask import Flask, render_template, request, redirect, session, send_file

LOG_DIR = os.path.join(os.path.dirname(__file__), 'logs')
LOG_FILE = os.path.join(LOG_DIR, 'activity.log')

def ensure_log_file():
    os.makedirs(LOG_DIR, exist_ok=True)
    if not os.path.exists(LOG_FILE):
        # t·∫°o file r·ªóng ƒë·ªÉ tr√°nh l·ªói kh√¥ng t·ªìn t·∫°i
        open(LOG_FILE, 'a', encoding='utf-8').close()     

@app.route('/view-log')
def view_log():
    if session.get('role') != 'admin':
        return "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p", 403

    log_path = os.path.join('logs', 'activity.log')
    if not os.path.exists(log_path):
        return render_template('view_log.html', log_lines=[])

    with open(log_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    return render_template('view_log.html', log_lines=lines)

@app.route('/download-log')
def download_log():
    if session.get('role') != 'admin':
        return "Kh√¥ng c√≥ quy·ªÅn t·∫£i log", 403

    log_path = os.path.join('logs', 'activity.log')
    return send_file(log_path, as_attachment=True)

@app.route('/clear-log', methods=['POST'])
def clear_log():
    if session.get('role') != 'admin':
        return "Kh√¥ng c√≥ quy·ªÅn xo√° log", 403

    log_path = os.path.join('logs', 'activity.log')
    open(log_path, 'w').close()
    return redirect('/view-log')


@app.route('/delete_user/<int:user_id>', methods=['POST'])
def delete_user(user_id):
    user = User.query.get(user_id)
    if user:
        if user.username == 'admin':
            flash("‚ùå Kh√¥ng th·ªÉ xo√° t√†i kho·∫£n admin.", "danger")
        else:
            db.session.delete(user)
            db.session.commit()
            flash(f"‚úÖ ƒê√£ xo√°: {user.name}", "success")
    else:
        flash("‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.", "danger")

    return redirect('/users-by-department')

import traceback

@app.errorhandler(Exception)
def handle_exception(e):
    # N·∫øu ƒëang debug, show l·ªói chi ti·∫øt ra tr√¨nh duy·ªát
    return f"""
        <h2 style='color: red;'>‚ùå Internal Server Error</h2>
        <pre>{traceback.format_exc()}</pre>
        <hr>
        <p style='color: gray;'>Vui l√≤ng b√°o l·ªói n√†y cho qu·∫£n tr·ªã vi√™n h·ªá th·ªëng.</p>
    """, 500

@app.route('/export-template', methods=['POST'])
def export_template():
    department = request.form.get('department')
    start_date = request.form.get('start_date')
    end_date = request.form.get('end_date')

    print(">>> [EXPORT] Khoa:", department)
    print(">>> [EXPORT] T·ª´ ng√†y:", start_date)
    print(">>> [EXPORT] ƒê·∫øn ng√†y:", end_date)

    query = Schedule.query.join(User).join(Shift)

    if department:
        query = query.filter(User.department == department)

    if start_date and end_date:
        try:
            start = datetime.strptime(start_date, '%Y-%m-%d').date()
            end = datetime.strptime(end_date, '%Y-%m-%d').date()
            query = query.filter(Schedule.work_date.between(start, end))
        except ValueError:
            return "Ng√†y kh√¥ng h·ª£p l·ªá.", 400
    else:
        return "Vui l√≤ng ch·ªçn kho·∫£ng th·ªùi gian.", 400

    schedules = query.order_by(Schedule.work_date).all()
    if not schedules:
        return "Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch tr·ª±c.", 404

    # T·∫≠p h·ª£p ng√†y
    date_range = sorted({s.work_date for s in schedules})

    # Pivot d·ªØ li·ªáu ng∆∞·ªùi d√πng
    schedule_data = {}
    for s in schedules:
        u = s.user
        if u.id not in schedule_data:
            schedule_data[u.id] = {
                'name': u.name,
                'position': u.position,
                'department': u.department,
                'shifts': {}
            }
        schedule_data[u.id]['shifts'][s.work_date] = s.shift.name

    # --- T·∫°o Excel ---
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "L·ªãch tr·ª±c ngang"

    # --- Qu·ªëc hi·ªáu, ti√™u ƒë·ªÅ ƒë·∫ßu trang ---
    ws.merge_cells('A1:G1')
    ws['A1'] = "B·ªÜNH VI·ªÜN NHI T·ªàNH GIA LAI"
    ws.merge_cells('H1:N1')
    ws['H1'] = "C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM"
    ws.merge_cells('H2:N2')
    ws['H2'] = "ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c"
    ws.merge_cells('A4:N4')
    ws['A4'] = f"B·∫¢NG L·ªäCH TR·ª∞C KHOA {department.upper() if department else ''}"
    ws.merge_cells('A5:N5')
    ws['A5'] = f"L·ªãch tr·ª±c tu·∫ßn ng√†y {start.strftime('%d/%m/%Y')} ƒë·∫øn ng√†y {end.strftime('%d/%m/%Y')}"

    # --- D√≤ng ti√™u ƒë·ªÅ b·∫£ng b·∫Øt ƒë·∫ßu t·ª´ d√≤ng 7 ---
    start_row = 7
    header = ['H·ªç t√™n', 'Ch·ª©c danh', 'Khoa'] + [d.strftime('%d/%m') for d in date_range]
    ws.append(header)

    # D·ªØ li·ªáu t·ª´ng ng∆∞·ªùi
    for u in schedule_data.values():
        row = [u['name'], u['position'], u['department']]
        for d in date_range:
            row.append(u['shifts'].get(d, ''))  # N·∫øu kh√¥ng c√≥ ca ‚Üí ƒë·ªÉ tr·ªëng
        ws.append(row)

    # --- Ch√¢n trang ---
    last_row = ws.max_row + 2
    ws[f'A{last_row}'] = "N∆°i nh·∫≠n:"
    ws[f'A{last_row+1}'] = "- Ban Gi√°m ƒë·ªëc"
    ws[f'A{last_row+2}'] = "- C√°c khoa/ph√≤ng"
    ws[f'A{last_row+3}'] = "- ƒêƒÉng website"
    ws[f'A{last_row+4}'] = "- L∆∞u: VP, KH-CNTT"

    ws.merge_cells(start_row=last_row, start_column=5, end_row=last_row, end_column=7)
    ws.cell(row=last_row, column=5).value = "Ng∆∞·ªùi l·∫≠p b·∫£ng"
    ws.merge_cells(start_row=last_row, start_column=10, end_row=last_row, end_column=12)
    ws.cell(row=last_row, column=10).value = "GI√ÅM ƒê·ªêC"

    ws.cell(row=last_row+1, column=5).value = "(K√Ω, ghi r√µ h·ªç t√™n)"
    ws.cell(row=last_row+1, column=10).value = "(K√Ω, ghi r√µ h·ªç t√™n)"

    # --- Xu·∫•t file ---
    stream = BytesIO()
    wb.save(stream)
    stream.seek(0)

    return send_file(stream, as_attachment=True, download_name="lichtruc_dangngang.xlsx")

@app.route('/bang-cham-cong')
def bang_cham_cong():
    from datetime import datetime, timedelta, date
    from sqlalchemy import or_

    user_role = session.get('role')
    user_dept = session.get('department')

    today = datetime.today()
    start_date = request.args.get('start', today.replace(day=1).strftime('%Y-%m-%d'))
    end_date = request.args.get('end', today.strftime('%Y-%m-%d'))

    raw_department = request.args.get('department', '').strip()

    # Cho ph√©p admin v√† admin1 xem t·∫•t c·∫£ khoa
    if user_role in ['admin', 'admin1']:
        selected_department = raw_department if raw_department else 'T·∫•t c·∫£'
        if raw_department:
            query = User.query.filter(User.department == raw_department)
        else:
            query = User.query
    else:
        selected_department = user_dept
        query = User.query.filter(User.department == selected_department)

    selected_contract = request.args.get('contract_type', '')
    print_filter = request.args.get('print_filter') == 'yes'

    start = datetime.strptime(start_date, '%Y-%m-%d').date()
    end = datetime.strptime(end_date, '%Y-%m-%d').date()
    days_in_range = [start + timedelta(days=i) for i in range((end - start).days + 1)]

    if selected_contract:
        if selected_contract.lower() == "h·ª£p ƒë·ªìng":
            query = query.filter(or_(
                User.contract_type.ilike("h·ª£p ƒë·ªìng%"),
                User.contract_type.ilike("%h·ª£p ƒë·ªìng"),
                User.contract_type.ilike("%h·ª£p ƒë·ªìng%")
            ))
        else:
            query = query.filter(User.contract_type.ilike(selected_contract))

    priority_order = ['Gƒê', 'PGƒê', 'TK', 'TP', 'PTK', 'PTP', 'BS', 'BSCK1', 'BSCK2', 'ƒêDT', 'KTVT', 'KTV', 'ƒêD', 'NV', 'HL', 'BV']

    def sort_by_position(user):
        position = (user.position or '').upper().strip()
        for i, p in enumerate(priority_order):
            if position.startswith(p):
                return i
        return len(priority_order)

    users = query.filter(User.role != 'admin').all()
    users = sorted(users, key=sort_by_position)

    schedules = Schedule.query.join(Shift).filter(
        Schedule.user_id.in_([u.id for u in users]),
        Schedule.work_date.between(start, end)
    ).all()

    schedule_map = {}
    summary = {user.id: {'kl': 0, 'tg': 0, '100': 0, 'bhxh': 0} for user in users}
    used_keys = set()

    for s in schedules:
        key = (s.user_id, s.work_date)
        if key in used_keys:
            continue
        used_keys.add(key)

        code = s.shift.code.upper() if s.shift and s.shift.code else 'X'
        schedule_map[key] = code

        # KL: Kh√¥ng l∆∞∆°ng
        if code == "KL":
            summary[s.user_id]['kl'] += 1

        # C√¥ng h∆∞·ªüng l∆∞∆°ng th·ªùi gian
        elif code.startswith("X") and not code.startswith("Xƒê") and not code.startswith("XƒêL") and code not in ["/X", "/NT"]:
            # Bao g·ªìm X, X1, X2, X3...
            summary[s.user_id]['tg'] += 1

        # N·ª≠a c√¥ng h∆∞·ªüng l∆∞∆°ng TG + n·ª≠a c√¥ng 100%
        elif code in ["/X", "/NT"]:
            summary[s.user_id]['tg'] += 0.5
            summary[s.user_id]['100'] += 0.5

        # C√¥ng 100% (ngh·ªâ b√π, ph√©p, h·ªôi ngh·ªã...)
        elif code in ["NB", "P", "H", "CT", "L", "NT", "PC", "NBL", "PT", "NBS", "NBC"]:
            summary[s.user_id]['100'] += 1

        # BHXH
        elif code in ["√î", "C√î", "DS", "TS", "TN"]:
            summary[s.user_id]['bhxh'] += 1

        # C√¥ng h∆∞·ªüng l∆∞∆°ng TG cho Xƒê v√† XƒêL c√°c lo·∫°i
        elif code.startswith("Xƒê") or code.startswith("XƒêL"):
            summary[s.user_id]['tg'] += 1

    holidays = [
        date(2025, 1, 1),
        date(2025, 4, 30),
        date(2025, 5, 1),
        date(2025, 9, 2),
    ]

    if user_role in ['admin', 'admin1']:
        departments = [d[0] for d in db.session.query(User.department).filter(User.department != None).distinct().all()]
    else:
        departments = [user_dept]

    now = datetime.today()
    month = start.month
    year = start.year

    return render_template("bang_cham_cong.html",
                           users=users,
                           departments=departments,
                           days_in_month=days_in_range,
                           schedule_map=schedule_map,
                           summary=summary,
                           holidays=holidays,
                           selected_department=selected_department,
                           selected_contract=selected_contract,
                           start_date=start_date,
                           end_date=end_date,
                           month=month,
                           year=year,
                           now=now)

@app.template_filter('break_code')
def break_code(code):
    if code and len(code) > 2:
        return code[:2] + '\n' + code[2:]
    return code

from flask import request, send_file
from models import User, Schedule

@app.route('/export-cham-cong')
def export_cham_cong():
    from datetime import datetime, timedelta
    from io import BytesIO
    import openpyxl
    from flask import send_file, request
    from sqlalchemy import or_

    # L·∫•y v√† x·ª≠ l√Ω tham s·ªë
    start_str = request.args.get('start', '').strip()
    end_str = request.args.get('end', '').strip()
    raw_department = request.args.get('department', '').strip()
    selected_contract = request.args.get('contract_type', '').strip().lower()

    # S·ª≠a l·ªói department=None t·ª´ URL
    if raw_department.lower() == 'none':
        raw_department = ''

    # S·ª≠a l·ªói ValueError do kho·∫£ng tr·∫Øng d∆∞
    start_date = datetime.strptime(start_str, "%Y-%m-%d").date()
    end_date = datetime.strptime(end_str, "%Y-%m-%d").date()
    days = [start_date + timedelta(days=i) for i in range((end_date - start_date).days + 1)]

    # L·ªçc nh√¢n vi√™n theo ƒëi·ªÅu ki·ªán
    query = User.query
    if raw_department:
        query = query.filter(User.department == raw_department)
    if selected_contract:
        if selected_contract == "h·ª£p ƒë·ªìng":
            query = query.filter(or_(
                User.contract_type.ilike("h·ª£p ƒë·ªìng%"),
                User.contract_type.ilike("%h·ª£p ƒë·ªìng"),
                User.contract_type.ilike("%h·ª£p ƒë·ªìng%")
            ))
        elif selected_contract == "bi√™n ch·∫ø":
            query = query.filter(User.contract_type.ilike("bi√™n ch·∫ø"))
    users = query.order_by(User.name).all()

    user_ids = [u.id for u in users]
    schedules = Schedule.query.join(Shift).filter(
        Schedule.user_id.in_(user_ids),
        Schedule.work_date.between(start_date, end_date)
    ).all()
    schedule_map = {(s.user_id, s.work_date): s.shift.code for s in schedules if s.shift and s.shift.code}

    def count_summary(uid):
        vals = [schedule_map.get((uid, d), '') for d in days]
        return {
            'kl': vals.count('KL'),
            'tg': sum(1 for c in vals if c in ["X", "/X", "Xƒê", "Xƒê16", "Xƒê24", "Xƒê2", "Xƒê3", "XƒêL16", "XƒêL24"] or c.startswith("Xƒê")),
            '100': sum(1 for c in vals if c in ["NB", "P", "H", "CT", "L", "NT", "PC", "NBL", "PT","NBS","NBC"]),
            'bhxh': sum(1 for c in vals if c in ["√î", "C√î", "DS", "TS", "TN"])
        }

    # T·∫°o file Excel
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "B·∫£ng ch·∫•m c√¥ng"

    # ƒê·∫ßu trang
    ws.append(["B·ªÜNH VI·ªÜN NHI T·ªàNH GIA LAI"])
    ws.append(["PH√íNG T·ªî CH·ª®C - HCQT"])
    ws.append(["C·ªòNG H√íA X√É H·ªòI CH·ª¶ NGHƒ®A VI·ªÜT NAM"])
    ws.append(["ƒê·ªôc l·∫≠p - T·ª± do - H·∫°nh ph√∫c"])
    ws.append([""])
    ws.append([f"B·∫¢NG CH·∫§M C√îNG TH√ÅNG {start_date.month} NƒÇM {start_date.year}"])
    ws.append([f"Khoa/Ph√≤ng: {raw_department or 'TO√ÄN VI·ªÜN'}"])
    ws.append([f"Lo·∫°i h·ª£p ƒë·ªìng: {selected_contract.upper() if selected_contract else 'T·∫§T C·∫¢'}"])
    ws.append([""])
    
    header1 = ['STT', 'H·ªç v√† t√™n', 'Ch·ª©c danh'] + [d.strftime('%d') for d in days] + ['S·ªë c√¥ng kh√¥ng h∆∞·ªüng l∆∞∆°ng', 'S·ªë c√¥ng h∆∞·ªüng l∆∞∆°ng TG', 'S·ªë c√¥ng ngh·ªâ vi·ªác 100%', 'S·ªë c√¥ng BHXH']
    header2 = ['', '', ''] + ['CN' if d.weekday() == 6 else f"T{d.weekday() + 1}" for d in days] + ['', '', '', '']
    ws.append(header1)
    ws.append(header2)

    for idx, u in enumerate(users, start=1):
        row = [idx, u.name, u.position]
        row += [schedule_map.get((u.id, d), '') for d in days]
        s = count_summary(u.id)
        row += [s['kl'], s['tg'], s['100'], s['bhxh']]
        ws.append(row)

    # Ch√¢n trang
    ws.append([])
    footer = ['N∆°i nh·∫≠n:', '', '', 'Ng∆∞·ªùi l·∫≠p']
    if raw_department:
        footer.append("Tr∆∞·ªüng khoa" if "khoa" in raw_department.lower() else "Tr∆∞·ªüng ph√≤ng")
    else:
        footer.append("")
    footer += ["Ph√≤ng TC - HCQT", "Gi√°m ƒë·ªëc"]
    ws.append(footer)

    # DEBUG LOG
    print("‚úîÔ∏è T·ªïng s·ªë nh√¢n vi√™n:", len(users))
    print("‚úîÔ∏è T·ªïng ca tr·ª±c l·∫•y ƒë∆∞·ª£c:", len(schedules))
    print("‚úîÔ∏è S·ªë d√≤ng schedule_map:", len(schedule_map))

    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return send_file(output, as_attachment=True, download_name="bang_cham_cong.xlsx")

# ====================== TIMESHEET 2 - HELPERS & ROUTES ======================
from models import db
from models.user import User
from models.shift import Shift
from models.schedule import Schedule
from models.timesheet2 import Timesheet2, Timesheet2Entry
# ====================== TIMESHEET 2 - HELPERS & ROUTES ======================
import re
from io import BytesIO
from datetime import datetime, timedelta, date
import openpyxl
from flask import request, session, redirect, render_template, send_file

# ========= TIMESHEET2 ‚Äì RECALC USING YOUR CODE MAP =========
from collections import defaultdict
# ·ªû ƒë·∫ßu app.py (khu import)
try:
    from sqlalchemy.dialects.postgresql import insert as pg_insert
except Exception:
    pg_insert = None  # ch·∫°y ƒë∆∞·ª£c c·∫£ khi kh√¥ng d√πng Postgres

# ----- (gi·ªØ NGUY√äN c√°c h·∫±ng & h√†m b·∫°n ƒë√£ cung c·∫•p) -----
SHIFT_NAME_TO_CODES = {
    'l√†m ng√†y': ['X'],
    'tr·ª±c 24h': ['Xƒê24'],
    'tr·ª±c 16h': ['Xƒê16'],
    'tr·ª±c ƒë√™m': ['Xƒê'],
    'tr·ª±c th∆∞·ªùng tr√∫': ['XƒêT'],
    'ngh·ªâ tr·ª±c': ['NT'],
    'ngh·ªâ b√π': ['NB'],
}
_CODE_RE = re.compile(r'^/?[A-Zƒê∆†∆Ø]{1,4}[0-9]{0,3}%?$')

def _normalize_code(s: str) -> str:
    s = (s or '').strip().upper()
    if not s:
        return ''
    if s.startswith('/'):
        body = s[1:]
        body = re.sub(r'^XD(\d*)$', r'Xƒê\1', body)
        return '/' + body
    return re.sub(r'^XD(\d*)$', r'Xƒê\1', s)

def _codes_from_shift_name(name: str):
    s = (name or '').strip().lower()
    s = re.sub(r'\s+', ' ', s)
    for k, v in SHIFT_NAME_TO_CODES.items():
        if k in s:
            return v[:]
    if 'tr·ª±c' in s and '24' in s: return ['Xƒê24']
    if 'tr·ª±c' in s and '16' in s: return ['Xƒê16']
    if 'ƒë√™m'  in s:               return ['Xƒê']
    if 'th∆∞·ªùng tr√∫' in s:         return ['XƒêT']
    if 'l√†m ng√†y' in s or s == 'ng√†y': return ['X']
    if 'ngh·ªâ tr·ª±c' in s:          return ['NT']
    if 'ngh·ªâ b√π' in s:            return ['NB']
    return []

def ts2_codes_from_shift(shift):
    code_field = getattr(shift, 'code', None)
    if not code_field:
        return _codes_from_shift_name(getattr(shift, 'name', ''))

    raw = str(code_field).strip()
    raw = re.sub(r'(\\n|/n|\r\n|\r)', '\n', raw)
    parts = re.split(r'[\n,;]+', raw)

    codes = []
    for p in parts:
        p = p.strip()
        if not p:
            continue
        token = p.split()[0]
        c = _normalize_code(token)
        if _CODE_RE.match(c):
            codes.append(c)
        else:
            codes += _codes_from_shift_name(p)

    seen, uniq = set(), []
    for c in codes:
        if c not in seen:
            seen.add(c); uniq.append(c)
    return uniq

def _resolve_codes_in_cell(codes):
    seen, ordered = set(), []
    for c in codes:
        c = _normalize_code(c)
        if c and c not in seen:
            seen.add(c); ordered.append(c)
    if 'X' in ordered:
        ordered = [c for c in ordered if not c.startswith('Xƒê')]
    return ordered

# ==== Sort nh√¢n s·ª± theo ch·ª©c danh r·ªìi theo t√™n (d√πng chung) ====
PRIORITY_ORDER = [
    'Gƒê', 'PGƒê', 'TK', 'TP', 'PTK', 'PTP',
    'BS', 'BSCK1', 'BSCK2', 'ƒêDT', 'KTVT', 'KTV',
    'ƒêD', 'NV', 'HL', 'BV'
]

def _sort_by_position(u):
    """
    Tr·∫£ v·ªÅ tuple (ƒë·ªô ∆∞u ti√™n ch·ª©c danh, t√™n vi·∫øt th∆∞·ªùng) ƒë·ªÉ d√πng cho key c·ªßa sorted().
    """
    pos = (getattr(u, 'position', '') or '').upper().strip()
    for i, p in enumerate(PRIORITY_ORDER):
        if pos.startswith(p):
            return (i, (getattr(u, 'name', '') or '').lower())
    return (len(PRIORITY_ORDER), (getattr(u, 'name', '') or '').lower())


MAP_KL    = {'KL'}                                              # Kh√¥ng h∆∞·ªüng l∆∞∆°ng
MAP_100   = {'NB','P','H','CT','L','NT','PC','NBL','PT','NBS','NBC','P100'}  # 100%
MAP_BHXH  = {'√î','C√î','DS','TS','TN','·ªêM','OM'}                # BHXH
HALF_PAIR = {'/X','/NT'}                                        # 0.5 TG + 0.5 100%

def _is_tg(c: str) -> bool:
    c = _normalize_code(c)
    return (c == 'X') or c.startswith('Xƒê') or c.startswith('XƒêL') or c in {'XD','Xƒê'}

def _resolve_cell_to_counts(code_list):
    seen, codes = set(), []
    for raw in code_list:
        c = _normalize_code(raw)
        if c and c not in seen:
            seen.add(c); codes.append(c)

    if any(c in HALF_PAIR for c in codes):
        return {'kl': 0.0, 'tg': 0.5, '100': 0.5, 'bhxh': 0.0}
    if any(c in MAP_KL for c in codes):
        return {'kl': 1.0, 'tg': 0.0, '100': 0.0, 'bhxh': 0.0}
    if any(c in MAP_100 for c in codes):
        return {'kl': 0.0, 'tg': 0.0, '100': 1.0, 'bhxh': 0.0}
    if any(c in MAP_BHXH for c in codes):
        return {'kl': 0.0, 'tg': 0.0, '100': 0.0, 'bhxh': 1.0}
    if 'X' in codes or any(_is_tg(c) for c in codes):
        return {'kl': 0.0, 'tg': 1.0, '100': 0.0, 'bhxh': 0.0}
    return {'kl': 0.0, 'tg': 0.0, '100': 0.0, 'bhxh': 0.0}
# ----- /gi·ªØ NGUY√äN -----

# ----- Parse m√£ t·ª´ 1 √¥ (Timesheet2Entry) -----
def _codes_from_free_text(txt: str):
    if not txt:
        return []
    raw = re.sub(r'(\\n|/n|\r\n|\r)', '\n', str(txt))
    parts = re.split(r'[\n,;]+', raw)
    codes = []
    for p in parts:
        token = _normalize_code(p.split()[0] if p else '')
        if token and _CODE_RE.match(token):
            codes.append(token)
        else:
            # n·∫øu user g√µ "tr·ª±c 24h", "l√†m ng√†y"‚Ä¶ th√¨ map qua
            codes += _codes_from_shift_name(p)
    return codes

def _codes_from_entry(e, shift_by_id=None):
    """
    Tr·∫£ v·ªÅ list m√£ c·ªßa 1 √¥:
      - ∆∞u ti√™n text trong √¥ (code/value/note‚Ä¶)
      - n·∫øu c√≥ shift_id v√† c√≥ b·∫£ng Shift: b·ªï sung theo ts2_codes_from_shift
    """
    texts = []
    for fld in ('code', 'value', 'note', 'text'):
        if hasattr(e, fld):
            v = getattr(e, fld) or ''
            if v:
                texts.append(v)
    codes = []
    for t in texts:
        codes += _codes_from_free_text(t)

    if shift_by_id and getattr(e, 'shift_id', None):
        sh = shift_by_id.get(e.shift_id)
        if sh:
            codes += ts2_codes_from_shift(sh)

    return _resolve_codes_in_cell(codes)

# ----- T√çNH L·∫†I 4 C·ªòT CHO 1 B·∫¢NG (sheet_id) -----
def t2_recalc_summary(sheet_id: int):
    """
    Tr·∫£: { user_id: {'kl':..., 'tg':..., '100':..., 'bhxh':...} }
    """
    # ƒë·ªïi import theo model th·ª±c t·∫ø c·ªßa b·∫°n
    from models.timesheet2 import Timesheet2Entry
    from models.shift import Shift

    # cache Shift (n·∫øu c√≥)
    try:
        shift_by_id = {s.id: s for s in Shift.query.all()}
    except Exception:
        shift_by_id = {}

    totals = defaultdict(lambda: {'kl': 0.0, 'tg': 0.0, '100': 0.0, 'bhxh': 0.0})

    entries = (Timesheet2Entry.query
               .filter(Timesheet2Entry.sheet_id == sheet_id)
               .all())

    for e in entries:
        codes = _codes_from_entry(e, shift_by_id=shift_by_id)
        c = _resolve_cell_to_counts(codes)
        u = getattr(e, 'user_id', None)
        if not u:
            continue
        totals[u]['kl']   += c['kl']
        totals[u]['tg']   += c['tg']
        totals[u]['100']  += c['100']
        totals[u]['bhxh'] += c['bhxh']

    return totals
# ========= /TIMESHEET2 ‚Äì RECALC =========

# ========================= INDEX =========================
@app.route('/timesheet2', methods=['GET', 'POST'])
def ts2_index():
    # Ph·∫£i ƒëƒÉng nh·∫≠p
    if 'user_id' not in session:
        return redirect('/login')

    role    = (session.get('role') or '').strip()
    my_dept = (session.get('department') or '').strip()
    is_admin = role in ('admin', 'admin1')  # manager KH√îNG ph·∫£i admin

    # --- Danh s√°ch khoa cho dropdown ---
    if is_admin:
        departments = [d[0] for d in db.session.query(User.department)
                       .filter(User.department.isnot(None))
                       .distinct().order_by(User.department).all()]
    else:
        # Manager/role kh√°c: ch·ªâ khoa c·ªßa ch√≠nh m√¨nh
        departments = [my_dept] if my_dept else []

    if request.method == 'POST':
        name = (request.form.get('name') or 'B·∫£ng ch·∫•m c√¥ng BHYT').strip()

        # Admin ƒë∆∞·ª£c ch·ªçn khoa; Manager b·ªã √©p theo khoa c·ªßa m√¨nh (b·ªè qua gi√° tr·ªã g·ª≠i l√™n)
        if is_admin:
            department = (request.form.get('department') or my_dept).strip()
        else:
            department = my_dept

        if not department:
            return "Ch∆∞a c·∫•u h√¨nh khoa/ph√≤ng cho t√†i kho·∫£n.", 400

        start_date = datetime.strptime(request.form['start_date'], '%Y-%m-%d').date()
        end_date   = datetime.strptime(request.form['end_date'],   '%Y-%m-%d').date()

        sheet = Timesheet2(
            name=name,
            department=department,
            start_date=start_date,
            end_date=end_date,
            created_by=session.get('user_id')  # n·∫øu model c√≥ c·ªôt n√†y
        )
        db.session.add(sheet)
        db.session.commit()
        return redirect(f'/timesheet2/{sheet.id}')

    # --- L·ªçc danh s√°ch theo quy·ªÅn ---
    q = Timesheet2.query.order_by(Timesheet2.created_at.desc())
    if not is_admin:
        q = q.filter(Timesheet2.department == my_dept)
    sheets = q.all()

    return render_template(
        'timesheet2/index.html',
        sheets=sheets,
        departments=departments,
        role=role,
        user_dept=my_dept
    )

# ========== SAO CH√âP T·ª™ SCHEDULE (g·ªôp m√£ 1 √¥ = 1 d√≤ng + UPSERT) ==========
@app.route('/timesheet2/create-from-schedule', methods=['POST'])
def ts2_create_from_schedule():
    role = session.get('role')
    my_dept = session.get('department')

    department = request.form['department']
    if role not in ('admin', 'admin1','manager') and department != my_dept:
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o b·∫£ng cho khoa n√†y.", 403

    start_date = datetime.strptime(request.form['start_date'], '%Y-%m-%d').date()
    end_date   = datetime.strptime(request.form['end_date'],   '%Y-%m-%d').date()
    name = (request.form.get('name') or 'B·∫£ng ch·∫•m c√¥ng BHYT (sao ch√©p)').strip()

    sheet = Timesheet2(name=name, department=department,
                       start_date=start_date, end_date=end_date)
    db.session.add(sheet)
    db.session.flush()

    q = (db.session.query(Schedule, User, Shift)
         .join(User, Schedule.user_id == User.id)
         .join(Shift, Schedule.shift_id == Shift.id)
         .filter(User.department == department)
         .filter(Schedule.work_date >= start_date, Schedule.work_date <= end_date))

    from collections import defaultdict
    bucket = defaultdict(list)   # (uid, date) -> list codes

    for s, u, sh in q:
        if not (u and sh):
            continue
        codes = ts2_codes_from_shift(sh)
        if not codes:
            continue
        for c in codes:
            bucket[(u.id, s.work_date)].append(c)

    # --- G·ªòP M√É THEO √î & UPSERT 1 D√íNG/√î ---
    rows = []  # list[dict]: 1 row cho m·ªói (uid, work_date)
    for (uid, wdate), codes in bucket.items():
        ordered = _resolve_codes_in_cell(codes)  # ∆Øu ti√™n X, lo·∫°i Xƒê*
        code_text = '\n'.join(_normalize_code(c) for c in ordered)  # 1 √¥ = 1 d√≤ng
        rows.append({
            "sheet_id": sheet.id,
            "user_id": uid,
            "work_date": wdate,
            "code": code_text,
            "deleted": False
        })

    if rows:
        backend = (db.engine.url.get_backend_name() or "").lower()
        if pg_insert and backend.startswith('postgres'):
            stmt = pg_insert(Timesheet2Entry).values(rows)
            stmt = stmt.on_conflict_do_update(
                index_elements=['sheet_id', 'user_id', 'work_date'],
                set_={'code': stmt.excluded.code, 'deleted': False}
            )
            db.session.execute(stmt)
        else:
            # Fallback cho non‚ÄëPostgres: x√≥a √¥ trong kho·∫£ng ng√†y r·ªìi ch√®n l·∫°i 1 d√≤ng/√¥
            Timesheet2Entry.query.filter(
                Timesheet2Entry.sheet_id == sheet.id,
                Timesheet2Entry.work_date >= start_date,
                Timesheet2Entry.work_date <= end_date
            ).delete(synchronize_session=False)
            db.session.bulk_insert_mappings(Timesheet2Entry, rows)

    db.session.commit()
    return redirect(f'/timesheet2/{sheet.id}')

from flask import send_from_directory
import os
@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', mimetype='image/vnd.microsoft.icon')

# ========================= VIEW =========================
def _norm_contract_type(s: str) -> str:
    s = (s or '').strip().lower()
    if s in ('bc','bi√™n ch·∫ø','bien che','biench√©','bi√™nch·∫ø'):
        return 'bienche'
    if s.startswith('hƒë') or 'h·ª£p' in s or 'hop dong' in s or 'hƒëlƒë' in s:
        return 'hopdong'
    return 'khac'

@app.route('/timesheet2/<int:sheet_id>')
def ts2_view(sheet_id):
    sheet = Timesheet2.query.get_or_404(sheet_id)
    if session.get('role') not in ('admin','admin1', 'manager') and sheet.department != session.get('department'):
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p b·∫£ng n√†y.", 403

    # --- L·ªçc lo·∫°i h·ª£p ƒë·ªìng (gi·ªëng b·∫£ng ch√≠nh) ---
    contract_type = (request.args.get('contract_type') or 'all').strip().lower()
    label_map = {'all':'LO·∫†I H·ª¢P ƒê·ªíNG','bienche':'BI√äN CH·∫æ','hopdong':'H·ª¢P ƒê·ªíNG'}
    contract_header_text = label_map.get(contract_type, 'LO·∫†I H·ª¢P ƒê·ªíNG')

    all_users = User.query.filter_by(department=sheet.department)\
                          .filter(User.role != 'admin').all()
    if contract_type in ('bienche','hopdong'):
        users = [u for u in all_users if _norm_contract_type(getattr(u, 'contract_type', '')) == contract_type]
    else:
        users = list(all_users)
    users = sorted(users, key=_sort_by_position)

    # --- D·∫£i ng√†y ---
    days = []
    cur = sheet.start_date
    while cur <= sheet.end_date:
        days.append(cur)
        cur += timedelta(days=1)

    # --- Ng√†y L·ªÖ ƒë·ªÉ b√¥i m√†u (01/01, 30/04, 01/05, 02/09) ---
    def _year_holidays(y: int):
        return {date(y,1,1), date(y,4,30), date(y,5,1), date(y,9,2)}
    holiday_set = set()
    y = sheet.start_date.year
    while y <= sheet.end_date.year:
        holiday_set |= _year_holidays(y)
        y += 1
    holiday_keys = {d.strftime('%Y-%m-%d') for d in days if d in holiday_set}

    # --- Gom entries & t√≠nh t·ªïng 4 c·ªôt ---
    from collections import defaultdict
    cell = defaultdict(list)
    for e in Timesheet2Entry.query.filter_by(sheet_id=sheet.id, deleted=False).all():
        cell[(e.user_id, e.work_date)].append(e)

    summary_by_user = {}
    for u in users:
        totals = {'kl':0, 'tg':0, '100':0, 'bhxh':0}
        for d in days:
            items = cell.get((u.id, d), [])
            raw = []
            for it in items:
                txt = re.sub(r'(\\n|/n|\r\n|\r)', '\n', (it.code or '').strip())
                raw += [p.strip() for p in txt.split('\n') if p.strip()]
            cnt = _resolve_cell_to_counts(raw)
            totals['kl']   += cnt['kl']
            totals['tg']   += cnt['tg']
            totals['100']  += cnt['100']
            totals['bhxh'] += cnt['bhxh']
        summary_by_user[u.id] = (float(totals['kl']), float(totals['tg']),
                                 float(totals['100']), float(totals['bhxh']))

    contract_options = [('all','T·∫•t c·∫£'), ('bienche','Bi√™n ch·∫ø'), ('hopdong','H·ª£p ƒë·ªìng')]

    return render_template('timesheet2/view.html',
                           sheet=sheet, users=users, days=days,
                           cell=cell, summary_by_user=summary_by_user,
                           holiday_keys=holiday_keys,
                           contract_type=contract_type,
                           contract_options=contract_options,
                           contract_header_text=contract_header_text)

# --- IN B·∫¢NG CH·∫§M C√îNG (A4 ngang) ---
@app.route('/timesheet2/<int:sheet_id>/print')
def ts2_print(sheet_id):
    sheet = Timesheet2.query.get_or_404(sheet_id)
    if session.get('role') not in ('admin','admin1', 'manager') and sheet.department != session.get('department'):
        return "Kh√¥ng c√≥ quy·ªÅn.", 403

    # D·∫£i ng√†y
    days = []
    cur = sheet.start_date
    while cur <= sheet.end_date:
        days.append(cur)
        cur += timedelta(days=1)

    # Nh·∫≠n tham s·ªë l·ªçc
    ct = (request.args.get('contract_type') or '').strip().lower()   # 'hopdong' | 'bienche' | ''
    ct_col = getattr(User, 'contract_type', None)  # t√™n c·ªôt c·ªßa b·∫°n, vd 'contract_type'

    # L·∫•y user theo khoa + l·ªçc lo·∫°i h·ª£p ƒë·ªìng (n·∫øu c√≥)
    users_q = User.query.filter_by(department=sheet.department).filter(User.role != 'admin')
    if ct_col is not None and ct in ('hopdong', 'bienche'):
        # chu·∫©n ho√° v·ªÅ lowercase ƒë·ªÉ so kh·ªõp ‚Äúh·ª£p ƒë·ªìng/bi√™n ch·∫ø‚Äù
        if ct == 'hopdong':
            users_q = users_q.filter(db.func.lower(ct_col).contains('h·ª£p'))
        else:  # bienche
            users_q = users_q.filter(db.func.lower(ct_col).contains('bi√™n'))
    users = sorted(users_q.all(), key=_sort_by_position)

    # Gom entries theo (user_id, date)
    entries = Timesheet2Entry.query.filter_by(sheet_id=sheet.id, deleted=False).all()
    from collections import defaultdict
    cell = defaultdict(list)
    for e in entries:
        cell[(e.user_id, e.work_date)].append(e)

    # T√≠nh t·ªïng 4 c·ªôt
    summary_by_user = {}
    for u in users:
        totals = {'kl':0, 'tg':0, '100':0, 'bhxh':0}
        for d in days:
            items = cell.get((u.id, d), [])
            raw_codes = []
            for it in items:
                txt = re.sub(r'(\\n|/n|\r\n|\r)', '\n', (it.code or '').strip())
                raw_codes += [p.strip() for p in txt.split('\n') if p.strip()]
            cnt = _resolve_cell_to_counts(raw_codes)
            totals['kl']   += cnt['kl']
            totals['tg']   += cnt['tg']
            totals['100']  += cnt['100']
            totals['bhxh'] += cnt['bhxh']
        summary_by_user[u.id] = (float(totals['kl']), float(totals['tg']),
                                 float(totals['100']), float(totals['bhxh']))

    # Nh√£n ‚ÄúBI√äN CH·∫æ/H·ª¢P ƒê·ªíNG‚Äù ƒë·∫∑t trong √¥ ph·∫ßn ti√™u ƒë·ªÅ b√™n tr√°i c·ªßa b·∫£ng
    contract_label = ('H·ª¢P ƒê·ªíNG' if ct == 'hopdong'
                      else 'BI√äN CH·∫æ' if ct == 'bienche'
                      else 'LO·∫†I H·ª¢P ƒê·ªíNG')

    # Ch√¢n k√Ω: ph√≤ng/khoa
    manager_label = 'TR∆Ø·ªûNG KHOA' if (sheet.department and 'khoa' in sheet.department.lower()) else 'TR∆Ø·ªûNG PH√íNG'

    today = datetime.today().date()
    return render_template('timesheet2/print.html',
                           sheet=sheet, users=users, days=days,
                           cell=cell, summary_by_user=summary_by_user,
                           contract_label=contract_label, manager_label=manager_label,
                           today=today)

# ========== C·∫¨P NH·∫¨T 1 √î (g·ªôp nhi·ªÅu m√£; UPSERT 1 d√≤ng/√¥) ==========
@app.route('/timesheet2/<int:sheet_id>/cell', methods=['POST'])
def timesheet2_update_cell(sheet_id):
    sheet = Timesheet2.query.get_or_404(sheet_id)
    if session.get('role') not in ('admin', 'admin1', 'manager') and sheet.department != session.get('department'):
        return {"ok": False, "msg": "Kh√¥ng c√≥ quy·ªÅn"}, 403

    # Parse body an to√†n
    data = request.get_json(silent=True) or (request.form.to_dict() if request.form else {})
    try:
        user_id   = int(data.get('user_id'))
        work_date = data.get('work_date')
        code_raw  = (data.get('code') or '').strip()
    except Exception:
        return {"ok": False, "msg": "Thi·∫øu ho·∫∑c sai tham s·ªë"}, 400
    if not user_id or not work_date:
        return {"ok": False, "msg": "Thi·∫øu user_id ho·∫∑c work_date"}, 400

    work_date = datetime.strptime(work_date, '%Y-%m-%d').date()

    # Chu·∫©n ho√° & g·ªôp m√£ th√†nh 1 chu·ªói
    if code_raw:
        code_raw = re.sub(r'(\\n|/n|\r\n|\r)', '\n', code_raw)
        parts = [p.strip() for p in code_raw.split('\n') if p.strip()]
        resolved = _resolve_codes_in_cell(parts)
        code_text = '\n'.join(_normalize_code(p) for p in resolved)
    else:
        code_text = ''

    # UPSERT 1 d√≤ng/√¥ (Postgres) ho·∫∑c replace (SQLite)
    backend = (db.engine.url.get_backend_name() or "").lower()
    if pg_insert and backend.startswith('postgres'):
        stmt = pg_insert(Timesheet2Entry).values({
            "sheet_id": sheet.id,
            "user_id": user_id,
            "work_date": work_date,
            "code": code_text,
            "deleted": False
        }).on_conflict_do_update(
            index_elements=['sheet_id', 'user_id', 'work_date'],
            set_={'code': code_text, 'deleted': False}
        )
        db.session.execute(stmt)
    else:
        Timesheet2Entry.query.filter_by(
            sheet_id=sheet.id, user_id=user_id, work_date=work_date
        ).delete(synchronize_session=False)
        if code_text:
            db.session.add(Timesheet2Entry(
                sheet_id=sheet.id, user_id=user_id, work_date=work_date,
                code=code_text, deleted=False
            ))

    db.session.commit()
    return {"ok": True}

# ========== Th√™m / S·ª≠a / Xo√° 1 CHIP (g·ªôp v√†o 1 d√≤ng/√¥) ==========
@app.route('/timesheet2/<int:sheet_id>/item/add', methods=['POST'])
def ts2_add_item(sheet_id):
    sheet = Timesheet2.query.get_or_404(sheet_id)
    if session.get('role') not in ('admin', 'admin1', 'manager') and sheet.department != session.get('department'):
        return {"ok": False, "msg": "Kh√¥ng c√≥ quy·ªÅn"}, 403

    data = request.get_json(force=True)
    user_id   = int(data['user_id'])
    work_date = datetime.strptime(data['work_date'], '%Y-%m-%d').date()
    raw = (data.get('code') or '').strip()
    new_code = _normalize_code(raw)
    if not new_code:
        return {"ok": False, "msg": "K√Ω hi·ªáu tr·ªëng!"}, 400

    # L·∫•y d√≤ng hi·ªán t·∫°i c·ªßa √¥ (1 d√≤ng/√¥)
    row = Timesheet2Entry.query.filter_by(
        sheet_id=sheet.id, user_id=user_id, work_date=work_date
    ).first()

    if not row:
        # t·∫°o m·ªõi
        db.session.add(Timesheet2Entry(
            sheet_id=sheet.id, user_id=user_id, work_date=work_date,
            code=new_code, deleted=False
        ))
        db.session.commit()
        return {"ok": True, "code": new_code}

    # ƒë√£ c√≥ -> gh√©p m√£ v√†o cu·ªëi, lo·∫°i tr√πng / ∆∞u ti√™n X
    existing = []
    if row.code and row.code.strip():
        txt = re.sub(r'(\\n|/n|\r\n|\r)', '\n', row.code.strip())
        existing = [p.strip() for p in txt.split('\n') if p.strip()]

    # h·ª£p nh·∫•t
    parts = existing + [new_code]
    resolved = _resolve_codes_in_cell(parts)
    row.code = '\n'.join(_normalize_code(p) for p in resolved)
    row.deleted = False
    db.session.commit()
    return {"ok": True, "code": new_code}

@app.route('/timesheet2/<int:sheet_id>/item/<int:item_id>/update', methods=['POST'])
def ts2_update_item(sheet_id, item_id):
    sheet = Timesheet2.query.get_or_404(sheet_id)
    if session.get('role') not in ('admin', 'admin1', 'manager') and sheet.department != session.get('department'):
        return {"ok": False, "msg": "Kh√¥ng c√≥ quy·ªÅn"}, 403

    e = Timesheet2Entry.query.get_or_404(item_id)
    if e.sheet_id != sheet.id:
        return {"ok": False, "msg": "Sai sheet"}, 400

    data = request.get_json(force=True)
    raw = (data.get('code') or '').strip()
    code = _normalize_code(raw)
    if not code:
        return {"ok": False, "msg": "K√Ω hi·ªáu tr·ªëng!"}, 400
    e.code = code
    db.session.commit()
    return {"ok": True, "id": e.id, "code": e.code}

@app.route('/timesheet2/<int:sheet_id>/item/<int:item_id>/delete', methods=['POST'])
def ts2_delete_item(sheet_id, item_id):
    sheet = Timesheet2.query.get_or_404(sheet_id)
    if session.get('role') not in ('admin', 'admin1', 'manager') and sheet.department != session.get('department'):
        return {"ok": False, "msg": "Kh√¥ng c√≥ quy·ªÅn"}, 403

    e = Timesheet2Entry.query.get_or_404(item_id)
    if e.sheet_id != sheet.id:
        return {"ok": False, "msg": "Sai sheet"}, 400

    e.deleted = True
    db.session.commit()
    return {"ok": True}

# ========== X√ìA TO√ÄN D√íNG C·ª¶A 1 NH√ÇN S·ª∞ ==========
@app.route('/timesheet2/<int:sheet_id>/row/delete', methods=['POST'])
def ts2_delete_row(sheet_id):
    sheet = Timesheet2.query.get_or_404(sheet_id)
    if session.get('role') not in ('admin', 'admin1', 'manager') and sheet.department != session.get('department'):
        return {"ok": False, "msg": "Kh√¥ng c√≥ quy·ªÅn"}, 403

    data = request.get_json(force=True)
    user_id = int(data['user_id'])
    Timesheet2Entry.query.filter_by(sheet_id=sheet.id, user_id=user_id)\
                         .update({"deleted": True, "code": ''})
    db.session.commit()
    return {"ok": True}

# ========== XO√Å C·∫¢ B·∫¢NG (duy nh·∫•t) ==========
@app.route('/timesheet2/<int:sheet_id>/delete', methods=['POST'])
def ts2_delete_sheet(sheet_id):
    sheet = Timesheet2.query.get_or_404(sheet_id)
    if session.get('role') not in ('admin','admin1', 'manager') and sheet.department != session.get('department'):
        return {"ok": False, "msg": "Kh√¥ng c√≥ quy·ªÅn"}, 403
    Timesheet2Entry.query.filter_by(sheet_id=sheet.id).delete()
    db.session.delete(sheet)
    db.session.commit()
    return {"ok": True}

# ========== D·ªåN/CHU·∫®N HO√Å SHEET (g·ªôp nhi·ªÅu d√≤ng/√¥ th√†nh 1) ==========
@app.route('/timesheet2/<int:sheet_id>/normalize', methods=['POST'])
def ts2_normalize_sheet(sheet_id):
    sheet = Timesheet2.query.get_or_404(sheet_id)
    if session.get('role') not in ('admin', 'admin1', 'manager') and sheet.department != session.get('department'):
        return {"ok": False, "msg": "Kh√¥ng c√≥ quy·ªÅn"}, 403

    from collections import defaultdict
    cell = defaultdict(list)
    entries = Timesheet2Entry.query.filter_by(sheet_id=sheet.id, deleted=False).all()
    for e in entries:
        cell[(e.user_id, e.work_date)].append(e)

    changed = 0
    for key, items in cell.items():
        raw_codes = []
        for it in items:
            txt = re.sub(r'(\\n|/n|\r\n|\r)', '\n', (it.code or '').strip())
            raw_codes += [p.strip() for p in txt.split('\n') if p.strip()]
            it.deleted = True

        resolved = _resolve_codes_in_cell(raw_codes)
        db.session.add(Timesheet2Entry(
            sheet_id=sheet.id, user_id=key[0], work_date=key[1],
            code='\n'.join(_normalize_code(c) for c in resolved), deleted=False
        ))
        changed += 1

    db.session.commit()
    return {"ok": True, "changed": changed}

# ========== EXPORT EXCEL ==========
@app.route('/timesheet2/<int:sheet_id>/export')
def ts2_export(sheet_id):
    sheet = Timesheet2.query.get_or_404(sheet_id)
    if session.get('role') not in ('admin', 'admin1', 'manager') and sheet.department != session.get('department'):
        return "Kh√¥ng c√≥ quy·ªÅn.", 403

    # D·∫£i ng√†y
    days = []
    cur = sheet.start_date
    while cur <= sheet.end_date:
        days.append(cur)
        cur += timedelta(days=1)

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = 'Bang cham cong BHYT'
    header = ['STT', 'H·ªç v√† t√™n', 'Ch·ª©c v·ª•'] + [d.strftime('%d') for d in days]
    ws.append(header)

    users_q = User.query.filter_by(department=sheet.department).filter(User.role != 'admin')
    users = sorted(users_q.all(), key=_sort_by_position)
    entries = Timesheet2Entry.query.filter_by(sheet_id=sheet.id, deleted=False).all()

    from collections import defaultdict
    m = defaultdict(list)
    for e in entries:
        if e.code and e.code.strip():
            txt = re.sub(r'(\\n|/n|\r\n|\r)', '\n', e.code.strip())
            for part in [p.strip() for p in txt.split('\n') if p.strip()]:
                m[(e.user_id, e.work_date)].append(_normalize_code(part))

    for idx, u in enumerate(users, start=1):
        row = [idx, u.name, (u.position or '')]
        for d in days:
            cell_codes = '\n'.join(m.get((u.id, d), []))
            row.append(cell_codes)
        ws.append(row)

    stream = BytesIO()
    wb.save(stream)
    stream.seek(0)
    return send_file(stream, as_attachment=True,
                     download_name=f"bang-cham-cong-bhyt-{sheet.id}.xlsx")
# ==================== H·∫æT PH·∫¶N TIMESHEET 2 ====================

from flask import render_template, request, send_file
from datetime import datetime, timedelta
from models import User, Shift, Schedule
import openpyxl
from io import BytesIO

@app.route('/report-all')
def report_all():
    start_str = request.args.get('start')
    end_str = request.args.get('end')

    if start_str and end_str:
        start_date = datetime.strptime(start_str, '%Y-%m-%d').date()
        end_date = datetime.strptime(end_str, '%Y-%m-%d').date()
    else:
        start_date = datetime.today().date()
        end_date = start_date + timedelta(days=6)

    schedules = Schedule.query.join(User).join(Shift).filter(
        Schedule.work_date.between(start_date, end_date),
        Schedule.shift_id != None,
        User.department != None
    ).order_by(User.department, Schedule.work_date).all()

    grouped = {}

    for s in schedules:
        shift_name = s.shift.name.strip().lower()

        # Ch·ªâ l·∫•y ca tr·ª±c th·∫≠t s·ª±
        if not shift_name.startswith('tr·ª±c'):
            continue

        dept = s.user.department.strip() if s.user.department else 'Kh√°c'
        key = s.work_date.strftime('%a %d/%m')
        position = s.user.position.strip() if s.user.position else ''
        name = s.user.name.strip()

        # G·∫Øn ch·ª©c v·ª• v√†o t√™n
        display_name = name if name.startswith(position) else f"{position}. {name}" if position else name

        # X√°c ƒë·ªãnh lo·∫°i ca
        if 'th∆∞·ªùng tr√∫' in shift_name:
            ca_text = 'Tr·ª±c th∆∞·ªùng tr√∫'
        elif '24' in shift_name:
            ca_text = 'Tr·ª±c 24h'
        elif '16' in shift_name:
            ca_text = 'Tr·ª±c 16h'
        elif '8' in shift_name:
            ca_text = 'Tr·ª±c 8h'
        else:
            ca_text = f"Tr·ª±c {int(s.shift.duration)}h"

        line = f"{display_name} ({ca_text})"

        grouped.setdefault(dept, {})
        grouped[dept].setdefault(key, [])
        grouped[dept][key].append((position, line))

    # Th·ª© t·ª± ∆∞u ti√™n ch·ª©c danh
    priority_order = ['Gƒê', 'PGƒê', 'TK', 'TP', 'PP', 'PTK', 'PK', 'BS', 'ƒêDT', 'ƒêD', 'KTV', 'NV']

    def get_priority(pos):
        pos = pos.upper() if pos else ''
        return priority_order.index(pos) if pos in priority_order else 999

    # S·∫Øp x·∫øp nh√¢n s·ª± trong t·ª´ng ng√†y theo ∆∞u ti√™n
    grouped_by_dept = {
        dept: {
            day: sorted(entries, key=lambda x: get_priority(x[0]))
            for day, entries in dept_data.items()
        }
        for dept, dept_data in grouped.items() if any(dept_data.values())
    }

    # S·∫Øp x·∫øp khoa: Ban gi√°m ƒë·ªëc tr∆∞·ªõc
    def sort_priority(name):
        name = name.lower()
        if 'gi√°m ƒë·ªëc' in name or 'ban gi√°m' in name:
            return '1_' + name
        elif 'khoa' in name:
            return '2_' + name
        else:
            return '3_' + name

    dept_ordered = sorted(grouped_by_dept.keys(), key=sort_priority)
    date_range = [start_date + timedelta(days=i) for i in range((end_date - start_date).days + 1)]

    return render_template(
        'report_all.html',
        grouped_by_dept=grouped_by_dept,
        dept_ordered=dept_ordered,
        date_range=date_range,
        start_date=start_date,
        end_date=end_date
    )

@app.route('/export-report-all')
def export_report_all():
    start_str = request.args.get('start')
    end_str = request.args.get('end')
    if start_str and end_str:
        start_date = datetime.strptime(start_str, '%Y-%m-%d').date()
        end_date = datetime.strptime(end_str, '%Y-%m-%d').date()
    else:
        start_date = datetime.today().date()
        end_date = start_date + timedelta(days=6)

    schedules = Schedule.query.join(User).join(Shift) \
        .filter(Schedule.work_date.between(start_date, end_date)) \
        .order_by(Schedule.work_date).all()

    grouped = {}
    for s in schedules:
        dept = s.user.department or 'Kh√°c'
        pos = s.user.position or ''
        key = (dept, pos)
        grouped.setdefault(key, {})
        day = s.work_date.strftime('%a %d/%m')
        grouped[key][day] = grouped[key].get(day, '') + f"{s.user.name} ({s.shift.name}); "

    date_range = [(start_date + timedelta(days=i)).strftime('%a %d/%m')
                  for i in range((end_date - start_date).days + 1)]

    wb = openpyxl.Workbook()
    ws = wb.active
    header = ['Khoa/Ph√≤ng', 'Ch·ª©c danh'] + date_range
    ws.append(header)

    for (dept, pos), days in grouped.items():
        row = [dept, pos] + [days.get(d, '') for d in date_range]
        ws.append(row)

    stream = BytesIO()
    wb.save(stream)
    stream.seek(0)
    return send_file(stream, as_attachment=True, download_name='lich_truc_toan_vien.xlsx')

from models.ca_config import CaConfiguration

from models.ca import Ca

@app.route('/cas', methods=['GET', 'POST'])
def manage_cas():
    if session.get('role') not in ['admin', 'manager']:
        return redirect('/')

    user_role = session.get('role')
    user_dept = session.get('department')

    if user_role == 'admin':
        departments = [d[0] for d in db.session.query(User.department).filter(User.department != None).distinct().all()]
        selected_department = request.args.get('department') or request.form.get('department') or (departments[0] if departments else None)
    else:
        departments = [user_dept]
        selected_department = user_dept

    if request.method == 'POST':
        new_ca = Ca(
            name=request.form.get('ca_name'),
            department=selected_department,
            doctor_id=request.form.get('doctor_id'),
            nurse1_id=request.form.get('nurse1_id'),
            nurse2_id=request.form.get('nurse2_id'),
        )
        db.session.add(new_ca)
        db.session.commit()
        return redirect(f"/cas?department={selected_department}")

    doctors = User.query.filter(User.position == 'BS', User.department == selected_department).all()
    nurses = User.query.filter(User.position == 'ƒêD', User.department == selected_department).all()
    cas = Ca.query.filter_by(department=selected_department).all()

    return render_template('cas.html',
                           departments=departments,
                           selected_department=selected_department,
                           doctors=doctors,
                           nurses=nurses,
                           cas=cas)

@app.route('/cas/delete/<int:ca_id>', methods=['POST'])
def delete_ca(ca_id):
    if session.get('role') not in ['admin', 'manager']:
        return "Kh√¥ng c√≥ quy·ªÅn."
    ca = Ca.query.get_or_404(ca_id)
    db.session.delete(ca)
    db.session.commit()
    return redirect(request.referrer or '/cas')


@app.route('/cas/edit/<int:ca_id>', methods=['GET', 'POST'])
def edit_ca(ca_id):
    if session.get('role') not in ['admin', 'manager']:
        return redirect('/')

    ca = Ca.query.get_or_404(ca_id)
    departments = [d[0] for d in db.session.query(User.department).filter(User.department != None).distinct().all()]
    doctors = User.query.filter_by(department=ca.department, position='BS').all()
    nurses = User.query.filter_by(department=ca.department, position='ƒêD').all()

    if request.method == 'POST':
        ca.name = request.form.get('ca_name')
        ca.doctor_id = request.form.get('doctor_id')
        ca.nurse1_id = request.form.get('nurse1_id')
        ca.nurse2_id = request.form.get('nurse2_id')
        db.session.commit()
        return redirect(f'/cas?department={ca.department}')

    return render_template('edit_ca.html', ca=ca, doctors=doctors, nurses=nurses, departments=departments)

from models.ca_config import CaConfiguration
from models.ca import Ca

@app.route('/generate-ca', methods=['GET', 'POST'])
def generate_ca_schedule_route():
    from models import Ca, Schedule, Shift, CaConfiguration, User

    selected_department = request.args.get('department') or request.form.get('department')
    model_type = request.form.get('model_type')
    start_date_str = request.form.get('start_date')
    end_date_str = request.form.get('end_date')

    # L·∫•y danh s√°ch khoa c√≥ trong h·ªá th·ªëng
    departments = [d[0] for d in db.session.query(User.department).filter(User.department != None).distinct().all()]
    selected_config = None
    if selected_department:
        selected_config = CaConfiguration.query.filter_by(department=selected_department).first()

    # N·∫øu l√† POST v√† ƒë·ªß d·ªØ li·ªáu th√¨ ti·∫øn h√†nh t·∫°o l·ªãch
    if request.method == 'POST' and selected_department and start_date_str and end_date_str:
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()
        days = (end_date - start_date).days + 1

        cas = Ca.query.filter_by(department=selected_department).all()
        shifts = Shift.query.all()

        if len(cas) < 3:
            flash("Ph·∫£i c√≥ √≠t nh·∫•t 3 ca ƒë·ªÉ ch·∫°y l·ªãch 2 ca 3 k√≠p", "danger")
            return redirect(request.url)

        # T·∫°o m√¥ h√¨nh 2 ca 3 k√≠p
        def pattern_2ca3kip(i):
            cycle = [
                [("Ca 1", "L√†m ng√†y"), ("Tr·ª±c Ca 2", "Tr·ª±c ƒë√™m"), ("Ca 3", "Ngh·ªâ")],
                [("Ca 3", "L√†m ng√†y"), ("Tr·ª±c Ca 1", "Tr·ª±c ƒë√™m"), ("Ca 2", "Ngh·ªâ")],
                [("Ca 2", "L√†m ng√†y"), ("Tr·ª±c Ca 3", "Tr·ª±c ƒë√™m"), ("Ca 1", "Ngh·ªâ")]
            ]
            return cycle[i % 3]

        assignments = []
        for i in range(days):
            current_date = start_date + timedelta(days=i)
            day_shift_name, night_shift_name = pattern_2ca3kip(i)

            day_shift = next((s for s in shifts if s.name.lower() == day_shift_name[0].lower()), None)
            night_shift = next((s for s in shifts if s.name.lower() == night_shift_name[0].lower()), None)

            if not day_shift or not night_shift:
                continue

            ca_day = cas[i % len(cas)]
            ca_night = cas[(i + 1) % len(cas)]

            # Ph√¢n c√¥ng ca ng√†y
            assignments.extend([
                Schedule(user_id=ca_day.doctor_id, shift_id=day_shift.id, work_date=current_date),
                Schedule(user_id=ca_day.nurse1_id, shift_id=day_shift.id, work_date=current_date),
                Schedule(user_id=ca_day.nurse2_id, shift_id=day_shift.id, work_date=current_date),
            ])

            # Ph√¢n c√¥ng ca ƒë√™m
            assignments.extend([
                Schedule(user_id=ca_night.doctor_id, shift_id=night_shift.id, work_date=current_date),
                Schedule(user_id=ca_night.nurse1_id, shift_id=night_shift.id, work_date=current_date),
                Schedule(user_id=ca_night.nurse2_id, shift_id=night_shift.id, work_date=current_date),
            ])

        db.session.add_all(assignments)
        db.session.commit()

        flash("T·∫°o l·ªãch tr·ª±c 2 ca 3 k√≠p th√†nh c√¥ng", "success")
        return redirect(url_for('view_schedule', department=selected_department,
                                start_date=start_date_str, end_date=end_date_str))

    # GET ho·∫∑c POST thi·∫øu th√¥ng tin -> hi·ªÉn th·ªã l·∫°i form
    return render_template(
        "generate_ca.html",
        department=selected_department,
        departments=departments,
        selected_config=selected_config,
        model_type=model_type,
        start_date=start_date_str,
        end_date=end_date_str
    )

@app.route('/configure-ca', methods=['GET', 'POST'])
def configure_ca():
    if session.get('role') not in ['admin', 'manager']:
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p."

    user_role = session.get('role')
    user_dept = session.get('department')

    if user_role == 'admin':
        departments = [d[0] for d in db.session.query(User.department).filter(User.department != None).distinct().all()]
    else:
        departments = [user_dept]

    selected_config = None
    message = None

    if request.method == 'POST':
        config_id = request.form.get('config_id')
        department = request.form['department']
        num_shifts = int(request.form['num_shifts'])
        cas_per_shift = int(request.form['cas_per_shift'])
        doctors_per_ca = int(request.form['doctors_per_ca'])
        nurses_per_ca = int(request.form['nurses_per_ca'])

        if config_id:
            config = CaConfiguration.query.get(int(config_id))
            if config:
                config.num_shifts = num_shifts
                config.cas_per_shift = cas_per_shift
                config.doctors_per_ca = doctors_per_ca
                config.nurses_per_ca = nurses_per_ca
                message = "C·∫≠p nh·∫≠t c·∫•u h√¨nh th√†nh c√¥ng."
        else:
            config = CaConfiguration(
                department=department,
                num_shifts=num_shifts,
                cas_per_shift=cas_per_shift,
                doctors_per_ca=doctors_per_ca,
                nurses_per_ca=nurses_per_ca
            )
            db.session.add(config)
            message = "ƒê√£ l∆∞u c·∫•u h√¨nh m·ªõi."

        db.session.commit()

    edit_id = request.args.get('edit_id')
    if edit_id:
        selected_config = CaConfiguration.query.get(int(edit_id))

    configs = CaConfiguration.query.all()
    return render_template(
        'configure_ca.html',
        departments=departments,
        configs=configs,
        selected_config=selected_config,
        message=message
    )

@app.route('/configure-ca/edit/<int:id>', methods=['GET', 'POST'])
def edit_ca_config(id):
    if session.get('role') not in ['admin', 'manager']:
        return redirect('/')
        
    config = CaConfiguration.query.get_or_404(id)
    departments = [d[0] for d in db.session.query(User.department).filter(User.department != None).distinct().all()]

    if request.method == 'POST':
        config.department = request.form['department']
        config.num_shifts = int(request.form['num_shifts'])
        config.cas_per_shift = int(request.form['cas_per_shift'])
        config.doctors_per_ca = int(request.form['doctors_per_ca'])
        config.nurses_per_ca = int(request.form['nurses_per_ca'])
        db.session.commit()
        return redirect('/configure-ca')

    return render_template('edit_ca_config.html', config=config, departments=departments)

@app.route('/delete-ca-config/<int:config_id>', methods=['POST'])
def delete_ca_config(config_id):
    if session.get('role') not in ['admin', 'manager']:
        return "Kh√¥ng c√≥ quy·ªÅn."

    config = CaConfiguration.query.get(config_id)
    if config:
        db.session.delete(config)
        db.session.commit()
        flash("ƒê√£ xo√° c·∫•u h√¨nh.")

    return redirect('/configure-ca')

from models.ca_config import CaConfiguration

@app.route('/clinic-rooms')
def clinic_rooms():
    rooms = ClinicRoom.query.all()
    return render_template('clinic_rooms.html', rooms=rooms)

@app.route('/clinic-rooms/add', methods=['POST'])
def add_clinic_room():
    name = request.form['name']
    description = request.form.get('description')
    db.session.add(ClinicRoom(name=name, description=description))
    db.session.commit()
    return redirect('/clinic-rooms')

@app.route('/clinic-rooms/delete/<int:room_id>')
def delete_clinic_room(room_id):
    room = ClinicRoom.query.get(room_id)
    db.session.delete(room)
    db.session.commit()
    return redirect('/clinic-rooms')

@app.route('/clinic-rooms/update/<int:room_id>', methods=['POST'])
def update_clinic_room(room_id):
    room = ClinicRoom.query.get(room_id)
    room.name = request.form['name']
    room.description = request.form.get('description')
    db.session.commit()
    return redirect('/clinic-rooms')

from collections import defaultdict

from flask import send_file, request
from openpyxl.styles import Alignment, Font
from io import BytesIO
from collections import defaultdict
from datetime import datetime, timedelta
from models import User, Shift, Schedule, ClinicRoom  # ƒê·∫£m b·∫£o b·∫°n c√≥ c√°c model n√†y
import re  # <== D√íNG C·∫¶N TH√äM

@app.route('/export-clinic-schedule')
def export_clinic_schedule():
    # B∆∞·ªõc 1: Nh·∫≠n tham s·ªë ng√†y
    start_str = request.args.get('start')
    end_str = request.args.get('end')
    if not start_str or not end_str:
        return "Thi·∫øu th√¥ng tin ng√†y", 400

    start_date = datetime.strptime(start_str, '%Y-%m-%d').date()
    end_date = datetime.strptime(end_str, '%Y-%m-%d').date()
    date_range = [start_date + timedelta(days=i) for i in range((end_date - start_date).days + 1)]

    # B∆∞·ªõc 2: L·∫•y d·ªØ li·ªáu t·ª´ database
    rooms = ClinicRoom.query.all()
    schedules = Schedule.query.join(User).join(Shift).filter(Schedule.work_date.between(start_date, end_date)).all()

    # B∆∞·ªõc 3: T·ªï ch·ª©c d·ªØ li·ªáu l·ªãch tr·ª±c
    clinic_schedule = {room.name: defaultdict(str) for room in rooms}
    user_positions = {}

    for s in schedules:
        user = s.user
        user_positions[user.name] = user.position
        shift_key = s.shift.name.lower().replace(" ", "")
        for room in rooms:
            room_key = room.name.lower().replace(" ", "")
            if room_key in shift_key:
                clinic_schedule[room.name][s.work_date] += f"{user.name}\n"
                break

    # B∆∞·ªõc 4: T·∫°o file Excel
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "L·ªãch ph√≤ng kh√°m"

    # D√≤ng ti√™u ƒë·ªÅ
    ws.cell(row=1, column=1, value="Ph√≤ng Kh√°m")
    for col, d in enumerate(date_range, start=2):
        ws.cell(row=1, column=col, value=d.strftime('%a %d/%m'))

    # N·ªôi dung t·ª´ng ph√≤ng
    for row_idx, (room, shifts) in enumerate(clinic_schedule.items(), start=2):
        ws.cell(row=row_idx, column=1, value=room)
        for col_idx, d in enumerate(date_range, start=2):
            raw = shifts[d].strip()
            formatted = []
            for name in raw.split("\n"):
                pos = user_positions.get(name, "").lower()
                prefix = "BS." if "bs" in pos or "b√°c" in pos else "ƒêD." if "ƒëd" in pos or "ƒëi·ªÅu" in pos else ""
                if name.strip():
                    formatted.append(f"{prefix} {name.strip()}")
            value = "\n".join(formatted)
            cell = ws.cell(row=row_idx, column=col_idx, value=value)
            cell.alignment = Alignment(wrap_text=True, vertical="top")

    # CƒÉn gi·ªØa d√≤ng ti√™u ƒë·ªÅ
    for col in ws[1]:
        col.alignment = Alignment(horizontal="center", vertical="center")
        col.font = Font(bold=True)

    # Xu·∫•t file
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return send_file(output, as_attachment=True, download_name="lich_phong_kham.xlsx")

@app.route('/change-password', methods=['GET', 'POST'])
def change_password():
    if 'user_id' not in session:
        return redirect('/login')

    user = db.session.get(User, session['user_id'])  # ‚úÖ D√≤ng n√†y ƒë√£ c·∫≠p 

    if request.method == 'POST':
        current_pw = request.form['current_password']
        new_pw = request.form['new_password']
        confirm_pw = request.form['confirm_password']

        if current_pw != user.password:
            flash("‚ùå M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng.", "danger")
        elif new_pw != confirm_pw:
            flash("‚ùå M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp.", "danger")
        else:
            user.password = new_pw
            db.session.commit()
            flash("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.", "success")
            return redirect('/')

    return render_template('change_password.html', user=user)

import re
from datetime import datetime, timedelta
from collections import defaultdict
from flask import render_template, request


@app.route('/print-clinic-schedule')
def print_clinic_schedule():
    from collections import defaultdict

    start_str = request.args.get('start')
    end_str = request.args.get('end')
    if not start_str or not end_str:
        return "Thi·∫øu th√¥ng tin ng√†y b·∫Øt ƒë·∫ßu ho·∫∑c k·∫øt th√∫c.", 400

    start_date = datetime.strptime(start_str, '%Y-%m-%d').date()
    end_date = datetime.strptime(end_str, '%Y-%m-%d').date()
    date_range = [start_date + timedelta(days=i) for i in range((end_date - start_date).days + 1)]

    # L·∫•y danh s√°ch ph√≤ng kh√°m
    all_rooms = ClinicRoom.query.all()
    rooms_dict = {room.name.lower(): room.name for room in all_rooms if "ti·∫øp ƒë√≥n" not in room.name.lower()}

    # Kh·ªüi t·∫°o d·ªØ li·ªáu l·ªãch (d√πng key 'phong_kham' vi·∫øt th∆∞·ªùng)
    clinic_schedule = {
        "tiep_don": defaultdict(list),
        "phong_kham": {name: defaultdict(list) for name in rooms_dict.values()}
    }

    # L·∫•y d·ªØ li·ªáu ph√¢n c√¥ng
    schedules = Schedule.query.join(User).join(Shift).filter(
        Schedule.work_date.between(start_date, end_date),
        Shift.name.ilike('%ph√≤ng kh√°m%') | Shift.name.ilike('%ti·∫øp ƒë√≥n%')
    ).all()

    # T·∫°o b·∫£ng ch·ª©c v·ª• ng∆∞·ªùi d√πng
    user_positions = {}
    for s in schedules:
        name = s.user.name
        user_positions[name] = s.user.position or ""
        date = s.work_date
        shift_name = s.shift.name.lower()

        if "ti·∫øp ƒë√≥n" in shift_name:
            clinic_schedule["tiep_don"][date].append(name)
        else:
            for room_key in rooms_dict:
                if room_key in shift_name:
                    room_name = rooms_dict[room_key]
                    clinic_schedule["phong_kham"][room_name][date].append(name)
                    break

    # 1. Lo·∫°i b·ªè ph√≤ng tr·ªëng
    clinic_schedule["phong_kham"] = {
        name: day_dict for name, day_dict in clinic_schedule["phong_kham"].items()
        if any(day_dict[d] for d in date_range)
    }

    # 2. S·∫Øp x·∫øp ph√≤ng theo th·ª© t·ª± chu·∫©n
    desired_order = [
        "ph√≤ng kh√°m 1", "ph√≤ng kh√°m 2", "ph√≤ng kh√°m 3",
        "ph√≤ng kh√°m ngo·∫°i", "ph√≤ng kh√°m tmh", "ph√≤ng kh√°m rhm",
        "ph√≤ng kh√°m m·∫Øt", "ph√≤ng kh√°m 8 (tc)", "ph√≤ng kh√°m 9 (tc)"
    ]
    ordered_schedule = {}
    for name in desired_order:
        original_name = rooms_dict.get(name)
        if original_name in clinic_schedule["phong_kham"]:
            ordered_schedule[original_name] = clinic_schedule["phong_kham"][original_name]
    clinic_schedule["phong_kham"] = ordered_schedule

    # T·∫°o danh s√°ch rooms t·ª´ l·ªãch ƒë√£ s·∫Øp x·∫øp
    rooms = list(clinic_schedule["phong_kham"].keys())

    return render_template(
        'print-clinic-schedule.html',
        start_date=start_date,
        end_date=end_date,
        date_range=date_range,
        clinic_schedule=clinic_schedule,
        user_positions=user_positions,
        rooms=rooms,
        now=datetime.now(),
        get_titled_names=get_titled_names
    )

# C√°c route nh∆∞ /print-clinic-schedule ·ªü tr√™n...

# === Cu·ªëi file ho·∫∑c ph·∫ßn helper ===
def get_titled_names(raw_names, user_positions):
    result = []
    for name in raw_names.split("\n"):
        name = name.strip()
        if name:
            role = user_positions.get(name)
            prefix = ""
            if role == "BS":
                prefix = "BS. "
            elif role == "ƒêD":
                prefix = "ƒêD. "
            result.append(f"{prefix}{name}")
    return "<br>".join(result)

@app.route('/print-clinic-dept-schedule')
def print_clinic_dept_schedule():
    from collections import defaultdict
    import re

    start_str = request.args.get('start')
    end_str = request.args.get('end')
    if not start_str or not end_str:
        return "Thi·∫øu th√¥ng tin ng√†y b·∫Øt ƒë·∫ßu ho·∫∑c k·∫øt th√∫c.", 400

    start_date = datetime.strptime(start_str, '%Y-%m-%d').date()
    end_date = datetime.strptime(end_str, '%Y-%m-%d').date()
    date_range = [start_date + timedelta(days=i) for i in range((end_date - start_date).days + 1)]

    # L·∫•y danh s√°ch ph√≤ng kh√°m
    all_rooms = ClinicRoom.query.all()
    rooms_dict = {room.name.lower(): room.name for room in all_rooms if "ti·∫øp ƒë√≥n" not in room.name.lower()}

    # Kh·ªüi t·∫°o d·ªØ li·ªáu l·ªãch (d√πng key 'phong_kham' vi·∫øt th∆∞·ªùng)
    clinic_schedule = {
        "tiep_don": defaultdict(list),
        "phong_kham": {name: defaultdict(list) for name in rooms_dict.values()}
    }

    # L·∫•y d·ªØ li·ªáu ph√¢n c√¥ng
    schedules = Schedule.query.join(User).join(Shift).filter(
        Schedule.work_date.between(start_date, end_date),
        Shift.name.ilike('%ph√≤ng kh√°m%') | Shift.name.ilike('%ti·∫øp ƒë√≥n%')
    ).all()

    # T·∫°o b·∫£ng ch·ª©c v·ª• ng∆∞·ªùi d√πng
    user_positions = {}
    for s in schedules:
        name = s.user.name
        user_positions[name] = s.user.position or ""
        date = s.work_date
        shift_name = s.shift.name.lower()

        if "ti·∫øp ƒë√≥n" in shift_name:
            clinic_schedule["tiep_don"][date].append(name)
        else:
            for room_key in rooms_dict:
                if room_key in shift_name:
                    room_name = rooms_dict[room_key]
                    clinic_schedule["phong_kham"][room_name][date].append(name)
                    break

    # 1. Lo·∫°i b·ªè ph√≤ng tr·ªëng
    clinic_schedule["phong_kham"] = {
        name: day_dict for name, day_dict in clinic_schedule["phong_kham"].items()
        if any(day_dict[d] for d in date_range)
    }

    # 2. S·∫Øp x·∫øp ph√≤ng theo th·ª© t·ª± chu·∫©n
    desired_order = [
        "ph√≤ng kh√°m 1", "ph√≤ng kh√°m 2", "ph√≤ng kh√°m 3",
        "ph√≤ng kh√°m ngo·∫°i", "ph√≤ng kh√°m tmh", "ph√≤ng kh√°m rhm",
        "ph√≤ng kh√°m m·∫Øt", "ph√≤ng kh√°m 8 (tc)", "ph√≤ng kh√°m 9 (tc)"
    ]
    ordered_schedule = {}
    for name in desired_order:
        original_name = rooms_dict.get(name)
        if original_name in clinic_schedule["phong_kham"]:
            ordered_schedule[original_name] = clinic_schedule["phong_kham"][original_name]
    clinic_schedule["phong_kham"] = ordered_schedule

    # T·∫°o danh s√°ch rooms t·ª´ l·ªãch ƒë√£ s·∫Øp x·∫øp
    rooms = list(clinic_schedule["phong_kham"].keys())

    return render_template(
        'print-clinic-dept-schedule.html',
        start_date=start_date,
        end_date=end_date,
        date_range=date_range,
        clinic_schedule=clinic_schedule,
        user_positions=user_positions,
        rooms=rooms,
        now=datetime.now(),
        get_titled_names=get_titled_names
    )

def get_titled_names(name_input, user_positions):
    # N·∫øu ƒë·∫ßu v√†o l√† chu·ªói, chuy·ªÉn sang danh s√°ch
    if isinstance(name_input, str):
        names = [n.strip() for n in name_input.split(',') if n.strip()]
    elif isinstance(name_input, list):
        names = [n.strip() for n in name_input if n.strip()]
    else:
        return ''

    titled = []
    for name in names:
        title = user_positions.get(name, '').strip().upper()
        if title:
            titled.append(f"{title}. {name}")
        else:
            titled.append(name)

    return '<br>'.join(titled)

# ƒêƒÉng k√Ω v√†o template
@app.context_processor
def inject_helpers():
    return dict(get_titled_names=get_titled_names)

@app.context_processor
def inject_user():
    user = None
    if 'user_id' in session:
        user = User.query.get(session['user_id'])
    return dict(user=user)

from flask import render_template, request, redirect
from models.shift_rate_config import ShiftRateConfig

@app.route('/shift-rate-config', methods=['GET', 'POST'])
def shift_rate_config():
    # Cho ph√©p admin v√† admin1
    if session.get('role') not in ('admin', 'admin1'):
        return "Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph√©p truy c·∫≠p."

    if request.method == 'POST':
        ca_loai = request.form['ca_loai']
        truc_loai = request.form['truc_loai']
        ngay_loai = request.form['ngay_loai']
        try:
            don_gia = int(request.form['don_gia'])
        except (TypeError, ValueError):
            don_gia = 0

        new_rate = ShiftRateConfig(
            ca_loai=ca_loai,
            truc_loai=truc_loai,
            ngay_loai=ngay_loai,
            don_gia=don_gia
        )
        db.session.add(new_rate)
        db.session.commit()
        return redirect('/shift-rate-config')

    rates = ShiftRateConfig.query.all()
    return render_template('shift_rate_config.html', rates=rates)

@app.route('/shift-rate-config/delete/<int:rate_id>')
def delete_shift_rate(rate_id):
    if session.get('role') != 'admin':
        return "Kh√¥ng c√≥ quy·ªÅn"
    rate = ShiftRateConfig.query.get_or_404(rate_id)
    db.session.delete(rate)
    db.session.commit()
    return redirect('/shift-rate-config')

from models.hscc_department import HSCCDepartment  # Import ƒë·∫ßu file

@app.route('/configure-hscc', methods=['GET', 'POST'])
def configure_hscc():
    if session.get('role') not in ('admin', 'admin1'):
        return "Ch·ªâ admin ho·∫∑c admin1 ƒë∆∞·ª£c ph√©p truy c·∫≠p."

    if request.method == 'POST':
        new_dept = request.form.get('department').strip()
        if new_dept and not HSCCDepartment.query.filter_by(department_name=new_dept).first():
            hscc = HSCCDepartment(department_name=new_dept)
            db.session.add(hscc)
            db.session.commit()

    departments = HSCCDepartment.query.all()
    return render_template('configure_hscc.html', departments=departments)


@app.route('/configure-hscc/update/<int:id>', methods=['POST'])
def update_hscc(id):
    if session.get('role') not in ('admin', 'admin1'):
        return "Ch·ªâ admin ho·∫∑c admin1 ƒë∆∞·ª£c ph√©p truy c·∫≠p."

    hscc = HSCCDepartment.query.get_or_404(id)
    new_name = request.form.get('new_name') or request.form.get('department')

    if new_name:
        hscc.department_name = new_name.strip()
        db.session.commit()

    return redirect('/configure-hscc')


@app.route('/shift-payment-view')
def shift_payment_view():
    user_role = session.get('role')
    user_dept = session.get('department')

    from collections import defaultdict

    def classify_day(date):
        ngay_le = {'01-01', '04-30', '05-01', '09-02'}
        mmdd = date.strftime('%m-%d')
        weekday = date.weekday()
        if mmdd in ngay_le:
            return 'ng√†y_l·ªÖ'
        elif weekday >= 5:
            return 'ng√†y_ngh·ªâ'
        else:
            return 'ng√†y_th∆∞·ªùng'

    ca_chon = request.args.get('mode', '16h')
    selected_department = request.args.get('department')

    start_date = request.args.get('start_date')
    end_date = request.args.get('end_date')

    # N·∫øu kh√¥ng c√≥ ng√†y ‚Üí m·∫∑c ƒë·ªãnh th√°ng hi·ªán t·∫°i
    if not start_date or not end_date:
        today = datetime.today()
        start_date_dt = today.replace(day=1)
        next_month = today.replace(day=28) + timedelta(days=4)
        last_day = (next_month - timedelta(days=next_month.day)).day
        end_date_dt = today.replace(day=last_day)
        start_date = start_date_dt.strftime('%Y-%m-%d')
        end_date = end_date_dt.strftime('%Y-%m-%d')
    else:
        start_date_dt = datetime.strptime(start_date, '%Y-%m-%d').date()
        end_date_dt = datetime.strptime(end_date, '%Y-%m-%d').date()

    # Danh s√°ch khoa
    if user_role in ['admin', 'admin1']:
        departments = sorted([d[0] for d in db.session.query(User.department)
                              .filter(User.department.isnot(None))
                              .distinct().all()])
        departments.insert(0, 'T·∫•t c·∫£')
        if not selected_department:
            selected_department = 'T·∫•t c·∫£'
    else:
        departments = [user_dept] if user_dept else []
        selected_department = user_dept

    hscc_depts = [d.department_name for d in HSCCDepartment.query.all()]
    rates = {(r.ca_loai.lower().strip(), r.truc_loai.lower().strip(), r.ngay_loai.lower().strip()): r.don_gia
             for r in ShiftRateConfig.query.all()}

    # Query d·ªØ li·ªáu
    query = (
        Schedule.query
        .join(User).join(Shift)
        .filter(Schedule.work_date >= start_date_dt, Schedule.work_date <= end_date_dt)
        .filter(Shift.duration == (16 if ca_chon == '16h' else 24))
    )

    # Ch·ªâ l·ªçc khi kh√¥ng ph·∫£i "T·∫•t c·∫£"
    if selected_department and selected_department != 'T·∫•t c·∫£':
        query = query.filter(User.department == selected_department)

    schedules = query.all()

    # Danh s√°ch ca h·ª£p l·ªá
    valid_shifts = [
        "tr·ª±c 16h", "tr·ª±c 16h t7cn",
        "tr·ª±c 24h", "tr·ª±c 24h t7cn",
        "tr·ª±c l·ªÖ16h", "tr·ª±c l·ªÖ 24h"
    ]

    # Gom d·ªØ li·ªáu
    data = defaultdict(lambda: defaultdict(int))
    for s in schedules:
        user = s.user
        shift = s.shift

        shift_name = shift.name.strip().lower()

        # Ch·ªâ t√≠nh n·∫øu ca h·ª£p l·ªá
        if shift_name not in valid_shifts:
            continue

        # B·ªè ca th∆∞·ªùng tr√∫
        if "th∆∞·ªùng tr√∫" in shift_name:
            continue

        ngay_loai = classify_day(s.work_date)
        truc_loai = "HSCC" if user.department in hscc_depts else "th∆∞·ªùng"
        key = (truc_loai, ngay_loai)
        data[user][key] += 1

    # S·∫Øp x·∫øp ch·ª©c danh
    priority_order = ['Gƒê', 'PGƒê', 'TK', 'PTK', 'PK', 'BS', 'ƒêDT', 'ƒêD', 'KTV', 'NV', 'HL', 'BV']
    def get_priority(pos):
        pos = pos.upper() if pos else ''
        for i, p in enumerate(priority_order):
            if p in pos:
                return i
        return len(priority_order)

    # Chu·∫©n b·ªã d·ªØ li·ªáu hi·ªÉn th·ªã
    rows = []
    co_ngay_le = False
    for user, info in data.items():
        if user.role == 'admin':
            continue

        row = {
            'user': user,
            'tong_ngay': sum(info.values()),
            'tien_ca': 0,
            'tien_an': sum(info.values()) * 15000,
            'tong_tien': 0,
            'is_contract': user.contract_type == "H·ª£p ƒë·ªìng",
            'detail': {},
            'priority': get_priority(user.position)
        }

        for key in [
            ("th∆∞·ªùng", "ng√†y_th∆∞·ªùng"), ("HSCC", "ng√†y_th∆∞·ªùng"),
            ("th∆∞·ªùng", "ng√†y_ngh·ªâ"), ("HSCC", "ng√†y_ngh·ªâ"),
            ("th∆∞·ªùng", "ng√†y_l·ªÖ"), ("HSCC", "ng√†y_l·ªÖ")
        ]:
            so_ngay = info.get(key, 0)
            if key[1] == 'ng√†y_l·ªÖ' and so_ngay > 0:
                co_ngay_le = True

            # Chu·∫©n h√≥a to√†n b·ªô key khi lookup rates
            ca_key = ca_chon.lower().replace("tr·ª±c", "").strip()
            truc_key = key[0].lower().strip()
            ngay_key = key[1].lower().strip()

            don_gia = (
                rates.get((ca_key, truc_key, ngay_key), 0)
                or rates.get((ca_chon, truc_key, ngay_key), 0)
                or rates.get((ca_key, key[0], key[1]), 0)
                or rates.get((ca_chon, key[0], key[1]), 0)
            )

            row['detail'][key] = {'so_ngay': so_ngay, 'don_gia': don_gia}
            row['tien_ca'] += so_ngay * don_gia

        row['tong_tien'] = row['tien_ca'] + row['tien_an']
        rows.append(row)

    # Sort theo ch·ª©c danh + t√™n
    rows = sorted(rows, key=lambda r: (r['priority'], r['user'].name))

    thang = start_date_dt.month
    nam = start_date_dt.year

    return render_template(
        "shift_payment_view.html",
        ca_chon=ca_chon,
        rows=rows,
        departments=departments,
        selected_department=selected_department,
        mode=ca_chon,
        start_date=start_date,
        end_date=end_date,
        thang=thang,
        nam=nam,
        co_ngay_le=co_ngay_le
    )


@app.route('/tong-hop-cong-truc-view')
@login_required
def tong_hop_cong_truc_view():
    from collections import defaultdict
    from models.user import User
    from models.schedule import Schedule
    from models.shift import Shift
    from models.hscc_department import HSCCDepartment

    user_role = session.get('role')
    user_dept = session.get('department')

    # --- Danh s√°ch khoa ---
    if user_role in ['admin', 'admin1']:
        departments = sorted([d[0] for d in db.session.query(User.department)
                              .filter(User.department.isnot(None))
                              .distinct().all()])
        departments.insert(0, 'T·∫•t c·∫£')
    else:
        departments = [user_dept] if user_dept else []

    # --- L·∫•y tham s·ªë department ---
    if user_role in ['admin', 'admin1']:
        selected_department = request.args.get('department', 'T·∫•t c·∫£')
    else:
        selected_department = user_dept  # User th∆∞·ªùng ch·ªâ th·∫•y khoa m√¨nh

    # --- L·∫•y ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c v√† chuy·ªÉn sang ki·ªÉu date ---
    start_date_str = request.args.get('start_date')
    end_date_str = request.args.get('end_date')
    mode = request.args.get('mode', '16h')

    today = datetime.now()

    try:
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date() if start_date_str else None
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date() if end_date_str else None
    except Exception:
        start_date, end_date = None, None

    # N·∫øu ch∆∞a ch·ªçn ng√†y ‚Üí b√°o l·ªói
    if not start_date or not end_date:
        return render_template(
            'tong_hop_cong_truc_view.html',
            rows=[],
            sum_row={},
            departments=departments,
            selected_department=selected_department,
            start_date=start_date_str,
            end_date=end_date_str,
            default_start=start_date_str,
            default_end=end_date_str,
            thang=today.month,
            nam=today.year,
            mode=mode,
            error_message="B·∫°n ch∆∞a ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c ƒë·ªÉ xem b√°o c√°o!"
        )

    # L·∫•y th√°ng/nƒÉm ƒë·ªÉ hi·ªÉn th·ªã
    thang = start_date.month
    nam = start_date.year

    # --- Query l·ªãch tr·ª±c ---
    query = Schedule.query.join(User).join(Shift).filter(
        Schedule.work_date.between(start_date, end_date)
    )
    if selected_department not in ['T·∫•t c·∫£', 'all', None]:
        query = query.filter(User.department.ilike(selected_department))

    schedules = query.all()

    # --- L·∫•y danh s√°ch HSCC (b·ªçc try/except n·∫øu b·∫£ng tr·ªëng) ---
    try:
        hscc_depts = [d.department_name for d in HSCCDepartment.query.all()]
    except Exception:
        hscc_depts = []

    result_by_user = defaultdict(lambda: defaultdict(lambda: {'so_ngay': 0}))
    summary = defaultdict(int)

    # Danh s√°ch ca h·ª£p l·ªá
    valid_shifts = [
        "tr·ª±c 16h", "tr·ª±c 16h t7cn",
        "tr·ª±c 24h", "tr·ª±c 24h t7cn",
        "tr·ª±c l·ªÖ16h", "tr·ª±c l·ªÖ 24h"
    ]

    for s in schedules:
        if not s.shift or not s.user:
            continue

        shift_name = s.shift.name.strip().lower()

        # Ch·ªâ t√≠nh ca h·ª£p l·ªá
        if shift_name not in valid_shifts:
            continue

        # B·ªè ca th∆∞·ªùng tr√∫
        if 'th∆∞·ªùng tr√∫' in shift_name:
            continue

        # B·ªè c√°c t·ª´ kh√≥a ngh·ªâ
        skip_keywords = ['ngh·ªâ tr·ª±c', 'ngh·ªâ ph√©p', 'l√†m ng√†y', 'l√†m 1/2 ng√†y', 'l√†m 1/2 ng√†y c', 'ph√≤ng kh√°m']
        if any(x in shift_name for x in skip_keywords):
            continue

        # L·ªçc theo mode
        if mode == '24h' and '24h' not in shift_name:
            continue
        if mode == '16h' and '24h' in shift_name:
            continue

        loai_ca = 'HSCC' if s.user.department in hscc_depts else 'th∆∞·ªùng'

        mmdd = s.work_date.strftime('%m-%d')
        weekday = s.work_date.weekday()

        # X√°c ƒë·ªãnh lo·∫°i ng√†y
        if mmdd in ['01-01', '04-30', '05-01', '09-02']:
            loai_ngay = 'ng√†y_l·ªÖ'
        elif weekday >= 5:
            loai_ngay = 'ng√†y_ngh·ªâ'
        else:
            loai_ngay = 'ng√†y_th∆∞·ªùng'

        result_by_user[s.user_id][(loai_ca, loai_ngay)]['so_ngay'] += 1
        summary[(loai_ca, loai_ngay)] += 1

    user_ids = list(result_by_user.keys())
    users = User.query.filter(User.id.in_(user_ids), User.role != 'admin').all() if user_ids else []

    # Th·ª© t·ª± ∆∞u ti√™n ch·ª©c danh
    priority_order = ['Gƒê', 'PGƒê', 'TK', 'PTK', 'PK', 'BS', 'ƒêDT', 'ƒêD', 'KTV', 'NV', 'HL', 'BV']
    def get_priority(pos):
        pos = pos.upper() if pos else ''
        for i, p in enumerate(priority_order):
            if p in pos:
                return i
        return len(priority_order)

    # Chu·∫©n b·ªã d·ªØ li·ªáu hi·ªÉn th·ªã
    rows = []
    for user in users:
        detail = result_by_user[user.id]
        rows.append({
            'user': user,
            'detail': detail,
            'tong_ngay': sum([v['so_ngay'] for v in detail.values()]),
            'ghi_chu': ''
        })

    rows.sort(key=lambda x: get_priority(x['user'].position))

    sum_row = {
        'detail': summary,
        'tong_ngay': sum(summary.values())
    }

    # --- X·ª≠ l√Ω t√™n khoa/ph√≤ng hi·ªÉn th·ªã ---
    if selected_department in ['T·∫•t c·∫£', 'all', None]:
        if user_role == 'admin1' and user_dept:
            dept_display = user_dept
        else:
            dept_display = ""
    else:
        dept_display = selected_department

    return render_template(
        'tong_hop_cong_truc_view.html',
        rows=rows,
        sum_row=sum_row,
        departments=departments,
        selected_department=dept_display,
        start_date=start_date_str,
        end_date=end_date_str,
        default_start=start_date_str,
        default_end=end_date_str,
        thang=thang,
        nam=nam,
        mode=mode
    )

from models.unit_config import UnitConfig  # import model c·∫•u h√¨nh ƒë∆°n v·ªã

@app.route('/tong-hop-cong-truc-print')
@login_required
def tong_hop_cong_truc_print():
    from collections import defaultdict
    from models.user import User
    from models.schedule import Schedule
    from models.shift import Shift
    from models.hscc_department import HSCCDepartment
    from models.unit_config import UnitConfig

    user_role = session.get('role')
    user_dept = session.get('department')

    # --- L·∫•y tham s·ªë ---
    selected_department = request.args.get('department', '')
    start_date_str = request.args.get('start_date')
    end_date_str = request.args.get('end_date')
    mode = request.args.get('mode', '16h')

    today = datetime.now()

    # --- Chu·∫©n ho√° ng√†y ---
    try:
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date() if start_date_str else None
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date() if end_date_str else None
    except Exception:
        start_date, end_date = None, None

    # N·∫øu ch∆∞a ch·ªçn ng√†y ‚Üí b√°o l·ªói (gi·ªØ nguy√™n template in)
    if not start_date or not end_date:
        return render_template(
            'tong_hop_cong_truc.html',
            rows=[],
            sum_row={},
            selected_department=selected_department,
            start_date=start_date_str,
            current_day=today.day,
            current_month=today.month,
            current_year=today.year,
            thang=today.month,
            nam=today.year,
            mode=mode,
            unit_config=UnitConfig.query.first(),
            error_message="B·∫°n ch∆∞a ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c ƒë·ªÉ in b√°o c√°o!"
        )

    thang = start_date.month
    nam = start_date.year

    # --- Query l·ªãch tr·ª±c (gi·ªëng view) ---
    query = Schedule.query.join(User).join(Shift).filter(
        Schedule.work_date.between(start_date, end_date)
    )
    if selected_department not in ['T·∫•t c·∫£', 'all', None]:
        # d√πng ilike nh∆∞ view
        query = query.filter(User.department.ilike(selected_department))

    schedules = query.all()

    # --- Danh s√°ch HSCC (gi·ªëng view, c√≥ try/except) ---
    try:
        hscc_depts = [d.department_name for d in HSCCDepartment.query.all()]
    except Exception:
        hscc_depts = []

    result_by_user = defaultdict(lambda: defaultdict(lambda: {'so_ngay': 0}))
    summary = defaultdict(int)

    # --- Danh s√°ch ca h·ª£p l·ªá (y nh∆∞ view) ---
    valid_shifts = [
        "tr·ª±c 16h", "tr·ª±c 16h t7cn",
        "tr·ª±c 24h", "tr·ª±c 24h t7cn",
        "tr·ª±c l·ªÖ16h", "tr·ª±c l·ªÖ 24h"
    ]
    skip_keywords = ['ngh·ªâ tr·ª±c', 'ngh·ªâ ph√©p', 'l√†m ng√†y', 'l√†m 1/2 ng√†y', 'l√†m 1/2 ng√†y c', 'ph√≤ng kh√°m']

    for s in schedules:
        if not s.shift or not s.user:
            continue

        shift_name = s.shift.name.strip().lower()

        # ch·ªâ t√≠nh ca h·ª£p l·ªá
        if shift_name not in valid_shifts:
            continue

        # b·ªè th∆∞·ªùng tr√∫
        if 'th∆∞·ªùng tr√∫' in shift_name:
            continue

        # b·ªè c√°c t·ª´ kho√° ngh·ªâ/l√†m ng√†y
        if any(x in shift_name for x in skip_keywords):
            continue

        # l·ªçc theo mode
        if mode == '24h' and '24h' not in shift_name:
            continue
        if mode == '16h' and '24h' in shift_name:
            continue

        loai_ca = 'HSCC' if s.user.department in hscc_depts else 'th∆∞·ªùng'

        mmdd = s.work_date.strftime('%m-%d')
        weekday = s.work_date.weekday()
        if mmdd in ['01-01', '04-30', '05-01', '09-02']:
            loai_ngay = 'ng√†y_l·ªÖ'
        elif weekday >= 5:
            loai_ngay = 'ng√†y_ngh·ªâ'
        else:
            loai_ngay = 'ng√†y_th∆∞·ªùng'

        result_by_user[s.user_id][(loai_ca, loai_ngay)]['so_ngay'] += 1
        summary[(loai_ca, loai_ngay)] += 1

    # --- L·∫•y user gi·ªëng view: B·ªé admin ---
    user_ids = list(result_by_user.keys())
    users = User.query.filter(User.id.in_(user_ids), User.role != 'admin').all() if user_ids else []

    # --- S·∫Øp x·∫øp theo ch·ª©c danh (gi·ªØ nguy√™n) ---
    priority_order = ['Gƒê', 'PGƒê', 'TK', 'PTK', 'PK', 'BS', 'ƒêDT', 'ƒêD', 'KTV', 'NV', 'HL', 'BV']
    def get_priority(pos):
        pos = pos.upper() if pos else ''
        for i, p in enumerate(priority_order):
            if p in pos:
                return i
        return len(priority_order)

    rows = []
    for user in users:
        detail = result_by_user[user.id]
        rows.append({
            'user': user,
            'detail': detail,
            'tong_ngay': sum([v['so_ngay'] for v in detail.values()]),
            'ghi_chu': ''
        })
    rows.sort(key=lambda x: get_priority(x['user'].position))

    sum_row = {
        'detail': summary,
        'tong_ngay': sum(summary.values())
    }

    # --- Hi·ªÉn th·ªã t√™n khoa/ph√≤ng (ƒë·ªìng b·ªô v·ªõi view) ---
    if selected_department in ['T·∫•t c·∫£', 'all', None]:
        if user_role == 'admin1' and user_dept:
            dept_display = user_dept
        else:
            dept_display = ""
    else:
        dept_display = selected_department

    return render_template(
        'tong_hop_cong_truc.html',
        rows=rows,
        sum_row=sum_row,
        selected_department=dept_display,
        start_date=start_date_str,
        current_day=today.day,
        current_month=today.month,
        current_year=today.year,
        thang=thang,
        nam=nam,
        mode=mode,
        unit_config=UnitConfig.query.first()
    )

@app.route('/tong-hop-cong-truc-view/export-excel')
@login_required
def tong_hop_cong_truc_export_excel():
    from io import BytesIO
    from collections import defaultdict
    from openpyxl import Workbook
    from openpyxl.styles import Font, Alignment, Border, Side

    # ==== Tham s·ªë gi·ªëng VIEW ====
    user_role = session.get('role')
    user_dept = session.get('department')

    selected_department = request.args.get('department')
    start_date_str = request.args.get('start_date')
    end_date_str   = request.args.get('end_date')
    mode = request.args.get('mode', '16h')

    start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
    end_date   = datetime.strptime(end_date_str,   '%Y-%m-%d').date()

    # ==== Query l·ªãch tr·ª±c y nh∆∞ VIEW ====
    query = Schedule.query.join(User).join(Shift).filter(
        Schedule.work_date.between(start_date, end_date)
    )
    if user_role in ['admin','admin1']:
        if selected_department not in (None, '', 'T·∫•t c·∫£', 'all'):
            query = query.filter(User.department == selected_department)
    else:
        query = query.filter(User.department == user_dept)

    schedules = query.all()

    # ==== HSCC depts ====
    try:
        hscc_depts = [d.department_name for d in HSCCDepartment.query.all()]
    except Exception:
        hscc_depts = []

    # ==== Logic L·ªåC & ƒê·∫æM GI·ªêNG H·ªÜT VIEW ====
    result_by_user = defaultdict(lambda: defaultdict(lambda: {'so_ngay': 0}))
    summary = defaultdict(int)

    valid_shifts = [
        "tr·ª±c 16h", "tr·ª±c 16h t7cn",
        "tr·ª±c 24h", "tr·ª±c 24h t7cn",
        "tr·ª±c l·ªÖ16h", "tr·ª±c l·ªÖ 24h"
    ]
    for s in schedules:
        if not s.shift or not s.user:
            continue

        shift_name = (s.shift.name or '').strip().lower()

        # ch·ªâ t√≠nh ca h·ª£p l·ªá
        if shift_name not in valid_shifts:
            continue

        # b·ªè ca th∆∞·ªùng tr√∫
        if 'th∆∞·ªùng tr√∫' in shift_name:
            continue

        # b·ªè c√°c t·ª´ kh√≥a ngh·ªâ/l√†m ng√†y/ph√≤ng kh√°m
        skip_keywords = ['ngh·ªâ tr·ª±c', 'ngh·ªâ ph√©p', 'l√†m ng√†y', 'l√†m 1/2 ng√†y', 'l√†m 1/2 ng√†y c', 'ph√≤ng kh√°m']
        if any(x in shift_name for x in skip_keywords):
            continue

        # l·ªçc theo mode
        if mode == '24h' and '24h' not in shift_name:
            continue
        if mode == '16h' and '24h' in shift_name:
            continue

        loai_ca = 'HSCC' if s.user.department in hscc_depts else 'th∆∞·ªùng'

        mmdd = s.work_date.strftime('%m-%d')
        weekday = s.work_date.weekday()

        # ph√¢n lo·∫°i ng√†y (y nh∆∞ VIEW)
        if mmdd in ['01-01', '04-30', '05-01', '09-02']:
            loai_ngay = 'ng√†y_l·ªÖ'
        elif weekday >= 5:
            loai_ngay = 'ng√†y_ngh·ªâ'
        else:
            loai_ngay = 'ng√†y_th∆∞·ªùng'

        result_by_user[s.user_id][(loai_ca, loai_ngay)]['so_ngay'] += 1
        summary[(loai_ca, loai_ngay)] += 1

    user_ids = list(result_by_user.keys())
    users = User.query.filter(User.id.in_(user_ids), User.role != 'admin').all() if user_ids else []

    # s·∫Øp x·∫øp theo ch·ª©c danh nh∆∞ VIEW
    priority_order = ['Gƒê', 'PGƒê', 'TK', 'PTK', 'PK', 'BS', 'ƒêDT', 'ƒêD', 'KTV', 'NV', 'HL', 'BV']
    def get_priority(pos):
        pos = (pos or '').upper()
        for i, p in enumerate(priority_order):
            if p in pos:
                return i
        return len(priority_order)
    users.sort(key=lambda u: (get_priority(u.position), (u.name or '').lower()))

    # ==== T·∫°o Excel ====
    wb = Workbook()
    ws = wb.active
    ws.title = "T·ªïng h·ª£p c√¥ng tr·ª±c"

    bold = Font(bold=True)
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)
    thin = Side(style='thin')
    border = Border(left=thin, right=thin, top=thin, bottom=thin)

    # ti√™u ƒë·ªÅ
    ws.append(["STT","H·ªå T√äN",
               "Tr·ª±c th∆∞·ªùng - Ng√†y th∆∞·ªùng","Tr·ª±c HSCC - Ng√†y th∆∞·ªùng",
               "Tr·ª±c th∆∞·ªùng - Ng√†y ngh·ªâ","Tr·ª±c HSCC - Ng√†y ngh·ªâ",
               "Tr·ª±c th∆∞·ªùng - Ng√†y l·ªÖ","Tr·ª±c HSCC - Ng√†y l·ªÖ",
               "T·ªïng s·ªë ng√†y tr·ª±c","Ghi ch√∫"])
    for c in ws[1]:
        c.font = bold; c.alignment = center; c.border = border

    def get_cnt(detail, key):
        return detail.get(key, {}).get('so_ngay', 0)

    for i, u in enumerate(users, 1):
        d = result_by_user[u.id]
        row = [
            i, u.name,
            get_cnt(d, ('th∆∞·ªùng','ng√†y_th∆∞·ªùng')),
            get_cnt(d, ('HSCC','ng√†y_th∆∞·ªùng')),
            get_cnt(d, ('th∆∞·ªùng','ng√†y_ngh·ªâ')),
            get_cnt(d, ('HSCC','ng√†y_ngh·ªâ')),
            get_cnt(d, ('th∆∞·ªùng','ng√†y_l·ªÖ')),
            get_cnt(d, ('HSCC','ng√†y_l·ªÖ')),
        ]
        row.append(sum(row[2:8]))  # t·ªïng s·ªë ng√†y tr·ª±c
        row.append("")             # ghi ch√∫
        ws.append(row)
        for c in ws[ws.max_row]:
            c.alignment = center; c.border = border

    # c√≥ th·ªÉ th√™m d√≤ng t·ªïng cu·ªëi (n·∫øu mu·ªën gi·ªëng view ph·∫ßn t·ªïng)
    # s = summary
    # ws.append([])
    # ws.append(["T·ªîNG","","",
    #            s.get(('HSCC','ng√†y_th∆∞·ªùng'),0),
    #            s.get(('th∆∞·ªùng','ng√†y_ngh·ªâ'),0),
    #            ...])

    bio = BytesIO()
    wb.save(bio); bio.seek(0)
    fname = f"tong_hop_cong_truc_{start_date:%Y%m%d}_{end_date:%Y%m%d}_{mode}.xlsx"
    return send_file(bio, as_attachment=True, download_name=fname,
                     mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

@app.route('/export-shift-payment-all')
def export_shift_payment_all():
    from io import BytesIO
    from collections import defaultdict
    from openpyxl import Workbook
    from openpyxl.styles import Font, Alignment, Border, Side

    # --- Ph√¢n lo·∫°i ng√†y theo l·ªãch (gi·ªëng b·∫£n in) ---
    def classify_day(d):
        ngay_le = {'01-01', '04-30', '05-01', '09-02'}  # c√≥ th·ªÉ b·ªï sung n·∫øu c·∫ßn
        mmdd = d.strftime('%m-%d')
        if mmdd in ngay_le:
            return 'ng√†y_l·ªÖ'
        return 'ng√†y_ngh·ªâ' if d.weekday() >= 5 else 'ng√†y_th∆∞·ªùng'

    # --- Tham s·ªë ---
    ca_chon = request.args.get('mode', '16h')                 # '16h' ho·∫∑c '24h'
    selected_department = request.args.get('department', 'all')
    start_date = request.args.get('start_date', '2025-06-01')
    end_date   = request.args.get('end_date',   '2025-06-30')

    start_date_dt = datetime.strptime(start_date, '%Y-%m-%d').date()
    end_date_dt   = datetime.strptime(end_date,   '%Y-%m-%d').date()
    thang, nam = start_date_dt.month, start_date_dt.year

    # --- D·ªØ li·ªáu c·∫•u h√¨nh ---
    hscc_depts = {d.department_name for d in HSCCDepartment.query.all()}
    rates = {(r.ca_loai, r.truc_loai, r.ngay_loai): r.don_gia for r in ShiftRateConfig.query.all()}

    # --- L·∫•y l·ªãch theo kho·∫£ng & theo duration (ch·ªâ 16h/24h nh∆∞ y√™u c·∫ßu) ---
    wanted_duration = 16 if ca_chon == '16h' else 24
    q = (
        Schedule.query
        .join(User).join(Shift)
        .filter(Schedule.work_date >= start_date_dt,
                Schedule.work_date <= end_date_dt)
        .filter(Shift.duration == wanted_duration)
    )
    if selected_department != 'all':
        q = q.filter(User.department == selected_department)

    schedules = q.all()

    # --- Kh·ª≠ tr√πng l·∫∑p theo ng√†y: m·ªói (user, date) ch·ªâ t√≠nh 1 l·∫ßn ---
    picked_per_day = {}  # key: (user_id, date) -> user_obj
    for s in schedules:
        if not s.user:
            continue
        key = (s.user_id, s.work_date)
        if key not in picked_per_day:
            picked_per_day[key] = s.user

    # --- Gom d·ªØ li·ªáu: user -> {(tr·ª±c_lo·∫°i, ng√†y_lo·∫°i): count} ---
    data = defaultdict(lambda: defaultdict(int))
    for (uid, d), user in picked_per_day.items():
        ngay_loai = classify_day(d)
        truc_loai = "HSCC" if (user.department in hscc_depts) else "th∆∞·ªùng"
        data[user][(truc_loai, ngay_loai)] += 1

    # --- T·∫°o Excel ---
    wb = Workbook()
    ws = wb.active
    ws.title = f"B·∫¢NG TR·ª∞C {ca_chon}"

    bold = Font(bold=True)
    center = Alignment(horizontal="center", vertical="center", wrap_text=True)
    thin = Side(style='thin')
    border = Border(left=thin, right=thin, top=thin, bottom=thin)

    # Ti√™u ƒë·ªÅ ƒë·∫ßu trang
    ws.merge_cells("A1:M1"); ws["A1"] = "S·ªû Y T·∫æ T·ªàNH GIA LAI"; ws["A1"].font = bold
    ws.merge_cells("A2:M2"); ws["A2"] = "B·ªÜNH VI·ªÜN NHI"; ws["A2"].font = bold
    ws.merge_cells("A4:M4"); ws["A4"] = f"B·∫¢NG THANH TO√ÅN TI·ªÄN TR·ª∞C TH√ÅNG {thang:02d} NƒÇM {nam}"
    ws["A4"].alignment = center; ws["A4"].font = Font(bold=True, size=13)

    # Header b·∫£ng
    ws.append([
        "STT", "H·ªå T√äN",
        "Tr·ª±c th∆∞·ªùng\n(Ng√†y th∆∞·ªùng)", "Tr·ª±c HSCC\n(Ng√†y th∆∞·ªùng)",
        "Tr·ª±c th∆∞·ªùng\n(Ng√†y ngh·ªâ)",   "Tr·ª±c HSCC\n(Ng√†y ngh·ªâ)",
        "Tr·ª±c th∆∞·ªùng\n(Ng√†y l·ªÖ)",     "Tr·ª±c HSCC\n(Ng√†y l·ªÖ)",
        "T·ªïng s·ªë\nng√†y tr·ª±c", "Ti·ªÅn ca\n(Qƒê 73)",
        "Ti·ªÅn ƒÉn\n(15k/ng√†y)", "T·ªïng c·ªông", "Ghi ch√∫"
    ])
    for c in ws[ws.max_row]:
        c.font = bold; c.alignment = center; c.border = border

    # Ghi d·ªØ li·ªáu: s·∫Øp theo khoa r·ªìi theo t√™n ƒë·ªÉ in ƒë·∫πp
    def cnt(info, key): return info.get(key, 0)

    sorted_users = sorted(
        data.items(),
        key=lambda kv: ((kv[0].department or ''), (kv[0].name or ''))
    )

    for i, (user, info) in enumerate(sorted_users, start=1):
        total_day = sum(info.values())
        tien_ca = 0

        row = [i, user.name]
        for key in [
            ("th∆∞·ªùng", "ng√†y_th∆∞·ªùng"), ("HSCC", "ng√†y_th∆∞·ªùng"),
            ("th∆∞·ªùng", "ng√†y_ngh·ªâ"),   ("HSCC", "ng√†y_ngh·ªâ"),
            ("th∆∞·ªùng", "ng√†y_l·ªÖ"),     ("HSCC", "ng√†y_l·ªÖ")
        ]:
            so_ngay = cnt(info, key)
            row.append(so_ngay)
            don_gia = rates.get((ca_chon, *key), 0)
            tien_ca += so_ngay * don_gia

        tien_an = total_day * 15000
        tong = tien_ca + tien_an
        ghi_chu = "HD" if getattr(user, "contract_type", "") == "H·ª£p ƒë·ªìng" else ""

        row += [total_day, tien_ca, tien_an, tong, ghi_chu]
        ws.append(row)
        for c in ws[ws.max_row]:
            c.alignment = center; c.border = border

    # Xu·∫•t file
    stream = BytesIO(); wb.save(stream); stream.seek(0)
    filename = f"BANG_THANH_TOAN_{thang:02d}_{nam}_{ca_chon}.xlsx"
    return send_file(stream, as_attachment=True, download_name=filename,
                     mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

@app.route('/print-shift-payment')
def print_shift_payment():
    from calendar import month_name
    from collections import defaultdict
    from datetime import datetime

    def classify_day(date):
        # Danh s√°ch ng√†y l·ªÖ c·ªë ƒë·ªãnh
        ngay_le = {'01-01', '04-30', '05-01', '09-02'}
        mmdd = date.strftime('%m-%d')
        weekday = date.weekday()
        if mmdd in ngay_le:
            return 'ng√†y_l·ªÖ'
        elif weekday >= 5:
            return 'ng√†y_ngh·ªâ'
        else:
            return 'ng√†y_th∆∞·ªùng'

    # L·∫•y params
    ca_chon = request.args.get('mode', '16h')
    selected_department = request.args.get('department', 'all')
    start_date = request.args.get('start_date', '2025-06-01')
    end_date = request.args.get('end_date', '2025-06-30')

    start_date_dt = datetime.strptime(start_date, '%Y-%m-%d').date()
    end_date_dt = datetime.strptime(end_date, '%Y-%m-%d').date()
    thang = start_date_dt.month
    nam = start_date_dt.year

    # Ng√†y in hi·ªán t·∫°i
    today = datetime.now()
    current_day = today.day
    current_month = today.month
    current_year = today.year

    # Danh s√°ch khoa HSCC
    hscc_depts = [d.department_name for d in HSCCDepartment.query.all()]
    rates = {(r.ca_loai, r.truc_loai, r.ngay_loai): r.don_gia for r in ShiftRateConfig.query.all()}

    # Query l·ªãch tr·ª±c
    query = (
        Schedule.query
        .join(User).join(Shift)
        .filter(Schedule.work_date >= start_date_dt, Schedule.work_date <= end_date_dt)
        .filter(Shift.duration == (16 if ca_chon == '16h' else 24))
    )
    if selected_department != 'all':
        query = query.filter(User.department == selected_department)

    schedules = query.all()

    # Gom d·ªØ li·ªáu
    data = defaultdict(lambda: defaultdict(int))
    for s in schedules:
        user = s.user
        shift = s.shift

        # B·ªè qua tr·ª±c th∆∞·ªùng tr√∫
        if "th∆∞·ªùng tr√∫" in shift.name.strip().lower():
            continue

        ngay_loai = classify_day(s.work_date)
        truc_loai = "HSCC" if user.department in hscc_depts else "th∆∞·ªùng"
        key = (truc_loai, ngay_loai)
        data[user][key] += 1

    # T·ªïng c·ªông
    sum_row = {
        'tong_ngay': 0,
        'tien_ca': 0,
        'tien_an': 0,
        'tong_tien': 0,
        'detail': {
            ("th∆∞·ªùng", "ng√†y_th∆∞·ªùng"): 0,
            ("HSCC", "ng√†y_th∆∞·ªùng"): 0,
            ("th∆∞·ªùng", "ng√†y_ngh·ªâ"): 0,
            ("HSCC", "ng√†y_ngh·ªâ"): 0,
            ("th∆∞·ªùng", "ng√†y_l·ªÖ"): 0,
            ("HSCC", "ng√†y_l·ªÖ"): 0
        }
    }

    # Danh s√°ch ∆∞u ti√™n ch·ª©c danh
    priority_order = ['Gƒê', 'PGƒê', 'TK', 'PTK', 'PK', 'BS', 'ƒêDT', 'ƒêD', 'KTV', 'NV', 'HL', 'BV']

    def get_priority(pos):
        pos = pos.upper() if pos else ''
        for i, p in enumerate(priority_order):
            if p in pos:
                return i
        return len(priority_order)

    # T·∫°o rows
    rows = []
    for user, info in data.items():
        row = {
            'user': user,
            'tong_ngay': sum(info.values()),
            'tien_ca': 0,
            'tien_an': sum(info.values()) * 15000,
            'tong_tien': 0,
            'is_contract': user.contract_type == "H·ª£p ƒë·ªìng",
            'ghi_chu': 'Hƒê' if user.contract_type == 'H·ª£p ƒë·ªìng' else '',
            'detail': {},
            'priority': get_priority(user.position)
        }

        for key in sum_row['detail'].keys():
            so_ngay = info.get(key, 0)
            don_gia = rates.get((ca_chon, *key), 0)
            row['detail'][key] = {'so_ngay': so_ngay, 'don_gia': don_gia}
            row['tien_ca'] += so_ngay * don_gia
            sum_row['detail'][key] += so_ngay

        row['tong_tien'] = row['tien_ca'] + row['tien_an']

        sum_row['tong_ngay'] += row['tong_ngay']
        sum_row['tien_ca'] += row['tien_ca']
        sum_row['tien_an'] += row['tien_an']
        sum_row['tong_tien'] += row['tong_tien']

        rows.append(row)

    # S·∫Øp x·∫øp theo th·ª© t·ª± ∆∞u ti√™n ch·ª©c danh v√† t√™n
    rows = sorted(rows, key=lambda r: (r['priority'], r['user'].name))

    return render_template(
        "shift_payment_print.html",
        ca_chon=ca_chon,
        rows=rows,
        sum_row=sum_row,
        selected_department=selected_department,
        mode=ca_chon,
        start_date=start_date,
        end_date=end_date,
        thang=thang,
        nam=nam,
        current_day=current_day,
        current_month=current_month,
        current_year=current_year,
        tong_tien_bang_chu=num2text(int(sum_row['tong_tien']))
    )

from utils import num2text

from utils.num2text import num2text  # ‚úÖ ch·ªâ l·∫•y h√†m, kh√¥ng l·∫•y module
text = num2text(1530000)
# K·∫øt qu·∫£: "M·ªôt tri·ªáu nƒÉm trƒÉm ba m∆∞∆°i ngh√¨n ƒë·ªìng"

from datetime import datetime  # ƒê·∫£m b·∫£o ƒë√£ import ·ªü ƒë·∫ßu file

@app.route('/print-shift-payment-summary')
def print_shift_payment_summary():
    from collections import defaultdict

    def classify_day(date):
        ngay_le = {'01-01', '04-30', '05-01', '09-02'}
        mmdd = date.strftime('%m-%d')
        weekday = date.weekday()
        if mmdd in ngay_le:
            return 'ng√†y_l·ªÖ'
        elif weekday >= 5:
            return 'ng√†y_ngh·ªâ'
        else:
            return 'ng√†y_th∆∞·ªùng'

    def roman(num):
        roman_map = zip(
            (1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1),
            ("M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I")
        )
        result = ''
        for i, r in roman_map:
            while num >= i:
                result += r
                num -= i
        return result

    # Th·ª© t·ª± ch·ª©c danh ∆∞u ti√™n
    priority_order = ['Gƒê', 'PGƒê', 'TK', 'PTK', 'PK', 'BS', 'ƒêDT', 'ƒêD', 'KTV', 'NV', 'HL', 'BV']

    def get_priority(pos):
        pos = pos.upper() if pos else ''
        for i, p in enumerate(priority_order):
            if p in pos:
                return i
        return len(priority_order)

    ca_chon = request.args.get('mode', '16h')
    start_date = request.args.get('start_date', '2025-06-01')
    end_date = request.args.get('end_date', '2025-06-30')
    start_dt = datetime.strptime(start_date, '%Y-%m-%d').date()
    end_dt = datetime.strptime(end_date, '%Y-%m-%d').date()

    hscc_depts = [d.department_name for d in HSCCDepartment.query.all()]
    rates = {(r.ca_loai, r.truc_loai, r.ngay_loai): r.don_gia for r in ShiftRateConfig.query.all()}

    # Query l·ªãch tr·ª±c
    schedules = (
        Schedule.query.join(User).join(Shift)
        .filter(Schedule.work_date >= start_dt, Schedule.work_date <= end_dt)
        .filter(Shift.duration == (16 if ca_chon == '16h' else 24))
        .filter(~Shift.name.ilike('%th∆∞·ªùng tr√∫%'))
        .all()
    )

    grouped = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))

    for s in schedules:
        user = s.user
        dept = user.department or 'Kh√¥ng r√µ'
        key = ("HSCC" if dept in hscc_depts else "th∆∞·ªùng", classify_day(s.work_date))
        grouped[dept][user][key] += 1

    summary_rows = []
    total = defaultdict(int)

    # S·∫Øp x·∫øp khoa theo t√™n
    for i, (dept, users) in enumerate(sorted(grouped.items(), key=lambda x: x[0]), start=1):
        # Th√™m header khoa
        summary_rows.append({
            'is_dept': True,
            'index_label': f"{roman(i)}.",
            'department': dept
        })

        # S·∫Øp x·∫øp nh√¢n s·ª± trong khoa theo ch·ª©c danh ∆∞u ti√™n
        sorted_users = sorted(users.items(), key=lambda x: (get_priority(x[0].position), x[0].name))

        for j, (user, counts) in enumerate(sorted_users, start=1):
            row = {
                'is_dept': False,
                'index_label': str(j),
                'department': dept,
                'full_name': user.name,
                'is_contract': user.contract_type and 'h·ª£p ƒë·ªìng' in user.contract_type.lower(),
                'thuong_thuong': 0,
                'hscc_thuong': 0,
                'thuong_nghi': 0,
                'hscc_nghi': 0,
                'thuong_le': 0,
                'hscc_le': 0,
                'total_shifts': 0,
                'tien_qd73': 0,
                'tien_an': 0,
                'tong_tien': 0
            }

            for key, so_ngay in counts.items():
                loai_truc, ngay_loai = key
                don_gia = rates.get((ca_chon, loai_truc, ngay_loai), 0)
                tien = so_ngay * don_gia

                if (loai_truc, ngay_loai) == ('th∆∞·ªùng', 'ng√†y_th∆∞·ªùng'):
                    row['thuong_thuong'] = so_ngay
                elif (loai_truc, ngay_loai) == ('HSCC', 'ng√†y_th∆∞·ªùng'):
                    row['hscc_thuong'] = so_ngay
                elif (loai_truc, ngay_loai) == ('th∆∞·ªùng', 'ng√†y_ngh·ªâ'):
                    row['thuong_nghi'] = so_ngay
                elif (loai_truc, ngay_loai) == ('HSCC', 'ng√†y_ngh·ªâ'):
                    row['hscc_nghi'] = so_ngay
                elif (loai_truc, ngay_loai) == ('th∆∞·ªùng', 'ng√†y_l·ªÖ'):
                    row['thuong_le'] = so_ngay
                elif (loai_truc, ngay_loai) == ('HSCC', 'ng√†y_l·ªÖ'):
                    row['hscc_le'] = so_ngay

                row['tien_qd73'] += tien
                row['total_shifts'] += so_ngay

            row['tien_an'] = row['total_shifts'] * 15000
            row['tong_tien'] = row['tien_qd73'] + row['tien_an']

            for k in ['thuong_thuong', 'hscc_thuong', 'thuong_nghi', 'hscc_nghi', 'thuong_le', 'hscc_le',
                      'total_shifts', 'tien_qd73', 'tien_an', 'tong_tien']:
                total[k] += row[k]

            summary_rows.append(row)

    now = datetime.now()

    return render_template(
        'shift_payment_summary_print.html',
        summary_rows=summary_rows,
        total_shifts=total['total_shifts'],
        total_qd73=total['tien_qd73'],
        total_an=total['tien_an'],
        total_sum=total['tong_tien'],
        sum_thuong_thuong=total['thuong_thuong'],
        sum_hscc_thuong=total['hscc_thuong'],
        sum_thuong_nghi=total['thuong_nghi'],
        sum_hscc_nghi=total['hscc_nghi'],
        sum_thuong_le=total['thuong_le'],
        sum_hscc_le=total['hscc_le'],
        tong_tien_bang_chu=num2text(int(total['tong_tien'])),
        thang=start_dt.month,
        nam=start_dt.year,
        now=now,
        mode=ca_chon
    )

@app.route('/configure-hscc/delete/<int:dept_id>', methods=['POST'])
def delete_hscc(dept_id):
    if session.get('role') != 'admin':
        return "Kh√¥ng c√≥ quy·ªÅn."
    dept = HSCCDepartment.query.get_or_404(dept_id)
    db.session.delete(dept)
    db.session.commit()
    return redirect('/configure-hscc')

import unicodedata

def _normalize(s: str) -> str:
    # b·ªè d·∫•u + lower ƒë·ªÉ so kh·ªõp ·ªïn ƒë·ªãnh
    s = unicodedata.normalize('NFD', s)
    s = ''.join(ch for ch in s if unicodedata.category(ch) != 'Mn')
    return s.lower().strip()

from flask import request, redirect, render_template
from datetime import datetime
import unicodedata
from sqlalchemy import func

def _normalize(s: str) -> str:
    s = unicodedata.normalize('NFD', s or '')
    s = ''.join(ch for ch in s if unicodedata.category(ch) != 'Mn')
    return s.lower().strip()

# =========================
# HAZARD CONFIG (NO MERGE)
# =========================

from datetime import datetime
from flask import request, redirect, render_template, session
# from models import db
# from models.user import User
# from models.hazard_config import HazardConfig

def _unit_normalize(unit_raw: str) -> str:
    """Chu·∫©n ho√° ƒë∆°n v·ªã t·ª´ form ‚Üí m·ªôt trong: '%', 'ƒë', 'ngay', 'gio'."""
    u = (unit_raw or '').strip().lower()
    mapping = {
        '%': '%', 'percent': '%', 'pct': '%',
        'ƒë': 'ƒë', 'd': 'ƒë', 'vnƒë': 'ƒë', 'vnd': 'ƒë',
        'ng√†y': 'ngay', 'ngay': 'ngay', 'day': 'ngay',
        'gi·ªù': 'gio', 'gio': 'gio', 'hour': 'gio'
    }
    return mapping.get(u, u)


import unicodedata

# ---- ROUTE GI·ªÆ NGUY√äN, CH·ªà B·ªî SUNG THEO Y√äU C·∫¶U ----
@app.route('/hazard-config', methods=['GET', 'POST'])
def hazard_config():
    if session.get('role') != 'admin':
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.", 403

    if request.method == 'POST':
        try:
            departments = request.form.getlist('departments')
            if not departments:
                return "Ch∆∞a ch·ªçn khoa.", 400

            hazard_level = float(request.form['hazard_level'])

            unit = _unit_normalize(request.form.get('unit'))
            if unit not in ('%', 'ƒë', 'ngay', 'gio'):
                return "ƒê∆°n v·ªã kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n %, ƒë, ng√†y, gi·ªù.", 400

            duration_hours = float(request.form['duration_hours'])

            position = (request.form.get('position') or None)
            machine_type = (request.form.get('machine_type') or None)

            start_date = datetime.strptime(request.form['start_date'], '%Y-%m-%d').date()
            end_date   = datetime.strptime(request.form['end_date'],   '%Y-%m-%d').date()
            if start_date > end_date:
                return "Kho·∫£ng th·ªùi gian kh√¥ng h·ª£p l·ªá.", 400

            # ‚òÖ NEW: c·ªù √°p d·ª•ng ri√™ng cho T7/CN v√† ch·ªçn n·ª≠a ng√†y/c·∫£ ng√†y
            weekend_only = (request.form.get('weekend_only') == 'on')          # checkbox
            weekend_part = request.form.get('weekend_part')  # 'full' | 'half' | None

            # ‚òÖ NEW: N·∫øu ch·ªçn T7/CN ‚Üí ch·ªâ sinh b·∫£n ghi cho c√°c ng√†y T7/CN
            # ‚òÖ NEW: v√† CH·ªà √°p d·ª•ng cho khoa ƒë√£ c√≥ c·∫•u h√¨nh ƒë·ªôc h·∫°i (HazardConfig) tr∆∞·ªõc ƒë√≥
            if weekend_only:
                # √âp ƒë∆°n v·ªã v·ªÅ gi·ªù ƒë·ªÉ th·ªëng nh·∫•t (d√π user nh·∫≠p g√¨)
                if unit != 'gio':
                    unit = 'gio'

                # C·∫£ ng√†y = 17h, N·ª≠a ng√†y = 7h
                weekend_hours = 17.0 if weekend_part == 'full' else 7.0

                for department in departments:
                    # ‚òÖ NEW: ki·ªÉm tra khoa ƒë√£ t·ª´ng c√≥ c·∫•u h√¨nh ƒë·ªôc h·∫°i n√†o ch∆∞a
                    has_hazard = db.session.query(HazardConfig.id).filter(
                        HazardConfig.department == department
                    ).first()

                    if not has_hazard:
                        # Ch∆∞a c√≥ c·∫•u h√¨nh ƒë·ªôc h·∫°i ‚Üí b·ªè qua khoa n√†y
                        continue

                    # ‚òÖ NEW: th√™m b·∫£n ghi cho t·ª´ng ng√†y T7/CN trong kho·∫£ng
                    cur = start_date
                    while cur <= end_date:
                        # weekday(): Mon=0 ... Sun=6 ‚Üí T7=5, CN=6
                        if cur.weekday() in (5, 6):
                            db.session.add(HazardConfig(
                                department=department,
                                position=position,
                                hazard_level=hazard_level,
                                unit=unit,
                                duration_hours=weekend_hours,
                                start_date=cur,   # ch·ªâ √°p d·ª•ng trong ng√†y
                                end_date=cur,
                                machine_type=machine_type
                            ))
                        cur += timedelta(days=1)

                db.session.commit()
                return redirect('/hazard-config')

            # --- KH√îNG G·ªòP: lu√¥n t·∫°o b·∫£n ghi m·ªõi cho t·ª´ng khoa (lu·ªìng chu·∫©n c≈©) ---
            for department in departments:
                db.session.add(HazardConfig(
                    department=department,
                    position=position,
                    hazard_level=hazard_level,
                    unit=unit,
                    duration_hours=duration_hours,
                    start_date=start_date,
                    end_date=end_date,
                    machine_type=machine_type
                ))

            db.session.commit()
            return redirect('/hazard-config')

        except Exception as e:
            db.session.rollback()
            return f"L·ªói x·ª≠ l√Ω: {e}", 400

    # --- GET: chu·∫©n b·ªã d·ªØ li·ªáu cho form ---
    departments_raw = [
        d[0] for d in db.session.query(User.department)
        .filter(User.department.isnot(None))
        .distinct()
        .order_by(User.department)
        .all()
    ]

    # H√†m chu·∫©n h√≥a b·ªè d·∫•u ti·∫øng Vi·ªát v√† lowercase
    def _normalize_local(s: str) -> str:
        s = (s or '').strip().lower()
        s = ''.join(c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn')
        return s

    departments = [
        {"name": d, "is_lab": ("xet nghiem" in _normalize_local(d))}
        for d in departments_raw
    ]

    machine_types = [
        ("", "T·∫•t c·∫£ m√°y"),
        ("M√°y huy·∫øt h·ªçc", "M√°y huy·∫øt h·ªçc"),
        ("M√°y truy·ªÅn m√°u", "M√°y truy·ªÅn m√°u"),
        ("M√°y vi sinh", "M√°y vi sinh"),
    ]

    configs = HazardConfig.query.order_by(
        HazardConfig.department.asc(),
        HazardConfig.start_date.desc()
    ).all()

    return render_template(
        'hazard_config.html',
        configs=configs,
        departments=departments,
        machine_types=machine_types
    )


@app.route('/hazard-config/edit/<int:config_id>', methods=['GET', 'POST'])
def edit_hazard_config(config_id):
    if session.get('role') != 'admin':
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p.", 403

    config = HazardConfig.query.get_or_404(config_id)

    if request.method == 'POST':
        try:
            department = (request.form.get('department') or '').strip()
            if not department:
                return "Thi·∫øu khoa.", 400

            hazard_level = float(request.form['hazard_level'])

            unit = _unit_normalize(request.form.get('unit'))
            if unit not in ('%', 'ƒë', 'ngay', 'gio'):
                return "ƒê∆°n v·ªã kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n %, ƒë, ng√†y, gi·ªù.", 400

            duration_hours = float(request.form['duration_hours'])
            position = (request.form.get('position') or None)
            machine_type = (request.form.get('machine_type') or None)

            start_date = datetime.strptime(request.form['start_date'], '%Y-%m-%d').date()
            end_date   = datetime.strptime(request.form['end_date'],   '%Y-%m-%d').date()
            if start_date > end_date:
                return "Kho·∫£ng th·ªùi gian kh√¥ng h·ª£p l·ªá.", 400

            # ‚òÖ NEW: cho ph√©p √©p logic T7/CN khi ch·ªânh s·ª≠a
            weekend_only = (request.form.get('weekend_only') == 'on')
            weekend_part = request.form.get('weekend_part')  # 'full' | 'half' | None
            if weekend_only:
                unit = 'gio'  # √©p ƒë∆°n v·ªã gi·ªù
                duration_hours = 17.0 if weekend_part == 'full' else 7.0

            # KH√îNG G·ªòP: ch·ªâ c·∫≠p nh·∫≠t b·∫£n hi·ªán t·∫°i
            config.department = department
            config.position = position
            config.hazard_level = hazard_level
            config.unit = unit
            config.duration_hours = duration_hours
            config.start_date = start_date
            config.end_date = end_date
            config.machine_type = machine_type

            db.session.commit()
            return redirect('/hazard-config')

        except Exception as e:
            db.session.rollback()
            return f"L·ªói x·ª≠ l√Ω: {e}", 400

    # --- GET: d·ªØ li·ªáu cho form ---
    departments_raw = [
        d[0] for d in db.session.query(User.department)
        .filter(User.department.isnot(None))
        .distinct()
        .order_by(User.department)
        .all()
    ]

    def _normalize_local(s: str) -> str:
        return (s or '').lower().strip()

    departments = [
        {"name": d, "is_lab": ("xet nghiem" in _normalize_local(d))}
        for d in departments_raw
    ]

    machine_types = [
        ("", "T·∫•t c·∫£ m√°y"),
        ("M√°y huy·∫øt h·ªçc", "M√°y huy·∫øt h·ªçc"),
        ("M√°y truy·ªÅn m√°u", "M√°y truy·ªÅn m√°u"),
        ("M√°y vi sinh", "M√°y vi sinh"),
    ]

    return render_template(
        'edit_hazard_config.html',
        config=config,
        departments=departments,
        machine_types=machine_types
    )

@app.route('/hazard-config/delete/<int:config_id>')
def delete_hazard_config(config_id):
    config = HazardConfig.query.get_or_404(config_id)
    db.session.delete(config)
    db.session.commit()
    return redirect('/hazard-config')

from models.user_machine_hazard import UserMachineHazard

from flask import jsonify
import unicodedata
from sqlalchemy import or_
from datetime import date, datetime, timedelta
import calendar, unicodedata
from collections import defaultdict

def _normalize(s: str) -> str:
    s = unicodedata.normalize('NFD', s or '')
    s = ''.join(ch for ch in s if unicodedata.category(ch) != 'Mn')
    return s.lower().strip()

# ========= /bang-doc-hai (VIEW) =========
@app.route('/bang-doc-hai', methods=['GET', 'POST'])
def bang_doc_hai():
    """
    VIEW b·∫£ng ƒë·ªôc h·∫°i:
    - B·ªánh nhi·ªát ƒë·ªõi & X√©t nghi·ªám: tr·ª±c 24h -> 17h; H√îM SAU + n·ª≠a ng√†y -> 7h; c√≤n l·∫°i 8h / 4h
    - C√°c khoa kh√°c: 8h n·∫øu l√†m (k·ªÉ c·∫£ tr·ª±c), 4h n·∫øu n·ª≠a ng√†y
    - Ch·ªâ h∆∞·ªüng khi ƒëi l√†m; ngh·ªâ / ƒëi h·ªçc / c√¥ng t√°c... kh√¥ng h∆∞·ªüng
    - M·ª©c %: l·∫•y t·ª´ HazardConfig hi·ªáu l·ª±c t·∫°i start_date, ∆∞u ti√™n (ch·ª©c v·ª• > m√°y > b·∫£n ghi m·ªõi h∆°n)
    - Cho ph√©p l·ªçc theo m√°y x√©t nghi·ªám (machine_type)
    """
    if session.get('role') not in ['admin', 'admin1', 'manager']:
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p."

    # ===== Inputs =====
    selected_department = request.values.get('department')
    selected_machine    = request.values.get('machine_type')  # c√≥ th·ªÉ r·ªóng
    start_date_str      = request.values.get('start')
    end_date_str        = request.values.get('end')
    selected_user_ids   = request.values.getlist('hazard_user_ids')

    # ===== Dates =====
    from datetime import date, datetime, timedelta
    import calendar, unicodedata
    from collections import defaultdict
    from sqlalchemy import or_

    if not start_date_str or not end_date_str:
        today = date.today()
        start_date = date(today.year, today.month, 1)
        end_date   = date(today.year, today.month, calendar.monthrange(today.year, today.month)[1])
    else:
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
        end_date   = datetime.strptime(end_date_str,   '%Y-%m-%d').date()

    days = [start_date + timedelta(days=i) for i in range((end_date - start_date).days + 1)]

    # ===== Dropdown khoa =====
    role = session.get('role')
    user_dept = session.get('department')
    is_super = role in ('admin', 'admin1')  # admin1 nh√¨n nh∆∞ admin

    if is_super:
        departments = ['T·∫•t c·∫£'] + [d[0] for d in db.session.query(User.department)
                                    .filter(User.department.isnot(None))
                                    .distinct().order_by(User.department).all()]
    else:
        departments = [user_dept]

    # ===== Users =====
    users_q = User.query.filter(User.active == True)
    if is_super:
        if selected_department and selected_department != 'T·∫•t c·∫£':
            users_q = users_q.filter(User.department == selected_department)
    else:
        if user_dept:
            users_q = users_q.filter(User.department == user_dept)

    users = users_q.all()
    if selected_user_ids:
        ids_int = set(map(int, selected_user_ids))
        users = [u for u in users if u.id in ids_int]

    # S·∫Øp x·∫øp theo ch·ª©c danh r·ªìi t√™n
    PRIORITY_ORDER = ['Gƒê','PGƒê','TK','TP','PTK','PTP','BS','BSCK1','BSCK2','ƒêDT','KTV','KTVT','ƒêD','NV','HL','BV']
    def _sort_key(u):
        pos = (u.position or '').upper().strip()
        for i, p in enumerate(PRIORITY_ORDER):
            if pos.startswith(p):
                return (i, (u.name or '').lower())
        return (len(PRIORITY_ORDER), (u.name or '').lower())
    users = sorted(users, key=_sort_key)

    # ===== L·ªãch & Ca =====
    query_start = start_date - timedelta(days=1)   # ƒë·ªÉ b·∫Øt ƒë√™m tr·ª±c h√¥m tr∆∞·ªõc
    user_ids = [u.id for u in users]

    schedules_q = Schedule.query.filter(
        Schedule.work_date >= query_start,
        Schedule.work_date <= end_date
    )
    # L·ªçc theo danh s√°ch user
    schedules_q = schedules_q.filter(
        Schedule.user_id.in_(user_ids)
    ) if user_ids else schedules_q.filter(db.text('1=0'))

    # L·ªçc theo m√°y x√©t nghi·ªám (n·∫øu c√≥ ch·ªçn)
    if selected_machine:
        schedules_q = schedules_q.filter(
            or_(Schedule.machine_type == selected_machine,
                Schedule.machine_type.is_(None),
                Schedule.machine_type == '')
        )

    schedules = schedules_q.all()

    def _as_date(v):
        return v if isinstance(v, date) and not isinstance(v, datetime) else v.date()

    scheds_by_key = defaultdict(list)   # (user, date) -> list[Schedule]
    for s in schedules:
        scheds_by_key[(s.user_id, _as_date(s.work_date))].append(s)

    ca_map = {ca.id: ca for ca in Shift.query.all()}

    # ===== Hazard config =====
    hazard_cfgs = HazardConfig.query.filter(
        HazardConfig.start_date <= end_date,
        HazardConfig.end_date   >= start_date
    ).all()

    # --- CHU·∫®N H√ìA CHU·ªñI ---
    def _norm(s: str) -> str:
        s = (s or '')
        s = unicodedata.normalize('NFD', s)
        s = ''.join(ch for ch in s if unicodedata.category(ch) != 'Mn')
        s = s.replace('ƒê', 'D').replace('ƒë', 'd')
        return s.lower().strip()

    # ∆Øu ti√™n: ch·ª©c v·ª• (2|1|0), m√°y (2|1|0), ng√†y b·∫Øt ƒë·∫ßu (m·ªõi h∆°n t·ªët h∆°n)
    def pick_hazard_level(user) -> float:
        cand = [c for c in hazard_cfgs
                if c.department == user.department and c.start_date <= start_date <= c.end_date]
        if not cand:
            return 0.0

        up = (user.position or '').upper().strip()
        sel = (selected_machine or '').strip()

        def pos_score(c):
            cp = (c.position or '').upper().strip()
            if not cp: return 1
            return 2 if up.startswith(cp) else 0

        def mac_score(c):
            cm = (c.machine_type or '').strip()
            if not cm: return 1
            return 2 if cm == sel else 0

        best = max(cand, key=lambda c: (pos_score(c), mac_score(c), c.start_date or date.min))
        try:
            return float(best.hazard_level or 0.0)
        except:
            return 0.0

    # ===== Nh·∫≠n di·ªán ca =====
    def _is_oncall(sched_obj, shift_obj) -> bool:
        # theo gi·ªù
        try: dur_shift = float(getattr(shift_obj, 'duration', 0) or 0.0)
        except: dur_shift = 0.0
        if dur_shift >= 16.5: return True
        try: dur_sched = float(getattr(sched_obj, 'work_hours', 0) or 0.0)
        except: dur_sched = 0.0
        if dur_sched >= 16.5: return True

        # theo text
        pool = []
        if shift_obj:
            pool += [getattr(shift_obj, 'name', ''), getattr(shift_obj, 'code', '')]
        if sched_obj:
            for fld in ('code','value','note','text'):
                pool.append(getattr(sched_obj, fld, '') or '')
        t = _norm(' '.join(pool))
        t_compact = t.replace(' ', '')
        if 'truc24' in t_compact or '24h' in t: return True
        return ('xd' in t) and ('24' in t)

    def _is_half(sched_obj, shift_obj) -> bool:
        h = None
        if sched_obj and sched_obj.work_hours not in (None, 0):
            try: h = float(sched_obj.work_hours)
            except: h = None
        if h is None and shift_obj:
            try: h = float(getattr(shift_obj, 'duration', 0) or 0)
            except: h = None
        if h is not None and 0 < h <= 4.5: return True
        pool = []
        if shift_obj:
            pool += [getattr(shift_obj, 'name', ''), getattr(shift_obj, 'code', '')]
        if sched_obj:
            for fld in ('code','value','note','text'):
                pool.append(getattr(sched_obj, fld, '') or '')
        t = _norm(' '.join(pool))
        return any(k in t for k in ['1/2','nua','half','nn/','nn','/x','/nt'])

    # ===== KH√îNG L√ÄM (off day) ‚Üí kh√¥ng h∆∞·ªüng =====
    def _norm_text_for_flags(s: str) -> str:
        s = (s or '')
        s = unicodedata.normalize('NFD', s)
        s = ''.join(ch for ch in s if unicodedata.category(ch) != 'Mn')
        s = s.replace('ƒê','D').replace('ƒë','d')
        return s.lower().strip()

    def _is_off_day(sched_obj, shift_obj) -> bool:
        """
        TRUE n·∫øu l√† ng√†y KH√îNG L√ÄM ‚Üí kh√¥ng h∆∞·ªüng ƒë·ªôc h·∫°i:
        - ngh·ªâ ph√©p / ngh·ªâ b√π / ngh·ªâ ·ªëm / thai s·∫£n / ngh·ªâ l·ªÖ...
        - ƒëi h·ªçc / t·∫≠p hu·∫•n / ƒë√†o t·∫°o
        - ƒëi c√¥ng t√°c
        Nh·∫≠n di·ªán theo name/code/value/note/text c·ªßa ca & l·ªãch.
        """
        pool = []
        if shift_obj:
            pool += [getattr(shift_obj, 'name', ''), getattr(shift_obj, 'code', '')]
        if sched_obj:
            for fld in ('code', 'value', 'note', 'text'):
                pool.append(getattr(sched_obj, fld, '') or '')

        t = _norm_text_for_flags(' '.join(pool))
        t_compact = t.replace(' ', '')

        # Ngh·ªâ
        if ('nghiphep' in t_compact or 'nghibu' in t_compact or 'nghiom' in t_compact or
            'omdau' in t_compact or 'thaisan' in t_compact or 'nghile' in t_compact):
            return True
        if ' nghi phep' in t or 'phep ' in t or t == 'p' or ' nghi bu' in t:
            return True

        # H·ªçc / ƒë√†o t·∫°o / t·∫≠p hu·∫•n
        if any(k in t_compact for k in ['dihoc','hoc','taphuan','daotao','hocvien','huanluyen']):
            return True
        if '/h' in t or 'h/' in t:
            return True

        # C√¥ng t√°c
        if any(k in t_compact for k in ['congtac','ctac']):
            return True
        if '/ct' in t or 'ct/' in t:
            return True

        return False

    # T√≥m t·∫Øt 1 ng√†y
    def _day_meta(user_id, d):
        """
        Tr·∫£: (max_hours, oncall_today, half_today, has_any, off_day)
        """
        lst = scheds_by_key.get((user_id, d), [])
        if not lst:
            return (0.0, False, False, False, False)

        max_hours = 0.0
        oncall = False
        half   = False
        off    = False

        for s in lst:
            ca = ca_map.get(getattr(s, 'shift_id', None))
            # gi·ªù
            if s.work_hours not in (None, 0):
                try: h = float(s.work_hours)
                except: h = 0.0
            else:
                try: h = float(getattr(ca, 'duration', 0) or 0)
                except: h = 0.0
            if h > max_hours: max_hours = h

            # flags
            if _is_off_day(s, ca): off = True
            if _is_oncall(s, ca):  oncall = True
            if _is_half(s, ca):    half   = True

        return (max_hours, oncall, half, True, off)

    # ===== Build table =====
    nhom_chung, nhom_ho_ly = [], []

    for u in users:
        row = {
            'name': u.name,
            'position': u.position or '',
            'department': u.department,
            'daily_hours': [],
            'total_days': 0,
            'hazard_level': pick_hazard_level(u)
        }

        dept_key  = _norm(u.department or '')
        is_special = ('benh nhiet doi' in dept_key) or ('xet nghiem' in dept_key)

        for d in days:
            today_hours, today_oncall, today_half, today_has, today_off = _day_meta(u.id, d)
            if not today_has:
                row['daily_hours'].append('‚Äì')
                continue

            # KH√îNG L√ÄM ‚Üí kh√¥ng h∆∞·ªüng
            if today_off:
                row['daily_hours'].append('‚Äì')
                continue

            prev_oncall = _day_meta(u.id, d - timedelta(days=1))[1]

            if is_special:
                # 17h / 7h / 8h / 4h
                if today_oncall:
                    desired = 17
                elif prev_oncall and today_half:
                    desired = 7
                elif today_half:
                    desired = 4
                else:
                    desired = 8 if (today_hours >= 7.5 or today_hours >= 6) else (4 if today_hours > 0 else 0)
            else:
                # Khoa kh√°c: 8/4 (tr·ª±c 24h v·∫´n 8h)
                desired = 4 if today_half else (8 if (today_hours > 0 or today_oncall) else 0)

            row['daily_hours'].append(f"{int(desired)}h" if desired else "‚Äì")
            if desired:
                row['total_days'] += 1

        (nhom_ho_ly if (row['position'] or '').upper().startswith('HL') else nhom_chung).append(row)

    return render_template(
        'bang_doc_hai.html',
        nhom_chung=nhom_chung,
        nhom_ho_ly=nhom_ho_ly,
        departments=departments,
        selected_department=selected_department,
        start=start_date.strftime('%Y-%m-%d'),
        end=end_date.strftime('%Y-%m-%d'),
        days_in_month=days,
        all_users=users,
        selected_user_ids=selected_user_ids,
        selected_machine=selected_machine
    )

@app.route('/machines-by-department', endpoint='machines_by_department', methods=['GET'])
def machines_by_department():
    from sqlalchemy import func
    import unicodedata  # ‚Üê c·∫ßn import ·ªü ƒë√¢y

    dept = (request.args.get('department') or '').strip()
    if not dept or dept == 'T·∫•t c·∫£':
        role = session.get('role')
        user_dept = session.get('department')
        # cho admin1 gi·ªëng admin
        if role not in ('admin', 'admin1') and user_dept:
            dept = user_dept
        else:
            return jsonify([])

    q1 = (
        db.session.query(Schedule.machine_type)
        .join(User, User.id == Schedule.user_id)
        .filter(
            User.department == dept,
            Schedule.machine_type.isnot(None),
            func.trim(Schedule.machine_type) != ''
        )
        .distinct()
    )

    q2 = (
        db.session.query(HazardConfig.machine_type)
        .filter(
            HazardConfig.department == dept,
            HazardConfig.machine_type.isnot(None),
            func.trim(HazardConfig.machine_type) != ''
        )
        .distinct()
    )

    raw = [r[0] for r in q1.all()] + [r[0] for r in q2.all()]

    def _normalize_no_accent(s: str) -> str:
        s = (s or '').strip()
        s = unicodedata.normalize('NFD', s)
        return ''.join(ch for ch in s if unicodedata.category(ch) != 'Mn').casefold()

    best_by_key = {}
    for name in raw:
        key = _normalize_no_accent(name)
        if key not in best_by_key or len(name) > len(best_by_key[key]):
            best_by_key[key] = name.strip()

    return jsonify(sorted(best_by_key.values(), key=_normalize_no_accent))

@app.route('/user-machine-hazard/delete/<int:id>', methods=['POST'])
def delete_user_machine_hazard(id):
    if session.get('role') not in ['admin', 'admin1', 'manager']:
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p."
    mapping = UserMachineHazard.query.get_or_404(id)
    db.session.delete(mapping)
    db.session.commit()
    return redirect('/user-machine-hazard')

from flask import render_template, request, session
from datetime import datetime, timedelta, date
import calendar
from models import User, Schedule, Shift, HazardConfig

@app.route('/bang-doc-hai/print', methods=['POST'])
def bang_doc_hai_print():
    # Quy·ªÅn
    if session.get('role') not in ['admin', 'admin1', 'manager']:
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p."

    selected_department = request.values.get('department')
    selected_machine    = request.values.get('machine_type')
    selected_user_ids   = request.values.getlist('hazard_user_ids')
    start               = request.values.get('start')
    end                 = request.values.get('end')

    from datetime import date, datetime, timedelta
    import calendar, unicodedata
    from collections import defaultdict
    from sqlalchemy import or_

    if not start or not end:
        today = date.today()
        start_date = date(today.year, today.month, 1)
        end_date   = date(today.year, today.month, calendar.monthrange(today.year, today.month)[1])
    else:
        start_date = datetime.strptime(start, '%Y-%m-%d').date()
        end_date   = datetime.strptime(end,   '%Y-%m-%d').date()

    days_range = [start_date + timedelta(days=i) for i in range((end_date - start_date).days + 1)]
    query_start = start_date - timedelta(days=1)

    # Users
    users_q = User.query.filter(User.active == True)
    if selected_department and selected_department != 'T·∫•t c·∫£':
        users_q = users_q.filter(User.department == selected_department)
    users = users_q.all()
    if selected_user_ids:
        ids_int = set(map(int, selected_user_ids))
        users = [u for u in users if u.id in ids_int]

    PRIORITY_ORDER = ['Gƒê','PGƒê','TK','TP','PTK','PTP','BS','BSCK1','BSCK2','ƒêDT','KTV','KTVT','ƒêD','NV','HL','BV']
    def _sort_key(u):
        pos = (u.position or '').upper().strip()
        for i,p in enumerate(PRIORITY_ORDER):
            if pos.startswith(p):
                return (i, (u.name or '').lower())
        return (len(PRIORITY_ORDER), (u.name or '').lower())
    users = sorted(users, key=_sort_key)

    # L·ªãch & ca
    schedules_q = Schedule.query.filter(
        Schedule.work_date >= query_start,
        Schedule.work_date <= end_date
    )
    if selected_machine:
        schedules_q = schedules_q.filter(
            or_(Schedule.machine_type == selected_machine,
                Schedule.machine_type.is_(None),
                Schedule.machine_type == '')
        )
    schedules = schedules_q.all()
    ca_map = {ca.id: ca for ca in Shift.query.all()}

    def _as_date(v):
        return v if isinstance(v, date) and not isinstance(v, datetime) else v.date()
    scheds_by_key = defaultdict(list)
    for s in schedules:
        scheds_by_key[(s.user_id, _as_date(s.work_date))].append(s)

    # % c·∫•u h√¨nh
    hazard_cfgs = HazardConfig.query.filter(
        HazardConfig.start_date <= end_date,
        HazardConfig.end_date   >= start_date
    ).all()

    def _norm(s: str) -> str:
        s = (s or '')
        s = unicodedata.normalize('NFD', s)
        s = ''.join(ch for ch in s if unicodedata.category(ch) != 'Mn')
        s = s.replace('ƒê', 'D').replace('ƒë', 'd')
        return s.lower().strip()

    def pick_hazard_level(user) -> float:
        cand = [c for c in hazard_cfgs
                if c.department == user.department and c.start_date <= start_date <= c.end_date]
        if not cand:
            return 0.0
        up  = (user.position or '').upper().strip()
        sel = (selected_machine or '').strip()

        def pos_score(c):
            cp = (c.position or '').upper().strip()
            if not cp: return 1
            return 2 if up.startswith(cp) else 0

        def mac_score(c):
            cm = (c.machine_type or '').strip()
            if not cm: return 1
            return 2 if cm == sel else 0

        best = max(cand, key=lambda c: (pos_score(c), mac_score(c), c.start_date or date.min))
        try:
            return float(best.hazard_level or 0.0)
        except:
            return 0.0

    # Nh·∫≠n di·ªán ca/off t∆∞∆°ng t·ª± VIEW
    OFF_KEYWORDS = [
        'nghi phep','phep','np','nb',
        'om','om dau','benh','dieu tri',
        'thai san','ts',
        'cong tac','ct ',
        'dao tao','hoc','tap huan','boi duong',
        'nghi bu','nghi le','le',
    ]
    def _is_off_day(sched_obj, shift_obj) -> bool:
        pool = []
        if shift_obj:
            pool += [getattr(shift_obj, 'name', ''), getattr(shift_obj, 'code', '')]
        if sched_obj:
            for fld in ('code','value','note','text'):
                pool.append(getattr(sched_obj, fld, '') or '')
        t = ' ' + _norm(' '.join(pool)) + ' '
        def has_kw(kw):
            kw = kw.strip()
            return (' ' + kw + ' ') in t or t.endswith(' ' + kw) or t.startswith(' ' + kw + ' ')
        return any(has_kw(kw) for kw in OFF_KEYWORDS)

    def _is_oncall(sched_obj, shift_obj) -> bool:
        try: dur_shift = float(getattr(shift_obj, 'duration', 0) or 0.0)
        except: dur_shift = 0.0
        if dur_shift >= 16.5: return True
        try: dur_sched = float(getattr(sched_obj, 'work_hours', 0) or 0.0)
        except: dur_sched = 0.0
        if dur_sched >= 16.5: return True
        pool = []
        if shift_obj:
            pool += [getattr(shift_obj, 'name', ''), getattr(shift_obj, 'code', '')]
        if sched_obj:
            for fld in ('code','value','note','text'):
                pool.append(getattr(sched_obj, fld, '') or '')
        t = _norm(' '.join(pool))
        t_compact = t.replace(' ', '')
        if 'truc24' in t_compact or '24h' in t: return True
        return ('xd' in t and '24' in t)

    def _is_half(sched_obj, shift_obj) -> bool:
        h = None
        if sched_obj and sched_obj.work_hours not in (None, 0):
            try: h = float(sched_obj.work_hours)
            except: h = None
        if h is None and shift_obj:
            try: h = float(getattr(shift_obj, 'duration', 0) or 0)
            except: h = None
        if h is not None and 0 < h <= 4.5: return True
        pool = []
        if shift_obj:
            pool += [getattr(shift_obj, 'name', ''), getattr(shift_obj, 'code', '')]
        if sched_obj:
            for fld in ('code','value','note','text'):
                pool.append(getattr(sched_obj, fld, '') or '')
        t = _norm(' '.join(pool))
        return any(k in t for k in ['1/2','nua','half','nn/','nn','/x','/nt'])

    def _is_full_day_hours(h: float) -> bool:
        try: return float(h or 0) >= 7.5
        except: return False

    def _day_meta(user_id, d):
        lst = scheds_by_key.get((user_id, d), [])
        if not lst:
            return (0.0, False, False, False, False)
        max_hours = 0.0
        oncall = False
        half   = False
        off    = False
        for s in lst:
            ca = ca_map.get(getattr(s, 'shift_id', None))
            if s.work_hours not in (None, 0):
                try: h = float(s.work_hours)
                except: h = 0.0
            else:
                try: h = float(getattr(ca, 'duration', 0) or 0)
                except: h = 0.0
            if h > max_hours: max_hours = h
            if _is_oncall(s, ca): oncall = True
            if _is_half(s, ca):   half   = True
            if _is_off_day(s, ca): off  = True
        return (max_hours, oncall, half, True, off)

    # Build table
    table_data = []
    for u in users:
        row = {
            'name': u.name,
            'position': u.position or '',
            'hazard_level': pick_hazard_level(u),
            'daily_hours': [],
            'total_days': 0
        }

        dept_key = _norm(u.department or '')
        is_special = ('benh nhiet doi' in dept_key) or ('xet nghiem' in dept_key)

        for d in days_range:
            today_hours, today_oncall, today_half, today_has, today_off = _day_meta(u.id, d)
            if not today_has or today_off:
                row['daily_hours'].append('‚Äì')
                continue

            prev_oncall = _day_meta(u.id, d - timedelta(days=1))[1]

            if is_special:
                if today_oncall:
                    desired = 17
                elif prev_oncall and today_half:
                    desired = 7
                elif today_half:
                    desired = 4
                else:
                    desired = 8 if (_is_full_day_hours(today_hours) or today_hours >= 6) else (4 if today_hours > 0 else 0)
            else:
                desired = 4 if today_half else (8 if (today_hours > 0 or today_oncall) else 0)

            row['daily_hours'].append(f"{int(desired)}h" if desired else "‚Äì")
            if desired:
                row['total_days'] += 1

        table_data.append(row)

    return render_template(
        'bang_doc_hai_print.html',
        table_data=table_data,
        department=selected_department or 'T·∫•t c·∫£',
        start=start_date,
        end=end_date,
        days_range=days_range,
        now=datetime.now()
    )

from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side
from io import BytesIO
from datetime import timedelta

def export_bang_doc_hai_excel_file(users, schedules, shifts, hazard_configs, start_date, end_date, selected_user_ids):
    wb = Workbook()
    ws = wb.active

    bold_font = Font(bold=True)
    center_align = Alignment(horizontal='center', vertical='center', wrap_text=True)
    thin_border = Border(
        left=Side(style='thin'), right=Side(style='thin'),
        top=Side(style='thin'), bottom=Side(style='thin')
    )

    ws.merge_cells('A1:AF1')
    ws['A1'] = "B·ªÜNH VI·ªÜN NHI T·ªàNH GIA LAI"
    ws['A1'].font = bold_font

    ws.merge_cells('A2:AF2')
    ws['A2'] = f"KHOA {users[0].department.upper()}" if users else ""
    ws['A2'].font = bold_font

    ws.merge_cells('A3:AF3')
    ws['A3'] = "B·∫¢NG CH·∫§M C√îNG H∆Ø·ªûNG M·ª®C ƒê·ªòC H·∫†I 0.2"
    ws['A3'].font = Font(bold=True, size=14)
    ws['A3'].alignment = center_align

    ws.merge_cells('A4:AF4')
    ws['A4'] = f"T·ª´ ng√†y {start_date.strftime('%d/%m/%Y')} ƒë·∫øn {end_date.strftime('%d/%m/%Y')}"

    headers = ['STT', 'H·ªç t√™n', 'Ch·ª©c v·ª•']
    num_days = (end_date - start_date).days + 1
    headers.extend([(start_date + timedelta(days=i)).day for i in range(num_days)])
    headers.append('T·ªïng ng√†y')
    ws.append(headers)

    shift_dict = {s.id: s for s in shifts}
    schedule_map = {(s.user_id, s.work_date): s for s in schedules}

    for idx, user in enumerate(users, 1):
        if selected_user_ids and str(user.id) not in selected_user_ids:
            continue

        row = [idx, user.name, user.position]
        total = 0

        for i in range(num_days):
            date_i = start_date + timedelta(days=i)
            sched = schedule_map.get((user.id, date_i))
            if not sched or not sched.shift_id:
                row.append('‚Äì')
                continue

            ca = shift_dict.get(sched.shift_id)
            if not ca:
                row.append('‚Äì')
                continue

            configs_in_day = [cfg for cfg in hazard_configs if cfg.department == user.department and cfg.start_date <= date_i <= cfg.end_date]
            if not configs_in_day:
                row.append('‚Äì')
                continue

            best_match = sorted(configs_in_day, key=lambda cfg: abs(cfg.duration_hours - ca.duration))[0]
            row.append(f"{int(best_match.duration_hours)}h")
            total += 1

        row.append(f"{total} ng√†y")
        ws.append(row)

    for row in ws.iter_rows(min_row=5, max_row=ws.max_row, max_col=ws.max_column):
        for cell in row:
            cell.alignment = center_align
            cell.border = thin_border

    sign_row = ws.max_row + 3
    ws.merge_cells(start_row=sign_row, start_column=1, end_row=sign_row, end_column=5)
    ws.merge_cells(start_row=sign_row, start_column=6, end_row=sign_row, end_column=10)
    ws.merge_cells(start_row=sign_row, start_column=11, end_row=sign_row, end_column=15)
    ws.merge_cells(start_row=sign_row, start_column=16, end_row=sign_row, end_column=20)

    ws.cell(row=sign_row, column=1, value="NG∆Ø·ªúI L·∫¨P B·∫¢NG\n(K√Ω, ghi r√µ h·ªç t√™n)").alignment = center_align
    ws.cell(row=sign_row, column=6, value="TR∆Ø·ªûNG KHOA\n(K√Ω, ghi r√µ h·ªç t√™n)").alignment = center_align
    ws.cell(row=sign_row, column=11, value="PH√íNG T·ªî CH·ª®C - HCQT\n(K√Ω, ghi r√µ h·ªç t√™n)").alignment = center_align
    ws.cell(row=sign_row, column=16, value="GI√ÅM ƒê·ªêC\n(K√Ω, ghi r√µ h·ªç t√™n)").alignment = center_align

    output = BytesIO()
    wb.save(output)
    output.seek(0)
    return output

# ‚úÖ ROUTE EXPORT FILE EXCEL
@app.route('/bang-doc-hai/export-excel', methods=['POST'], endpoint='export_bang_doc_hai_excel')
def export_bang_doc_hai_excel():
    # Cho ph√©p admin, admin1 v√† manager xu·∫•t Excel
    if session.get('role') not in ['admin', 'admin1', 'manager']:
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p."

    selected_department = request.values.get('department')
    start_date = datetime.strptime(request.values.get('start'), '%Y-%m-%d').date()
    end_date = datetime.strptime(request.values.get('end'), '%Y-%m-%d').date()
    selected_user_ids = request.values.getlist('hazard_user_ids')

    # L·∫•y danh s√°ch user theo khoa
    users = User.query.filter(User.active == True)
    if selected_department and selected_department != 'T·∫•t c·∫£':
        users = users.filter(User.department == selected_department)
    users = users.all()

    # L·∫•y d·ªØ li·ªáu l·ªãch tr·ª±c v√† hazard config
    schedules = Schedule.query.filter(
        Schedule.work_date >= start_date,
        Schedule.work_date <= end_date
    ).all()

    hazard_configs = HazardConfig.query.filter(
        HazardConfig.start_date <= end_date,
        HazardConfig.end_date >= start_date
    ).all()

    shifts = Shift.query.all()

    # Xu·∫•t file Excel
    output = export_bang_doc_hai_excel_file(
        users, schedules, shifts, hazard_configs,
        start_date, end_date, selected_user_ids
    )

    filename = f"bang_doc_hai_{selected_department or 'tatca'}.xlsx"
    return send_file(
        output,
        as_attachment=True,
        download_name=filename,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

from flask import request, render_template
from datetime import datetime, timedelta
from collections import defaultdict
from dateutil.relativedelta import relativedelta

@app.route('/theo-doi-nghi-bu', methods=['GET'], endpoint='theo_doi_nghi_bu')
def report_compensations():
    from collections import defaultdict
    from dateutil.relativedelta import relativedelta
    from flask_login import current_user

    # Ki·ªÉm tra quy·ªÅn admin
    is_admin = getattr(current_user, 'role', '') == 'admin'

    # L·∫•y khoa ph√≤ng
    if is_admin:
        selected_department = request.args.get('department')
        if not selected_department:
            first_dept = db.session.query(User.department).filter(User.department.isnot(None)).first()
            if first_dept:
                selected_department = first_dept[0]
    else:
        selected_department = getattr(current_user, 'department', None)

    if not selected_department:
        return "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c khoa ƒë·ªÉ hi·ªÉn th·ªã."

    # Ng√†y b·∫Øt ƒë·∫ßu/k·∫øt th√∫c
    start = request.args.get('start')
    end = request.args.get('end')
    try:
        start_date = datetime.strptime(start, '%Y-%m-%d').date() if start else datetime.today().replace(day=1)
        end_date = datetime.strptime(end, '%Y-%m-%d').date() if end else datetime.today()
    except ValueError:
        return "Ng√†y kh√¥ng h·ª£p l·ªá. ƒê·ªãnh d·∫°ng c·∫ßn l√† YYYY-MM-DD."

    # D·∫£i ng√†y
    days_range = []
    cur_day = start_date
    while cur_day <= end_date:
        days_range.append(cur_day)
        cur_day += timedelta(days=1)

    # C√°c m√£ ca tr·ª±c
    CA_TRUC_CODES = ['Xƒê', 'Xƒê16', 'Xƒê24', 'Xƒê3', 'XƒêL16', 'XƒêL24', 'XƒêT']

    def is_ca_truc(name):
        return name.startswith('TR·ª∞C') or name in CA_TRUC_CODES

    # H√†m nh·∫≠n di·ªán lo·∫°i ngh·ªâ
    def detect_nghi_type(name):
        name = name.upper().strip()

        # NB n·ª≠a ng√†y (NBS, NBC ho·∫∑c c√≥ 1/2) ‚Üí hi·ªÉn th·ªã /X
        if 'NBS' in name or 'NBC' in name or '1/2' in name:
            return '/X'

        # NB nguy√™n ng√†y
        if name == 'NB' or 'NGH·ªà B√ô' in name:
            return 'NB'

        # Ngh·ªâ tr·ª±c nguy√™n ng√†y
        if 'NT' in name or 'NGH·ªà TR·ª∞C' in name:
            return 'NT'

        # Ngh·ªâ 1/2 ng√†y kh√°c
        if '/X' in name:
            return '/X'

        return None

    # T√≠nh s·ªë d∆∞ th√°ng tr∆∞·ªõc
    first_day_this_month = start_date.replace(day=1)
    first_day_last_month = first_day_this_month - relativedelta(months=1)
    last_day_last_month = first_day_this_month - timedelta(days=1)

    query_last = Schedule.query.join(User).join(Shift).filter(
        Schedule.work_date.between(first_day_last_month, last_day_last_month),
        User.department == selected_department
    )

    prev_comp = defaultdict(float)
    for s in query_last.all():
        shift_name = s.shift.name.strip().upper()
        nghi_type = detect_nghi_type(shift_name)
        if is_ca_truc(shift_name):
            prev_comp[s.user_id] += 1
        if nghi_type == 'NB':
            prev_comp[s.user_id] -= 1
        elif nghi_type == '/X':
            prev_comp[s.user_id] -= 0.5
        elif nghi_type == 'NT':
            prev_comp[s.user_id] -= 1

    # D·ªØ li·ªáu th√°ng hi·ªán t·∫°i
    query = Schedule.query.join(User).join(Shift).filter(
        Schedule.work_date.between(start_date, end_date),
        User.department == selected_department
    )

    users_data = defaultdict(lambda: {
        'name': '',
        'position': '',
        'department': '',
        'days': {},
        'prev_total': 0,
        'remain': 0
    })

    schedules_by_user = defaultdict(list)
    for s in query.all():
        schedules_by_user[s.user_id].append(s)

    for uid in schedules_by_user:
        schedules_by_user[uid] = sorted(schedules_by_user[uid], key=lambda x: x.work_date)

    # X·ª≠ l√Ω t·ª´ng nh√¢n vi√™n
    for uid, schedules in schedules_by_user.items():
        user = schedules[0].user
        users_data[uid]['name'] = user.name
        users_data[uid]['position'] = user.position
        users_data[uid]['department'] = user.department
        users_data[uid]['prev_total'] = prev_comp.get(uid, 0)

        total = 0
        for s in schedules:
            day_str = s.work_date.strftime('%d')
            shift_name = s.shift.name.strip().upper()
            nghi_type = detect_nghi_type(shift_name)

            # ·∫®n ch·ªØ "L√ÄM NG√ÄY" (b·ªè qua kh√¥ng hi·ªÉn th·ªã)
            if 'L√ÄM NG√ÄY' in shift_name or shift_name == 'X':
                continue

            if is_ca_truc(shift_name):
                users_data[uid]['days'][day_str] = 'Xƒê'
                total += 1
            elif nghi_type:
                users_data[uid]['days'][day_str] = nghi_type
                if nghi_type == 'NB':
                    total -= 1
                elif nghi_type == '/X':
                    total -= 0.5
                elif nghi_type == 'NT':
                    total -= 1

        users_data[uid]['remain'] = total + users_data[uid]['prev_total']

    # S·∫Øp x·∫øp
    position_order = ['Gƒê', 'PGƒê', 'TK', 'PTK', 'BS', 'ƒêDT', 'ƒêD', 'NV', 'HL', 'BV']
    sorted_users = sorted(
        users_data.values(),
        key=lambda x: (
            position_order.index(x['position']) if x['position'] in position_order else 99,
            x['name']
        )
    )

    # Highlight ng√†y ngh·ªâ
    fixed_holidays = [(4, 30), (5, 1), (9, 2), (1, 1)]
    highlight_days = []
    for i, d in enumerate(days_range):
        if d.weekday() in [5, 6] or (d.month, d.day) in fixed_holidays:
            highlight_days.append(i)

    departments = []
    if is_admin:
        departments = [row[0] for row in db.session.query(User.department).distinct().all() if row[0]]

    return render_template(
        'report_compensations.html',
        days_range=days_range,
        users_data=sorted_users,
        highlight_days=highlight_days,
        departments=departments,
        selected_department=selected_department,
        is_admin=is_admin,
        start=start_date.strftime('%Y-%m-%d'),
        end=end_date.strftime('%Y-%m-%d')
    )


@app.before_first_request
def create_missing_tables():
    from models.hazard_config import HazardConfig
    db.create_all()
    print("‚úÖ ƒê√£ ki·ªÉm tra v√† t·∫°o c√°c b·∫£ng thi·∫øu (n·∫øu c√≥)")

from models.user import User

from sqlalchemy import inspect

@app.route('/init-db')
def init_db():
    inspector = inspect(db.engine)
    existing_tables = inspector.get_table_names()

    # Ch·ªâ t·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
    if 'user' not in existing_tables:
        db.create_all()
        return "‚úÖ ƒê√£ t·∫°o b·∫£ng v√†o PostgreSQL"
    return "‚ö†Ô∏è B·∫£ng ƒë√£ t·ªìn t·∫°i, kh√¥ng t·∫°o l·∫°i."


@app.route('/run-seed')
def run_seed():
    try:
        import seed
        return "‚úÖ ƒê√£ ch·∫°y seed.py th√†nh c√¥ng!"
    except Exception as e:
        return f"‚ùå L·ªói khi ch·∫°y seed.py: {str(e)}"

import time

@app.before_request
def start_timer():
    request.start_time = time.time()

@app.after_request
def log_request_time(response):
    duration = time.time() - request.start_time
    app.logger.info(f"[REQUEST TIME] {request.method} {request.path} - {duration:.3f}s")
    return response

@app.cli.command("db-upgrade")
def db_upgrade():
    from flask_migrate import upgrade
    upgrade()

@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500

import traceback

@app.errorhandler(Exception)
def handle_exception(e):
    return f"<h2>Internal Server Error</h2><pre>{traceback.format_exc()}</pre>", 500


@app.before_first_request
def setup_initial_data():
    import os
    from sqlalchemy import inspect

    inspector = inspect(db.engine)
    existing_tables = inspector.get_table_names()
    required_tables = {'user', 'permission'}

    # ‚úÖ T·∫°o b·∫£ng n·∫øu thi·∫øu
    if not required_tables.issubset(set(existing_tables)):
        from models.permission import Permission
        from models.user import User
        db.create_all()
        print("‚úÖ ƒê√£ t·∫°o t·∫•t c·∫£ b·∫£ng c·∫ßn thi·∫øt.")
    else:
        print("‚úÖ C√°c b·∫£ng ch√≠nh ƒë√£ t·ªìn t·∫°i.")

    # ‚úÖ Th√™m c·ªôt 'active' n·∫øu ch∆∞a c√≥
    try:
        with db.engine.connect() as connection:
            result = connection.execute(
                "SELECT column_name FROM information_schema.columns WHERE table_name='user' AND column_name='active';"
            )
            if not result.fetchone():
                connection.execute('ALTER TABLE "user" ADD COLUMN active BOOLEAN DEFAULT TRUE;')
                print("‚úÖ ƒê√£ th√™m c·ªôt 'active' v√†o b·∫£ng user.")
            else:
                print("‚úÖ C·ªôt 'active' ƒë√£ t·ªìn t·∫°i.")
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra/th√™m c·ªôt 'active': {e}")

    # ‚úÖ Th√™m t√†i kho·∫£n admin n·∫øu ch∆∞a c√≥
    from models.user import User
    if not User.query.filter_by(username='admin').first():
        admin = User(
            name="Qu·∫£n tr·ªã vi√™n",
            username="admin",
            password="admin",
            role="admin",
            department="Ph√≤ng CNTT",
            position="B√°c sƒ©"
        )
        db.session.add(admin)
        db.session.commit()
        print("‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n admin.")
    else:
        print("‚ö†Ô∏è T√†i kho·∫£n admin ƒë√£ t·ªìn t·∫°i.")

if __name__ == '__main__':
    import os
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True)



